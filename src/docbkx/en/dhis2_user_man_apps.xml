<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" []>
<chapter>
  <title>Apps</title>
  <para>A packaged app is an <ulink
      url="https://developer.mozilla.org/en-US/docs/Open_Web_apps_and_Web_standards">Open Web
      App</ulink> that has all of its resources (HTML, CSS, JavaScript, app manifest, and so on)
    contained in a zip file and can be uploaded to a DHIS 2 installation at runtime. A packaged app
    is a zip file with an <ulink url="http://www.w3.org/2008/webapps/manifest/">app manifest</ulink>
    in its root directory. The manifest must be named manifest.webapp. Since DHIS 2.12, an
    implementer can install packaged apps in DHIS 2 and extend the web interface of DHIS2.</para>
  <section>
    <title>Purpose of Packaged Apps</title>
    <para>The purpose of packaged apps is to extend the web interface of DHIS 2. A system deployment
      will often have custom and unique requirements. The apps provide a convenient extension point
      to the user interface. Through apps, you can complement and customize the DHIS 2 core
      functionality with custom solutions in a loosely coupled and clean manner.</para>
    <para>Apps do not have permissions to interact directly with DHIS 2 Java API. Instead, apps are
      expected to use functionality and interact with the DHIS 2 services and data by utilizing the
      DHIS 2 Web API.</para>
  </section>
  <section>
    <title>Creating Apps</title>
    <para>Creating apps is simple: You can create HTML, JavaScript and CSS files similar to any
      other web application. Then one needs to create a file called <emphasis role="italic"
        >manifest.webapp</emphasis> which describes the contents of the app. This file should be in
      the format specified by the <ulink url="http://www.w3.org/2008/webapps/manifest/">W3C Manifest
        for Web Applications</ulink>. A basic example of the <emphasis role="italic"
        >manifest.webapp</emphasis> is shown below:</para>
    <para>
      <screen>{
    "version": "0.1",
    "name": "My App",
    "description": "My App is a Packaged App",
    "launch_path": "/index.html",
    "icons": {
        "16": "/img/icons/mortar-16.png",
        "48": "/img/icons/mortar-48.png",
        "128": "/img/icons/mortar-128.png"
    },
    "developer": {
        "name": "Me",
        "url": "http://me.com"
    },
    "default_locale": "en",
    "activities": {
        "dhis": {
            "href": "*"
        }
    }
}</screen>
    </para>
    <para>The <emphasis role="italic">manifest.webapp</emphasis> file must be located at the root of
      the project. Among the properties, the <emphasis role="italic">icons&#x2192;48</emphasis>
      property is used for the icon that is displayed on the list of apps that are installed on a
      DHIS 2 instance. The <emphasis role="italic">activities</emphasis> property is an
      dhis-specific extension meant to differentiate between a standard Open Web App and an App that
      can be installed in DHIS 2. The <emphasis role="italic">*</emphasis> value for <emphasis
        role="italic">href</emphasis> is converted to the appropriate URL when the App is uploaded
      and installed in DHIS 2. This value can then be used by the application's JavaScript and HTML
      files to make calls to the DHIS 2 Web API and identify the correct location of DHIS 2 server
      on which the App has been installed. To clarify, the <emphasis role="italic"
        >activities</emphasis> part will look similar to this after the App has been
      installed:</para>
    <screen>"activities": {
    "dhis": {
        "href": "http://apps.dhis2.org/demo"
    }
 }</screen>
    <para>To read the JSON structure into Javascript you can use a regular AJAX request and parse
      the JSON into an object. Most Javascript libraries provide some support, for instance with
      jQuery it can be done like this:</para>
    <screen>$.getJSON( "manifest.webapp", function( json ) {
    var apiBaseUrl = json.activities.dhis.href + "/api";
} );</screen>
    <para>The App can contain HTML, Javascript, CSS and image files. The file structure could look
      something like this:</para>
    <screen>/
/manifest.webapp    #manifest file (mandatory)
/css/               #css stylesheets (optional)
/img/               #images (optional)
/js/Â                #javascripts (optional)</screen>
    <para>Note that it is only the manifest.webapp file which must be placed in the root. It is up
      the developer to organize CSS, images and Javascript files inside the app.</para>
    <para>All the files in the project should be compressed into a standard zip archive. Note that
      the manifest.webapp file must be located on the root of the zip archive (do not include a
      parent directory in the archive). The zip archive can then be installed into DHIS 2 as you
      will see in the next section.</para>
  </section>
  <section>
    <title>Configuring DHIS 2 for Apps Installation</title>
    <para>The App manager is found under Services &#x2192; Apps. If your logged in user has
      permissions to view and edit settings you will see the Settings link in the left menu.</para>
    <para><inlinegraphic fileref="resources/images/apps/appSettings.png"/></para>
    <para>The following settings can be configured:</para>
    <orderedlist>
      <listitem>
        <para><emphasis role="italic">App Installation Folder:</emphasis> The folder on the file
          system where apps are unpacked. By default this is under the expanded DHIS folder suffixed
          by /apps. If you like to install your apps in another location, say www folder of Apache
          2, you can specify the absolute path to that directory on the server, making your apps to
          be unpacked at that location.</para>
      </listitem>
      <listitem>
        <para><emphasis role="italic">App Base URL:</emphasis> The URL through which the apps can be
          found on the Web. By default this is the same as your DHIS 2 URL suffixed by /apps. If you
          are installing apps through a different web server you need to provide the full URL for
          that web server.</para>
      </listitem>
      <listitem>
        <para><emphasis role="italic">App store URL:</emphasis> The app repository through which new
          apps can be downloaded and installed. Each deployment can host their own, approved set of
          apps that can be installed in DHIS 2. The DHIS 2 App store can be found at <ulink
            url="http://www.dhis2.org/appstore">http://www.dhis2.org/appstore</ulink></para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Installing Apps into DHIS 2</title>
    <para>Apps can be installed by uploading zip file into the App manager. In, Services &#x2192;
      Apps, click on the <emphasis role="italic">App Store</emphasis> menu item.</para>
    <para><inlinegraphic fileref="resources/images/apps/appStore.png"/></para>
    <para>The app can be uploaded by pressing the Browse button and after selecting the zip package,
      the file is uploaded automatically and installed in DHIS 2. You can also browse through apps
      in the app store and download apps from there. The app store allows for app searching,
      reviewing, commenting, requesting features, rating on the apps by the community.</para>
  </section>
  <section>
    <title>Launching Apps</title>
    <para>After installation your apps will be integrated with the menu system and can be accessed
      under services and from the module overview page. It can also be accessed from the home page
      of the apps module.  Click on an app in the list in order to launch it.</para>
  </section>
  <section>
    <title>Web-API for Apps</title>
    <para>From DHIS 2.14 there is also additional support for apps through the web-api. The <emphasis role="italic">/api/apps</emphasis>
      endpoint can be used for installing, deleting, listing apps.</para>
    <para><emphasis role="bold">To list all installed apps (mediatypes works as usual, accept header or file extension, xml and
        json):</emphasis><screen>curl -X GET -u user:pass -H "Accept: application/json" http://server/api/apps</screen></para>
    <para><emphasis role="bold">To install an
      app:</emphasis><screen>curl -X POST -u user:pass -F file=@app.zip http://server/api/apps</screen></para>
    <para><emphasis role="bold">To delete an
      app:</emphasis><screen>curl -X DELETE -u user:pass http://server/api/apps/&lt;app-name></screen></para>
    <para><emphasis role="bold">Force reload of installed apps (useful if you added a file manually in the
      file-system):</emphasis><screen>curl -X PUT -u user:pass http://server/api/apps</screen></para>
  </section>
  <section>
    <title>Adding the DHIS menu to your App</title>
    <para>To keep a uniform look within DHIS it is (from DHIS 2.15) possible to add the top menu to your own app. In this section we will explain how to do this. The following will explain how to get both the Apps and the Profile menu into your app.<inlinegraphic fileref="resources/images/apps/profileMenu.png"/></para>
    <para>The first step is to adding the menu is including the stylesheets and scripts that are required. All javascript files are found in <emphasis role="italic">/dhis-web-commons/javascripts/dhis2/</emphasis> while the css files are found in <emphasis role="italic">/dhis-web-commons/font-awesome/css/font-awesome.min.css</emphasis> and <emphasis role="italic">/dhis-web-commons/css/menu.css</emphasis>
    The following list gives a small discription of what these files do.
  </para>
  <para>
      <emphasis role="bold">Scripts:</emphasis>
      <itemizedlist>
        <listitem>
          <para><emphasis role="italic">jquery.min.js / jqLite / angular.element</emphasis> : One of the mentioned libraries needs to be present. We use the stripped down version of jqLite that is present in angular for the menu. This makes it compatible with jqLite and jQuery. </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">dhis2.translate.js</emphasis> : Translate script that translates menu text to your current dhis language setting</para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">dhis2.menu.js</emphasis> : Menu logic that deals with all the ordering, searching of menu items etc.</para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">dhis2/dhis2.menu.ui.js</emphasis> : Menu ui code that has all the menu ui related code for scolling, shortcuts, HTML markup etc.</para>
        </listitem>
      </itemizedlist>
      <emphasis role="bold">Stylesheets:</emphasis>
      <itemizedlist>
        <listitem>
          <para><emphasis role="italic">font-awesome.min.css</emphasis> : Used for various icons in the menu.</para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">menu.css</emphasis> : The CSS used for the menu.</para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">dhis2.translate.js</emphasis> : Translate script that translates menu text to your current dhis language setting</para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      For a app that will run using the same url structure as the normal DHIS apps the scripts and the stylesheets are the only thing you need. If your app is running using a different url structure than the default one, you will need to specify a <emphasis role="italic">base url</emphasis> before including the menu scripts. Including the scripts and stylesheets would look something like the following:
    <screen>
        &lt;!-- DHIS2 Settings initialization for a baseUrl that is used for the menu --&gt;
        &lt;script&gt;
            window.dhis2 = window.dhis2 || {};
            dhis2.settings = dhis2.settings || {};
            dhis2.settings.baseUrl = &#39;dhis&#39;;
        &lt;/script&gt;

        &lt;!-- Menu scripts --&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;./dhis-web-commons/javascripts/dhis2/dhis2.translate.js&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;./dhis-web-commons/javascripts/dhis2/dhis2.menu.js&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;./dhis-web-commons/javascripts/dhis2/dhis2.menu.ui.js&quot;&gt;&lt;/script&gt;

        &lt;!-- Stylesheets related to the menu --&gt;
        &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;./dhis-web-commons/font-awesome/css/font-awesome.min.css&quot;/&gt;
        &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; media=&quot;screen&quot; href=&quot;./dhis-web-commons/css/menu.css&quot;&gt;
    </screen>
  </para>
    <para>
      To make the above a bit more clear. The following part will initialize some variables. If you do not use any other dhis libraries these will not be set and therefore will have to be set by you first. After that the 3rd line specifies a baseUrl of where your dhis instance is running on your webserver. For example: <emphasis role="italic">dhis</emphasis> in this case means the server is running at <emphasis role="italic">http://localhost:8080/dhis/</emphasis>. Note that you will only have to specify the part after the web address. So if your instance is running at <emphasis role="italic">http://www.example.com/myInstance/</emphasis> you would only specify <emphasis role="italic">myInstance</emphasis>
      <screen>
        &lt;!-- Example setting for myInstance --&gt;
        &lt;script&gt;
            window.dhis2 = window.dhis2 || {};
            dhis2.settings = dhis2.settings || {};
            dhis2.settings.baseUrl = &#39;myInstance&#39;;
        &lt;/script&gt;
      </screen>
    </para>
    <para>
      The above will only include the neccesary scripts to be able to show the menu. To actually make it show up we have two possibilities. The first one is using a basic &lt;div&gt; element with an id attribute. 
      <screen>
        &lt;div id=&quot;dhisDropDownMenu&quot;&gt;&lt;/div&gt;
      </screen>
      An alternative is available when your application uses angular. We have included a directive to show the menu. This would be used as follows:
      <screen>
        &lt;div d2-menu&gt;&lt;/div&gt;
      </screen>
      The element type in this case does not really matter. As long as you include the <emphasis role="italic">d2-menu</emphasis> directive. To be able to use the menu directive you would also have to include the directive in your angular app. The angular module containing the directive is called <emphasis role="italic">d2Menu</emphasis>.
      <screen>
        'use strict';

var appMenu = angular.module('appMenu',
         ['ngRoute', 
          'ngCookies',
          'd2Menu']);
      </screen>
    </para>
      <para>
        The minimum amount of code to show the menu is shown below. You could use this as a starting reference.
      <screen>
        &lt;!DOCTYPE html&gt;
&lt;html &gt;&lt;!--ng-app=&quot;appMenu&quot;&gt; --&gt;
    &lt;head&gt;
        &lt;title&gt;Dhis2 Menu&lt;/title&gt;

        &lt;!-- Stylesheets related to the menu --&gt;
        &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;./dhis-web-commons/font-awesome/css/font-awesome.min.css&quot;/&gt;
        &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; media=&quot;screen&quot; href=&quot;./dhis-web-commons/css/menu.css&quot;&gt;
    &lt;/head&gt;

    &lt;body style=&quot;background-color: black;&quot;&gt;

        &lt;div id=&quot;dhisDropDownMenu&quot;&gt;&lt;/div&gt;

        &lt;!-- DHIS2 Settings initialization for a baseUrl that is used for the menu --&gt;
        &lt;script&gt;
            window.dhis2 = window.dhis2 || {};
            dhis2.settings = dhis2.settings || {};
            dhis2.settings.baseUrl = &#39;dhis&#39;;
        &lt;/script&gt;

        &lt;!-- Menu scripts --&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;./dhis-web-commons/javascripts/jQuery/jquery.min.js&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;./dhis-web-commons/javascripts/dhis2/dhis2.translate.js&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;./dhis-web-commons/javascripts/dhis2/dhis2.menu.js&quot;&gt;&lt;/script&gt;
        &lt;script type=&quot;text/javascript&quot; src=&quot;./dhis-web-commons/javascripts/dhis2/dhis2.menu.ui.js&quot;&gt;&lt;/script&gt;

    &lt;/body&gt;
&lt;/html&gt;
      </screen>
    </para>
  </section>
</chapter>
