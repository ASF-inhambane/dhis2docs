<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" []>
<chapter>
  <title>Reporting</title>
  <section>
    <title>An overview of how reporting and aggregation works</title>
    <para>
In the bigger picture of HIS terminology all data in DHIS are usually called aggregated as they are aggregates (e.g. monthly summaries) of medical records or some kind of service registers reported from the health facilities. Aggregation inside DHIS however, which is the topic here, is concerned with how the raw data captured in DHIS (through data entry or import)are further aggregated over time (e.g. from monthly to quarterly values) or up the organisational hierarchy (e.g. from facility to district values). 
</para>
    <section>
      <title>Terminology</title>
      <itemizedlist>
        <listitem>
          <para><emphasis>Raw data</emphasis> refers to data that is registered into the DHIS 2 either through data entry or data import, and has not been manipulated by the DHIS aggregation process. All these data are stored in the table (or Java object if you prefer) called DataValue.
 </para>
        </listitem>
        <listitem>
          <para><emphasis>Aggregated data</emphasis>refers to data that has been aggregated by the DHIS2, meaning it is no longer raw data, but some kind of aggregate of the raw data.</para>
        </listitem>
        <listitem>
          <para><emphasis>Indicator values</emphasis> can also be understood as aggregated data, but these are special in the way that they are calculated based on user defined formulas (factor * numerator/denominator). Indicator values are therefore processed data and not raw data, and are located in the aggregatedindicatorvalue table/object. Indicators are calculated at any level of the organisational hierarchy and these calculations are then based on the aggregated data values available at each level. A level attribute in the aggregateddatavalue table refers to the organisational level of the orgunit the value has been calculated for.
    </para>
        </listitem>
        <listitem>
          <para>
    <emphasis>Period and Period type</emphasis> are used to specify the time dimension of the raw or aggregated values, and data can be aggregated from one period type to another, e.g from monthly to quarterly, or daily to monthly. Each data value has one period and that period has one period type. E.g data values for the periods Jan, Feb, and Mar 2009, all of the monthly period type can be aggregated together to an aggregated data value with the period “Q1 2009” and period type “Quarterly”.
   </para>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Basic rules of aggregation</title>
      <section>
        <title>What is added together</title>
        <para>Data (raw) can be registered at any organisational level, e.g. at at national hospital at level 2, a health facility at level 5, or at a bigger PHC at level 4. This varies form country to country, but DHIS is flexible in allowing data entry or data import to take place at any level. This means that orgunits that themselves have children can register data, sometimes the same data elements as their children units. The basic rule of aggregation in DHIS 2 is that <emphasis>all raw data is aggregated together</emphasis>, meaning data registered at a facility on level 5 is added to the data registered for a PHC at level 4.</para>
        <para>
It is up to the user/system administrator/designer to make sure that no duplication of data entry is taking place and that e.g. data entered at level 4 are not about the same services/visits that are reported by orgunit children at level 5. NOTE that in some cases you want to have “duplication” of data in the system, but in a controlled manner. E.g. when you have two different sources of data for population estimates, both level 5 catchment population data and another population data source for level 4 based on census data (because sum of level 5 catchments is not always the same as level 4 census data). Then you can specify using advanced aggregation settings (see further down) that the system should e.g. not add level 5 population data to the level 4 population data, and that level 3,2,1 population data aggregates are only based on level 4 data and does not include level 5 pop data.</para>
      </section>
      <section>
        <title>How data gets added together</title>
        <para>How data is aggregated depends on the dimension of aggregation (see further down).</para>
        <para>Along the orgunit level dimension data is always summed up, simply added together. Note that raw data is never percentages, and therefore can be summed together. Indicator values that can be percentages are treated differently (re-calculated at each level, never summed up).</para>
        <para>
Along the time dimension there are several possibilities, the two most common ways to aggregate are sum and average. The user can specify for each data element which method to use by setting the aggregation operator (see further down). Monthly service data are normally summed together over time, e.g. the number of vaccines given in a year is the sum of the vaccines given for each month of that year. For population, equipment, staff and other kind of what is often called semi-permanent data the average method is often the one to use, as, e.g. “number of nurses” working at a facility in a year would not be the sum of the two numbers reported in the six-monthly staffing report, but rather the average of the two numbers. More details further down under “aggregation operators”. 
</para>
      </section>
    </section>
    <section>
      <title>Dimensions of aggregation</title>
      <section>
        <title>Orgunits and levels</title>
        <para/>
      </section>
      <section>
        <title>Period</title>
        <para/>
      </section>
      <section>
        <title>Data Element Categories</title>
        <para/>
      </section>
    </section>
    <section>
      <title>Aggregation operators, methods for aggregation</title>
      <section>
        <title>Sum</title>
        <para/>
      </section>
      <section>
        <title>Average</title>
        <para/>
      </section>
      <section>
        <title>Count</title>
        <para/>
      </section>
      <section>
        <title>Where to specify </title>
        <para/>
      </section>
    </section>
    <section>
      <title>Advanced aggregation settings (aggregation levels)</title>
      <section>
        <title>Aggregation levels</title>
        <para>The normal rule of the system is to aggregate all raw data together when moving up the organisational hierarchy, and the system assumes that data entry is not being duplicated by entering “the same services provided to the same clients” at both facility level and also entering an “aggregated” (sum of all facilities) number at a higher level. This is to more easily facilitate aggregation when the same services are provided but to different clients/catchment populations at facilities on level 5 and a PHC (the parent of the same facilities) at level 4. In this way a facility at level 5 and a PHC at level 4 can share the same data elements and simply add together their numbers to provide the total of services provided in the geographical area.</para>
        <para>Sometimes such an aggregation is not desired, simply because it would mean duplicating data about the same population. This is the case when you have two different sources of data for two different orgunit levels. E.g. catchment population for facilities can come from a different source than district populations and therefore the sum of the facility catchment populations do not match the district population provided by e.g. census data. If this is the case we would actually want “duplicated” data in the system so that each level can have as accurate numbers as possible, but then we do NOT want to aggregate these data sources together.
</para>
        <para>In the Data Element section you can edit data elements and for each of them specify how aggregation is done for each level. In the case described above we need to tell the system NOT to include facility data on population in any of the aggregations above that level, as the level above, in this case the districts have registered their population directly as raw data. The district population data should then be used at all levels above and including the district level, while facility level should use its own data.</para>
      </section>
      <section>
        <title>How to edit data element aggregation</title>
        <para>This is controlled through something called aggregation levels and at the end of the edit data element screen there is a tick-box called Aggregation Levels. If you tick that one you will see a list of aggregation levels, available and selected. Default is to have no aggregation levels defined, then all raw data in the hierarchy will be added together. To specify the rule described above, and given a hierarchy of Country, Province, District, Facility: select Facility and District as your aggregation levels. Basically you select where you have data. Selecting Facility means that Facilities will use data from facilities (given since this is the lowest level). Selecting District means that the District level raw data will be used when aggregating data for District level (hence no aggregation will take place at that level), and the facility data will not be part of the aggregated District values. When aggregating data at Province level the District level raw data will be used since this is the highest available aggregation level selected. Also for Country level aggregates the District raw data will be used. Just to repeat, if we had not specified that District level was an aggregation level, then the facility data and district data would have been added together and caused duplicate (double) population data for districts and all levels above.</para>
      </section>
    </section>
  </section>
  <section>
    <title>Reports</title>
    <para>The reporting module in DHIS 2 provides a range of reporting alternatives, including canned reports using either JasperReports or BIRT, data set reports, charts, pivot tables and report tables.</para>
    <section>
      <title>The DHIS2 datamart</title>
      <para>he purpose of the datamart is to provide pre-processed data to external data analysis and reporting tools. The datamart consists of two tables, <classname>aggregateddatavalues</classname> and <classname>aggregatedindicatorvalues</classname> in the DHIS2 database. The values in the datamart are aggregated versions of the raw data found in the datavalue table as well as calculated indicator values. Aggregation can take place over time (e.g. from monthly data to aggregated quarterly values), or place (e.g. from PHU data to aggregated district totals) and the datamart can store all kinds of such aggregated values. The datamart is as such just a processed &quot;copy&quot; of the data values and it can be emptied and regenerated at any time from the underlying raw data. The datamart is a read-only table, and should be used by reports (such as BIRT) and other analytical tools (such as Excel) for further ad-hoc analyis or presentation. The metadata in the two data mart tables are referenced by internal identifiers, such as <varname>dataelementid</varname>, <varname>organisationunitid</varname> which refer to the tables like <classname>dataelement</classname> and <classname>organisationunit</classname>. See the section  &apos;How to make use of the data mart in external tools&apos; for more on this. How the data is aggregated and what ends up in these two tables is controlled from the Data mart export user interface under the Services submenu.

</para>
      <section>
        <title>The datamart export process</title>
        <para>The datamart export process is defined in the user interface and controls what kind of data that is populated in the data mart tables. Data mart exports are defined as a set of selection boxes where the user can select which data elements, indicators, orgunits and periods to export. 
</para>
        <section>
          <title>How to create a data mart export </title>
          <para>In the Datamart management window click on the Add New button and a Generate data mart window will open. There are 4 selection boxes; Data elements, Indicators, Organisation units, and periods. For each of the boxes select what you want to export, note if you don&apos;t want both data elements and indicators, you can leave one of these empty, but at least on of these need some selected items together with selected orgunits and periods. The available list on the left side can be filtered by data element group, indicator group, organisation unit level, and period type accordingly. You can move items across to the selected list by double clicking on an item in the available list or by selecting an item and use the move buttons (see selection button explanations below).

When you are done selecting you can export to data mart by clicking on the Export button. If you want to keep your selections for later you can give it a name in the Name text box at the bottom of the window and click on Save. See more about saved data mart exports below. 

</para>
          <para>Each of the selection buttons function will now be described.</para>
          <itemizedlist>
            <listitem>
              <para>&gt; Pressing this icon will move the selected item across form the available list on the left to the selected list on the right</para>
            </listitem>
            <listitem>
              <para>&gt;&gt; Pressing this icon will move all items in the available list across to the selected list</para>
            </listitem>
            <listitem>
              <para>&gt;&gt;&gt; This icon is only applicable when moving orgunits from the available list to the selected list. This operation will move all children organizational units from the available list, to the selected list. </para>
            </listitem>
          </itemizedlist>
        </section>
        <section>
          <title>Datamart organizational units</title>
          <para>The datamart can include values aggregated to different levels in the same table and exactly which level a value belongs to is described by the &apos;level&apos; column. When pulling data put of the datamart into external tools it is important to be aware of this level as combining data for different levels will result in duplication. 

For DHIS 1.4 users this means that there is no longer a separate table per level, but instead on a common table and a level column that separates the levels. Unlike DHIS 1.4, in DHIS 2 you specify in individual data element and indicator definitions specific orgunit levels the datamart should export to.  In DHIS2 this is only defined in the datamart export window. In  DHIS2,  the export process  is  thus completely decoupled from the data element and indicator definitions and up to any user to define which orgunits (at any level) they want to see aggregated data for.
</para>
          <para>Which orgunits that get exported to datamart (the two tables agggregateddatavalue and aggregatedindicatorvalue) are <emphasis>only</emphasis> controlled through the datamart export window, and there you define this per orgunit, not per orgunit level. There is a filter using orgunit level, but the orgunits that are selected are the only ones that end up in the datamart. Same for data elements and indicators.

</para>
          <para>Every time you do a datamart export you can change which orgunits to export data for. The data values will automatically be aggregated up to the orgunit that is selected, no matter what level. 
</para>
        </section>
        <section>
          <title>Datamart periods</title>
          <para>The datamart can hold values aggregated to different period types or frequencies, e.g. monthly, quarterly or yearly data. The <varname>periodtypeid</varname> field  refers to the frequency the value belongs to, and the <varname>periodid</varname> column refers to the exact period. These columns are always referenced to the <classname>periodtype</classname> and <classname>period</classname> table respectively. With these tables, queries can be constructed to display the name of the <classname>periodtype</classname> and <classname>period</classname> to the user.  As an example,  a particular <varname>periodtypeid </varname>  might refernece a particular <classname>periodtype</classname> with a <varname>name </varname>property equal to &apos;Monthly&apos;. The <varname>periodid</varname> property can be used then to determine a particular period from the database. Note that DHIS2 only stores the <varname>startdate</varname> and <varname>enddate</varname> for a particular period, so you may need to format the date to display a value, such as &apos;Jan 2009&apos;. Be careful in combining values with different periodtypes as this may cause duplication in subsequent ad-hoc analysis.


</para>
        </section>
        <section>
          <title>Data element categories in the datamart</title>
          <para>Each data value for a data element has a reference to a category option combo, which is a combination of the disaggregations for the data value, e.g. (male,&lt;5y) or (In PHU, &lt;1y). These disaggregations are exported as they are to the data mart, and no further aggregation is done on this dimension. See the data elements section for more on data element categories and the resource tables section for more information on how to perform automatic aggregation on these categories.
</para>
        </section>
        <section>
          <title>Limitation on the number of data elements</title>
          <para>Due to the limitation in number of columns per table in the database, there is a limit to how many data elements that can be selected for each data mart export. If you are using the Postgresql database system,  this limit you will need to select no more than 255 data elements per data mart export. If you need to export more than this number of data elements, you have to split it up into multiple data mart exports and run them one by one.
</para>
        </section>
        <section>
          <title>Adding new data to an existing data mart </title>
          <para>When you add new data to an existing data mart, the new values will be appended to the existing values already present in the datamart, so that the datamart grows for each new process if new selections (such as new periods) have been made. If any of the selected values are already in the data mart then the old will be replaced by the newly generated values.  If data updates have been made to values that are used to generate the aggregate values in the datamart, these values will be updated.
</para>
        </section>
      </section>
    </section>
    <section id="reportTable">
      <title>Report tables</title>
      <para>
Report tables are meant to be database tables fulfilling the specific data needs of a report, chart, pivot table or other output format. It can be understood as a mini datamart that contains only the data needed for its purpose (the report). The rationale behind this concept is to automatically provide the data sources for reports without bothering the users every time, like a normal datamart, and to speed up the data processing and aggregation (small targeted datamarts are obviously faster than big ones). 
</para>
      <para>When a report table is created and generated, a new database table will appear in the DHIS 2 database as a normal table, but always with the prefix <classname>_report</classname>. This table should not be altered manually as it is controlled by the system. These tables are constantly being deleted and recreated as the user wants new updated data within the same table structure. These tables can then be accessed and used from any third party tool for displaying data. In DHIS 2 we have integrated with the BIRT report designer from the Eclipse platform and made it especially easy to link BIRT reports to report tables and to run these reports from within DHIS 2. However, we see report tables as a much broader tool and concept than to just support BIRT reports. It can and should (for performance gain and automation) be used for as many data output purposes as possible. e.g. as data sources for the database views used for Excel pivot tables. 
</para>
      <para>
Report tables are meant to be defined once and then run automatically in the background each time a report that depends on it is generated. Reports (BIRT, the default report in DHIS 2) is directly linked to one or more report tables and these are automatically processed in the background when the report is run. To make the report tables reusable over time and across orgunits they can have parameters. Three types of parameters are allowed; orgunit, parent orgunit (for listing of orgunits in one area) and reporting month.  Being able to use period as a parameter makes the report table reusable over time and as such fits nicely with report needs such as monthly, quarterly or annual reports. When a report is run by the user in the DHIS 2 the user must specify the values for the report tables that are linked to the report, and first the report table is re-generated (deleted and re-created with updated data) and then the report is run (in BIRT report engine). 
</para>
      <para>
Report tables can consist of either values related to data elements or indicators, and not a mix of the two. A third report table type is data completeness, which is related to completeness of reporting across orgunits for a given month. Completeness reports will be covered in a separate section. The reason for not mixing data elements and indicators in one report table is due to the cross tab functionality that would be very complex and less useful with yet another dimension. Since two or more report tables can easily be linked to one report this limitation should not have much effect on report design possibilities. 
</para>
      <para>
There are three dimensions in a report table that identify the data; indicators or data elements, orgunits and periods. For each of these dimensions the user can select which metadata values to include in the report. The user must select one or more data elements or indicators to appear in the report. The orgunit selection can be substituted with a parameter, wither one specific orgunit or an orgunit parent (making all its children appear in the report). If one or more orgunits are selected and no orgunit parameter is used then the report is static with regard to which orgunits to include, which in most cases is an unnecessary restriction to a report. The period selection is more advanced as it can in addition to specific periods like Jan-09, Q1-08, 2007 also contain what is called relative periods. As report usually is run routinely over time a specific period like Jan-09 is not very useful in a report. In stead, if you want to design a monthly report you could use the relative period called Reporting Month. Then you must also include Reporting Month as one of your report parameters to let the system know what exactly is the Reporting Month on the time of report generation. There are many other relative periods available and they all relate to the report parameter Reporting Month. E.g. the relative period called So far this year refers to the accumulative value for the year incl. the Reporting Month. If you want a trend report with multiple periods in stead of one aggregated period you can select e.g. Individual Months this year which would give you values for each month so far in the year, and you can do a similar report with quarters. The idea is to support as many generic report types as possible using relative periods, so if you have other report needs please suggest new relative periods on the mailing list and they will be added to the report table options. 
</para>
      <para>
Cross tabbing is a very powerful functionality in report design as the typical DHIS data table with references to period, data element/indicator and orgunit makes more advanced report design very difficult as you cannot put e.g. specific indicators, periods or orgunits on specific columns. E.g. by cross-tabbing on the indicator dimension in an indicator report table you will get the indicator names on the column headers in you report, in addition to a column referencing orgunit, and another column referencing period. With such a table design you could drag and drop indicator names to specific columns or chart positions in the BIRT report design. Similarly you can cross tab on orgunits or periods to make their names specifically available to report design. E.g. by cross-tabbing on periods and selecting the two relative periods, reporting month and so far this year you can design reports with both the last month and the accumulative annual value for given month as they will be available as column headers in your report table. It is also possible to combine two dimensions in cross-tabbing, e.g. period and indicator, which makes it possible to e.g. look at three selected indicators for two specific relative periods. This would e.g. make it possible to make a table or chart based report with BCG, DPT3 and Measles coverage, both for the last month and the accumulative coverage so far in the year. 
</para>
      <para>
All in all, by combining the functionality of cross tabbing, relative periods and report table parameters you should have a tool to support most report scenarios. If not we would be very happy to receive suggestions to further improvements to report tables. As already mentioned we have started to look at more fine-grained parameters for the period dimension as the Reporting Month does not cover or at least is not intuitive enough when it comes to e.g. quarterly reports.
</para>
      <section>
        <title>Data element and indicator tables</title>
        <para>These two tables types are very similar with the only difference being that one has data element values and the other indicator values.
</para>
        <section>
          <title>Report table features</title>
          <itemizedlist>
            <listitem>
              <para><emphasis role="bold">Crosstab dimensions</emphasis></para>
              <para>Report tables can be generated with cone or more of the following cross-tabulation dimensions: data element/indicator, orgunit, and period. This implies that columns will be created based on the values of the dimensions chosen. For example, if &quot;Indicator&quot;  is selected as the crosstab dimension,  a  column name will be generated for each indicator present in the report table.   You must select at least one dimension for the table to be valid. Selecting all three dimensions is possible, but makes little sense and is not reccomended.</para>
            </listitem>
            <listitem>
              <para><emphasis role="bold">Include regression</emphasis>
</para>
              <para>This adds additional columns with regression values that can be included in the report design, e.g. in line charts.
</para>
            </listitem>
            <listitem role="bold">
              <para><emphasis role="bold">Indicators/Data elements </emphasis></para>
              <para>Here you select the data elements/indicators that you want to include in the report. Use the group filter to more easily find what you are looking for and double click on the items you want to include.  

</para>
            </listitem>
            <listitem>
              <para><emphasis role="bold">Organisation units </emphasis></para>
              <para>Here you can either select static orgunits to always include in the report, or to keep this section empty and let the users select orgunits when running the report through the use of  report parameters. See the section below for a decscription of report paramaters.
</para>
            </listitem>
            <listitem>
              <para><emphasis role="bold">Periods</emphasis></para>
              <para>Here you can either choose fixed periods that you always want to include in the report or leave this section empty and opt for relative periods in stead.
</para>
            </listitem>
            <listitem>
              <para><emphasis role="bold">Relative periods</emphasis></para>
              <para>In stead of using fixed/static periods like &apos;Jan-2010&apos; or &apos;Q1-2010&apos; more generic periods can be used to create reusable report tables.  For monthly reports the period &apos;reporting month&apos; will simply pick the current reporting month selected by the user when running the report. A description of each of the supported relative periods is provided below.</para>
              <itemizedlist>
                <listitem>
                  <para><emphasis>Reporting month:</emphasis>
Use this for monthly reports. The month selected in the reporting month parameter will be used in the report.
</para>
                </listitem>
                <listitem>
                  <para><emphasis>Last 3/6/9/12 months:</emphasis> Relative to the selected reporting month the aggregated value for the previous 3,6,9,or 12 months will be used.</para>
                </listitem>
                <listitem>
                  <para><emphasis>Last 3-6, 6-9, 9-12 months:</emphasis> Used for &quot;rolling quarters&quot; reports. Aggregated 3 months values will be used based on the selected reporting month. As an exmple,  if July 2010 is selected the last 3-6 period will be an aggregated period of Feb-April 2010.
</para>
                </listitem>
                <listitem>
                  <para><emphasis>Last 12 individual months:</emphasis> Use this for monthly trend analysis. This will give 12 values, one for each of the 12 previous months relative to the chosen reporting month.
</para>
                </listitem>
                <listitem>
                  <para><emphasis>So far this year:</emphasis> This is the cumulative so far in the year, aggregating the months from the beginning of the year up to and including the selected reporting month.
</para>
                </listitem>
                <listitem>
                  <para><emphasis>So far this financial year:</emphasis> Similar to the above, but a cumulative value relative to start of the financial year to the selected reporting month.
</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </section>
      </section>
      <section>
        <title>Reporting parameters </title>
        <para>Report parameters make the reports more generic and reusable over time and for different orgunits. These parameters will pop up when generating the report table or running a report based on the report table and the users will select what they want to see in the report. There are three possible report parameters, and you can select to use none, 1, 2 or all 3 parameters.
</para>
        <itemizedlist>
          <listitem>
            <para><emphasis>Reporting month</emphasis></para>
            <para>This paramater will determing which fixed periods that will be fetched for chosen relative periods.
</para>
          </listitem>
          <listitem>
            <para><emphasis>Parent organisation unit</emphasis></para>
            <para>Select the parent of all the orgunit children you want listed in the report. For instance, a selected district will result in all sub-districts being present in the report.

</para>
          </listitem>
          <listitem>
            <para><emphasis>Organisation unit</emphasis></para>
            <para>This triggers the use of this orgunit in the report. No dependent organizational units  will be listed in the report.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Report table limitations</title>
        <para>Due to limitations of the number of columns that a given table can have in the database, the number of cross-tab columns for a report table is limited to the maximum number of columns that your DHIS2 database system supports. Postgresql supports approximately 250 columns per report table. You will therefore need to select fewer than 250 crosstab elements for any given report table.</para>
        <para>Currently, there are restrictions on the use of views that are linked to a given report table. If you create your own database views that link to a report table, the DHIS2 system will not be able to delete the report table, and an error messages will result. You should monitor the list of announcments on the DHIS2 development page for more information on this limitation.</para>
      </section>
    </section>
    <section>
      <title>BIRT reports</title>
      <section>
        <title>Create a report table in DHIS 2</title>
        <para>To create a report table in DHIS 2 is to create so-called report tables in DHIS, found under Reports module, which will serve as the data table for your report. Normally one table per report, but multiple tables for one report is also possible. A report table can be a cross tabulated table on any of the dimensions period/indicator/data element / orgunit, and also in combination, like “BCG &lt; 1 coverage + last 3 months” and “BCG coverage &lt; 1 year+ last month”. This cross-tabulation makes it a lot easier to control the design of the report which is then done with dragging and dropping column headings onto the report. The report table can also have report parameters like reporting month, organisation unit and organisation unit parent (if you are e.g. listing all sub-districts in a given district).</para>
      </section>
      <section>
        <title>Design the report in BIRT</title>
        <para>In order to run a BIRT report, you must  design the report in the stand-alone BIRT designer (based on the Eclipse platform) and access the report table in the DHIS 2 database using a jdbc connection and an sql query (all using the BIRT user interface). When you have connected to the table and selected which columns to use they will be available as fields that you can drag and drop onto your report design. In BIRT you can preview the report at any point, and when you&apos;re done you can save the report as an xml file (.rptdesign).  A step-by-step guide of this process will be detailed in the following sections.</para>
        <section>
          <title>Preparing the JDBC connectors</title>
          <para>JDBC, or Java Data Connectivity, are client-side adapters that provide connectivity between a Java application (DHIS2) and a database system (e.g. Postgresql, MySQL, H2). To connect to the DHIS2 database from BIRT (both when designing and viewing reports) a jdbc connection is needed, and for this you will need an appropriate JDBC driver for your database server (e.g. PostgreSQL or MySQL).
</para>
        </section>
      </section>
      <section>
        <title>Define and run the report in DHIS</title>
        <para>(the very first time you need to configure where the BIRT report viewer is installed, go to Reports→Report→Configure report) In DHIS 2 you can define a report in the Reports module that you link to a report table and provide with a name. Then the report is ready to be generated and displayed, and this can be done in two ways, 1) run report with new data or run report with existing data. This all depends on whether your report table is populated already or not. Most likely you will have to run it with new data and then you are asked to provide values for the report parameters (if defined in the report table) and then the table will be populated in the background and a new window will show the report as soon as it is ready. The new window will actually be generated by the BIRT report viewer, which is a separate web application running on the same tomcat instance.</para>
      </section>
    </section>
  </section>
</chapter>
