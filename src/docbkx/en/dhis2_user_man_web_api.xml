<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" []>
<chapter>
  <title>Web API</title>
  <para>The Web API is a component which makes it possible for external systems  to access and manipulate  data stored in an instance of DHIS 2. More precisely, it provides a   programmatic interface to a wide range of exposed data and service methods for applications such as third-party software clients, web portals and  internal DHIS 2 modules.</para>
  <section>
    <title>Introduction</title>
    <para>The Web API adheres to many of the principles behind the REST architectural style. To mention some few and important ones:</para>
    <orderedlist>
      <listitem>
        <para>The fundamental building blocks are referred to as <emphasis role="italic">resources</emphasis>. A resource can be anything exposed to the Web, from a document to a business process - anything a client might want to interact with. The information aspects of a resource can be retrieved or exchanged through resource <emphasis role="italic">representations</emphasis>. A representation is a view of a resource&apos;s state at any given time. For instance, the <emphasis role="italic">reportTable</emphasis> resource in DHIS represents a tabular report of aggregated data for a certain set of parameters. This resource can be retrieved in a variety of representation formats including HTML, PDF, and MS Excel.</para>
      </listitem>
      <listitem>
        <para>All resources can be uniquely identified by a <emphasis role="italic">URI</emphasis> (also referred to as <emphasis role="italic">URL</emphasis>). All resources have a default representation. You can indicate that you are interested in a specific representation  by supplying an <emphasis role="italic">Accept</emphasis> HTTP header, a file extension or a <emphasis role="italic">format</emphasis> query parameter. So in order to retrieve the PDF representation of a report table you can  supply a <emphasis role="italic">Accept: application/pdf</emphasis> header or append <emphasis role="italic">.pdf</emphasis> or <emphasis role="italic">?format=pdf</emphasis> to your request URL.</para>
      </listitem>
      <listitem>
        <para>Interactions with the API requires correct use of HTTP <emphasis role="italic">methods</emphasis> or <emphasis role="italic">verbs</emphasis>. This implies that for a resource you must issue a  <emphasis role="italic">GET</emphasis> request when you want to retrieve it, <emphasis role="italic">POST</emphasis> request when you want to create one, <emphasis role="italic">PUT</emphasis> when you want to update it and <emphasis role="italic">DELETE</emphasis> when you want to remove it. So if you want to retrieve the default representation of a report table you can send a GET request to e.g. <emphasis role="italic">/reportTable/iu8j/hYgF6t</emphasis>, where the last part is the report table identifier.</para>
      </listitem>
      <listitem>
        <para>Resource representations are <emphasis role="italic">linkable</emphasis>, meaning that representations advertise other resources which are relevant to the current one by embedding links into itself. This feature greatly improves the usability and robustness of the API as we will see later. For instance, you can easily navigate to the indicators which are associated with a report table from the <emphasis role="italic">reportTable</emphasis> resource  through the embedded links using your preferred representation format.</para>
      </listitem>
    </orderedlist>
    <para>While all of this might sound complicated, the Web API is actually very simple to use. We will proceed with a few practical examples in a minute.</para>
  </section>
  <section>
    <title>Authentication</title>
    <para>In order to interoperate with the Web API you will have to authenticate using <emphasis role="italic">Basic authentication</emphasis>. Basic authentication is a technique for clients to send login credentials over HTTP to a web server. Technically speaking, the username is appended with a colon and the password, Base64-encoded, prefixed Basic  and   supplied as the value of the <emphasis role="italic">Authorization</emphasis> HTTP header. More formally that is<code> Authorization: Basic base64encode(username:password)</code> An important note is that this authentication scheme provides no security since the username and password is sent in plain text and can be easily decoded. Using it is  recommended only if the server is using SSL/TLS (HTTPS) to encrypt communication between itself and the client. Most DHIS 2 deployments typically use SSL today - consider it a hard requirement to provide secure interactions with the Web API.</para>
  </section>
  <section>
    <title>Date and period format</title>
    <para>Throughout the Web API we refer to dates and periods. The date format  is:</para>
    <screen>yyyy-MM-dd</screen>
    <para>For instance, if you want to express March 20, 2012 you must use <emphasis role="italic">2012-03-20</emphasis>.</para>
    <para>The period format is described in the following table. </para>
    <table>
      <title>Period format</title>
      <tgroup cols="4">
        <tbody>
          <row>
            <entry>
              <emphasis role="italic">Interval</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Format</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Example</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Description</emphasis>
            </entry>
          </row>
          <row>
            <entry>Day</entry>
            <entry>yyyyMMdd</entry>
            <entry>20040315</entry>
            <entry>March 15 2004</entry>
          </row>
          <row>
            <entry>Week</entry>
            <entry>yyyyWn</entry>
            <entry>2004W10</entry>
            <entry>Week 10 2004</entry>
          </row>
          <row>
            <entry>Month</entry>
            <entry>yyyyMM</entry>
            <entry>200403</entry>
            <entry>March 2004</entry>
          </row>
          <row>
            <entry>Quarter</entry>
            <entry>yyyyQn</entry>
            <entry>2004Q1</entry>
            <entry>January-March 2004</entry>
          </row>
          <row>
            <entry>Six-month</entry>
            <entry>yyyySn</entry>
            <entry>2004S1</entry>
            <entry>Janary-June 2004</entry>
          </row>
          <row>
            <entry>Year</entry>
            <entry>yyyy</entry>
            <entry>2004</entry>
            <entry>2004</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>Example: Sending data values</title>
    <para>A common use-case for system integration is the need to send a set of data values from a third-party system into DHIS. In this example we will use the DHIS 2 demo on <ulink url="http://apps.dhis2.org/demo"/> as basis and we recommend that you follow the provided links with a web browser while reading (log in with <emphasis role="italic">admin</emphasis><emphasis role="italic">/district</emphasis> as username/password). We assume that we have collected case-based data using a simple software client running on mobile phones for the  <emphasis role="italic">Mortality &lt;5 years</emphasis> data set in the community of <emphasis role="italic">Ngelehun CHC</emphasis> (in <emphasis role="italic">Badjia</emphasis> chiedom, <emphasis role="italic">Bo</emphasis> district) for the month of January 2012. We have now aggregated our data into a statistical report and want to send that data to the national DHIS 2 instance.</para>
    <para>The entry point for the Web API running on the demo instance is <ulink url="http://apps.dhis2.org/demo/api"/>. The entry point provides a convenient HTML page with links to all of the available resources in the Web API. The resource which is most appropriate for our purpose of sending data values is the <emphasis role="italic">dataValueSets</emphasis> resource. A data value set represents a set of data values which have a logical relationship, usually from being captured off  the same data entry form. We follow the link to the HTML representation which will take us to <ulink url="http://apps.dhis2.org/demo/api/dataValueSets"/>. The default representation is a HTML page which provides us with  useful instructions on how to interact with this resources. It tells us that we can use the POST verb to send values using a XML format defined by the <emphasis role="italic">http://dhis2.org/schema/dxf/2.0</emphasis> namespace:</para>
    <screen>&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataSet=&quot;dataSetID&quot; 
  completeDate=&quot;date&quot; period=&quot;period&quot; orgUnit=&quot;orgUnitID&quot;&gt;
  &lt;dataValue dataElement=&quot;dataElementID&quot; value=&quot;1&quot;/&gt;
  &lt;dataValue dataElement=&quot;dataElementID&quot; value=&quot;2&quot;/&gt;
  &lt;dataValue dataElement=&quot;dataElementID&quot; value=&quot;3&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
    <para><emphasis role="italic">Note:</emphasis> We have omitted the <emphasis role="italic">categoryOptionCombo</emphasis> attribute as it is optional and not needed for this example. Please refer to the date and period section above for time formats.</para>
    <para>From the example we can see that we need to identify the period,  the data set, the org unit (facility) and the data elements for which to report. The <emphasis role="italic">dataValueSets</emphasis> resource description tells us that the identifier for monthly periods should be on the format <emphasis role="italic">yyyyMM</emphasis> which means that we will use <emphasis role="italic">201201</emphasis> for January 2012.</para>
    <para>To obtain the identifier for the data set we return to the the entry point at <ulink url="http://apps.dhis2.org/demo/api"/> and follow the embedded link pointing at the <emphasis role="italic">dataSets</emphasis> resource located at <ulink url="http://apps.dhis2.org/demo/api/dataSets"/>. From there we find and follow the link to the <emphasis role="italic">Mortality &lt; 5 years</emphasis> data set which leads us to <ulink url="http://apps.dhis2.org/demo/api/dataSets/pBOMPrpg1QX"/>. What we did was effectively to retrieve the HTML representation of our data set of interest, and from it we can easily see the identifier, which is <emphasis role="italic">pBOMPrpg1QX</emphasis>. The resource representation for the <emphasis role="italic">Mortality &lt; 5 years</emphasis> data set conveniently advertises links to the  data elements which are members of it. From here we can follow these links and obtain the identifiers of the data elements. For brevity we will only report on three data  elements: <emphasis role="italic">Measles</emphasis> with id <emphasis role="italic">f7n9E0hX8qk</emphasis>, <emphasis role="italic">Dysentery</emphasis> with id <emphasis role="italic">Ix2HsbDMLea</emphasis> and <emphasis role="italic">Cholera</emphasis> with id <emphasis role="italic">eY5ehpbEsB7</emphasis>.</para>
    <para>What remains is to get hold of the identifier of the facility (org unit). Again the <emphasis role="italic">dataSet</emphasis> representation conveniently provides link to org units which report on it so we search for<emphasis role="italic"> Ngelehun CHC</emphasis> and follow the link to the HTML representation at <ulink url="http://apps.dhis2.org/demo/api/organisationUnits/DiszpKrYNg8"/>, which tells us that the identifier of this org unit is <emphasis role="italic">DiszpKrYNg8</emphasis>.</para>
    <para>From our case-based data we assume that we have 12 cases of measles, 14 cases of dysentery and 16 cases of cholera. We have now gathered enough information to be able to put together the XML data value set message:</para>
    <screen>&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataSet=&quot;pBOMPrpg1QX&quot; 
  completeDate=&quot;2012-02-03&quot; period=&quot;201201&quot; orgUnit=&quot;DiszpKrYNg8&quot;&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; value=&quot;12&quot;/&gt;
  &lt;dataValue dataElement=&quot;Ix2HsbDMLea&quot; value=&quot;14&quot;/&gt;
  &lt;dataValue dataElement=&quot;eY5ehpbEsB7&quot; value=&quot;16&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
    <para>To perform  functional testing we will use the cURL tool (<ulink url="http://curl.haxx.se"/>) which provides an easy way of transferring data using HTTP. First we save the data value set XML content in a file called <emphasis role="italic">datavalueset.xml</emphasis> . From the directory where this file resides we invoke the following from the command line:</para>
    <para><code>curl -d @datavalueset.xml &quot;http://apps.dhis2.org/demo/api/dataValueSets&quot; -H &quot;Content-Type:application/xml&quot; -u admin:district -v</code></para>
    <para>The command will dispatch a request to the demo Web API,  set <emphasis role="italic">application/xml</emphasis> as the content-type and  authenticate using admin/district as username/password.   If all goes well this will return a <emphasis role="italic">200 OK</emphasis> HTTP status code. You can verify that the data has been received by opening the data entry module in DHIS 2 and select the org unit, data set and period used in this example.</para>
    <para>The API follows normal semantics for error handling and HTTP status codes. If you supply an invalid username or password, <emphasis role="italic">401 Unauthorized</emphasis> is returned. If you supply a content-type other than application/xml, <emphasis role="italic">415 Unsupported Media Type</emphasis> is returned. If the XML content is invalid according to the DXF namespace, <emphasis role="italic">400 Bad Request</emphasis> is returned. If you provide an invalid identifier in the XML content, <emphasis role="italic">409 Conflict</emphasis> is returned together with a descriptive message.</para>
    <para>In this example, cURL will authenticate to the server through  Basic authentication using our supplied username and password as credentials through the <emphasis role="italic">-u</emphasis> flag. </para>
    <para>In a real-world scenario, looking up identifiers, constructing and dispatching XML messages would be the task of the client software application. This software would probably interact with the more machine-friendly XML and JSON resource representations and not the human-friendly HTML representations like we  did in this example. Developing creative and robust consumers of the Web API services begins  here.</para>
  </section>
  <section>
    <title>Example: Sending large bulks of data values</title>
    <para>The previous example showed us how to send a set of related data values sharing the same period and organisation unit. This example will show us how to send large bulks of data values which don&apos;t necessarily are logically related.</para>
    <para>Again we will interact with the with <ulink url="http://apps.dhis2.org/demo/api/dataValueSets"/> resource. This time we will not specify the dataSet and completeDate attributes. Also, we will specify the period and orgUnit attributes on the individual data value elements instead of on the outer data value set element. This will enable us to send data values for various periods and org units:</para>
    <screen>&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201201&quot; orgUnit=&quot;DiszpKrYNg8&quot; value=&quot;12&quot;/&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201201&quot; orgUnit=&quot;FNnj3jKGS7i&quot; value=&quot;14&quot;/&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201202&quot; orgUnit=&quot;DiszpKrYNg8&quot; value=&quot;16&quot;/&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201202&quot; orgUnit=&quot;Jkhdsf8sdf4&quot; value=&quot;18&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
    <para>We test by using cURL  to send the data values:</para>
    <para><code>curl -d @datavalueset.xml &quot;http://apps.dhis2.org/demo/api/dataValueSets&quot; -H &quot;Content-Type:application/xml&quot; -u admin:district -v</code></para>
    <para>The data value set resource provides an XML response which is useful when you want to verify the impact your request had. The first time we send the data value set request above the server will respond with the following<emphasis role="italic"> import summary</emphasis>:</para>
    <screen>&lt;importSummary&gt;
  &lt;dataValueCount imported=&quot;2&quot; updated=&quot;1&quot; ignored=&quot;1&quot;/&gt;
  &lt;dataSetComplete&gt;false&lt;/dataSetComplete&gt;
&lt;/importSummary&gt;</screen>
    <para>This message tells us that 3 data values were imported, 1 data value was updated while zero data values were ignored. The single update comes as a result of us sending that data value in the previous example. A data value will be ignored if it references a non-existing data element, period, org unit or data set. In our case this single ignored value was caused by the last data vaue having an invalid reference to org unit. The data set complete element will display the date of which the data value set was completed, or false if no data element attribute was supplied.</para>
    <para>The import process can be customized using a set of import parameters:</para>
    <table>
      <title>Import parameters</title>
      <tgroup cols="3">
        <tbody>
          <row>
            <entry>
              <emphasis role="italic">Parameter</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Values (default first)</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Description</emphasis>
            </entry>
          </row>
          <row>
            <entry>dataElementIdScheme</entry>
            <entry>uid | name | code</entry>
            <entry>Which property on the data element object to reference from the XML attribute</entry>
          </row>
          <row>
            <entry>orgUnitIdScheme</entry>
            <entry>uid | name | code</entry>
            <entry>Which property on the org unit object to reference from the XML attribute</entry>
          </row>
          <row>
            <entry>dryRun</entry>
            <entry>false | true</entry>
            <entry>Whether to save changes on the server or just return the import summary</entry>
          </row>
          <row>
            <entry>importStrategy</entry>
            <entry>new_and_updates | new | updates</entry>
            <entry>Save objects of all, new or update import status on the server</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>All parameters are optional and can be supplied as query parameters in the request URL like this:</para>
    <screen>http://apps.dhis2.org/demo/api/dataValueSets?dataElementIdScheme=code&amp;
  orgUnitIdScheme=name&amp;dryRun=true&amp;importStrategy=new</screen>
    <para>They can also be supplied as XML attributes on the data value set element like below. XML attributes will override query string parameters.</para>
    <screen>&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataElementIdScheme=&quot;code&quot; 
  orgUnitIdScheme=&quot;name&quot; dryRun=&quot;true&quot; importStrategy=&quot;new&quot;&gt;
  ..
&lt;/dataValueSet&gt;</screen>
    <para>Regarding the id schemes, by default the  identifiers used in the XML messages refer to the DHIS stable object identifiers. In certain interoperability situations we might experience that the external system  decides the identifiers of the objects. In that case we can use the <emphasis role="italic">code</emphasis> property of the organisation unit and data element objects to set fixed identifiers dictated by the other system. When importing data values we hence need to reference the code property instead of the uid property, and can do so using the dataElementIScheme and orgUnitIdScheme paramaters.</para>
  </section>
  <section>
    <title>Example: Reading data values</title>
    <para>This section explains how to retrieve data values from the Web API by interacting with the dataValueSets resource. Data values can currently be retrieved in XML format. Since we want to read data we will use the <emphasis role="italic">GET</emphasis> HTTP verb. We will also specify that we are interested in the XML resource representation by including an <emphasis role="italic">Accept</emphasis> HTTP header with our request. The following query parameters are required:</para>
    <table>
      <title>Data value set query parameters</title>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>
              <emphasis role="italic">Parameter</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Description</emphasis>
            </entry>
          </row>
          <row>
            <entry>dataSet</entry>
            <entry>Data set identifier</entry>
          </row>
          <row>
            <entry>period</entry>
            <entry>Period identifier in ISO format</entry>
          </row>
          <row>
            <entry>orgUnit</entry>
            <entry>Organisation unit identifier</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>It is assumed that we have posted data values to DHIS according to the previous section called &quot;Sending data values&quot;. We can now put together our request and send it using cURL:</para>
    <para><code>curl &quot;http://apps.dhis2.org/demo/api/dataValueSets?dataSet=pBOMPrpg1QX</code><code>&amp;period=201201&amp;orgUnit=DiszpKrYNg8&quot; -H &quot;Accept:application/xml&quot; -u admin:district -v </code></para>
    <para>The  response will look something like this:</para>
    <screen>HTTP/1.1 200 OK
Content-Type: application/xml

&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;
&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataSet=&quot;pBOMPrpg1QX&quot;
  completeDate=&quot;2012-01-02&quot; period=&quot;201201&quot; orgUnit=&quot;DiszpKrYNg8&quot;&gt;
&lt;dataValue dataElement=&quot;eY5ehpbEsB7&quot; period=&quot;201201&quot; orgUnit=&quot;DiszpKrYNg8&quot; 
  categoryOptionCombo=&quot;bRowv6yZOF2&quot; value=&quot;10003&quot;/&gt;
&lt;dataValue dataElement=&quot;Ix2HsbDMLea&quot; period=&quot;201201&quot; orgUnit=&quot;DiszpKrYNg8&quot; 
  categoryOptionCombo=&quot;bRowv6yZOF2&quot; value=&quot;10002&quot;/&gt;
&lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201201&quot; orgUnit=&quot;DiszpKrYNg8&quot; 
  categoryOptionCombo=&quot;bRowv6yZOF2&quot; value=&quot;10001&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
    <para>The header tells us that the request was processed successfully and that we are receiving a response in XML format. The XML message looks familiar - it is the data values we sent in the previous section.</para>
  </section>
  <section>
    <title>Example: Writing and reading messages</title>
    <para>DHIS 2 features a mechanism for sending messages for purposes such as user feedback, notifications and general information to  users. Messages are delivered to the DHIS 2 message inbox but can also be sent to the user&apos;s email addresses and mobile phones as SMS. In this example we will see how we can utilize the Web API to send and read messages. We will pretend to be the <emphasis role="italic">DHIS Administrator</emphasis>   user  and  send a message to the  <emphasis role="italic">Mobile</emphasis> user. We will then pretend to be the  mobile user and read our new message.</para>
    <para>The resource we need to interact with when sending and reading messages is the <emphasis role="italic">messageConversations</emphasis> resource. We start by visiting the Web API entry point at <ulink url="http://apps.dhis2.org/demo/api"/> where we find and follow the link to the <emphasis role="italic">messageConversations</emphasis> resource at <ulink url="http://apps.dhis2.org/demo/api/messageConversations"/>. The description tells us that we can use a POST request to create a new message using the following XML format:</para>
    <para><screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;This is the subject&lt;/subject&gt;
  &lt;text&gt;This is the text&lt;/text&gt;
  &lt;users&gt;
    &lt;user id=&quot;user1ID&quot; /&gt;
    &lt;user id=&quot;user2ID&quot; /&gt;
    &lt;user id=&quot;user3ID&quot; /&gt;
  &lt;/users&gt;
&lt;/message&gt;</screen></para>
    <para>Since we want to send a message to our friend the mobile user we need to look up her identifier. We do so by going to the  Web API entry point and follow the link to the <emphasis role="italic">users</emphasis> resource at <ulink url="http://apps.dhis2.org/demo/api/users"/>. We continue by following link to the DHIS Administrator at <ulink url="http://apps.dhis2.org/demo/api/users/PhzytPW3g2J"/> where we learn that her identifier is <emphasis role="italic">PhzytPW3g2J</emphasis>. We are now ready to put our XML message together to form a message where we want to ask the mobile user whether she has reported data for January 2012:</para>
    <screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;Mortality data reporting&lt;/subject&gt;
  &lt;text&gt;Have you reported data for the Mortality data set for January 2012?&lt;/text&gt;
  &lt;users&gt;
    &lt;user id=&quot;PhzytPW3g2J&quot; /&gt;
  &lt;/users&gt;
&lt;/message&gt;</screen>
    <para>To test this we save the XML content into a file called <emphasis role="italic">message.xml</emphasis>. We use cURL to dispatch the message the the DHIS 2 demo instance where we indicate that the content-type is XML and authenticate as the <emphasis role="italic">admin</emphasis> user:</para>
    <para><code>curl -d @message.xml &quot;http://apps.dhis2.org/demo/api/messageConversations&quot; -H &quot;Content-Type:application/xml&quot; -u admin:district -X POST -v</code></para>
    <para>If all is well we receive a <emphasis role="italic">201 Created</emphasis> HTTP status code. Also note that we receive a <emphasis role="italic">Location </emphasis>HTTP header which value  informs us of the URL of the newly  created message conversation resource - this can be used by a consumer to perform further action.</para>
    <para>We will now pretend to be the mobile user and read the message which was just sent by dispatching a GET request to the <emphasis role="italic">messageConversations</emphasis> resource. We supply an <emphasis role="italic">Accept</emphasis> header with <emphasis role="italic">application/xml</emphasis> as the value to indicate that we are interested in the XML resource representation and we authenticate as the <emphasis role="italic">mobile</emphasis> user:</para>
    <para><code>curl &quot;http://apps.dhis2.org/demo/api/messageConversations&quot; -H &quot;Accept:application/xml&quot; -u mobile:district -X GET -v</code></para>
    <para>In response we get the following XML:</para>
    <screen>&lt;messageConversations xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;
  link=&quot;http://apps.dhis2.org/demo/api/messageConversations&quot;&gt;
  &lt;messageConversation name=&quot;Mortality data reporting&quot; id=&quot;ZjHHSjyyeJ2&quot;
    link=&quot;http://apps.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2&quot;/&gt;
  &lt;messageConversation name=&quot;DHIS version 2.7 is deployed&quot; id=&quot;GDBqVfkmnp2&quot;
    link=&quot;http://apps.dhis2.org/demo/api/messageConversations/GDBqVfkmnp2&quot;/&gt;
&lt;/messageConversations&gt;</screen>
    <para>From the response we are able to read the identifier of the newly sent message which is <emphasis role="italic">ZjHHSjyyeJ2</emphasis>. Note that the link to the specific resource is embedded and available for  consumers to use. From the description at <ulink url="http://apps.dhis2.org/demo/api/messageConversations"/> we learned that we can reply directly to an existing message conversation once we know the URL by including the message text as the  request payload (body). We are now able to construct a URL for sending our reply:</para>
    <para><code>curl -d &quot;Yes the Mortality data set has been reported&quot; &quot;http://apps.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2&quot; -H &quot;Content-Type:text/plain&quot; -u mobile:district -X POST -v</code> </para>
    <para>If all went according to plan you will receive a <emphasis role="italic">200 OK</emphasis> status code.</para>
  </section>
  <section>
    <title>Example: Embedding reports in web pages</title>
    <para>In this example we will see how we can build a simple web page  where dynamic data such as tabular reports is pulled from the DHIS Web API. A full example on how this can done is available at <ulink url="http://apps.dhis2.org/portal"/>.</para>
    <para>The Web API contains several resources which are useful for data analysis: <emphasis role="italic">report</emphasis>, <emphasis role="italic">reportTable</emphasis>, <emphasis role="italic">chart</emphasis>, <emphasis role="italic">map</emphasis> and <emphasis role="italic">document</emphasis>. Dispatching  GET requests to the mentioned resources will return meta-data information such as name and the date it was last updated. All these resources have an associated <emphasis role="italic">data</emphasis> resource which produces a data view of  related aggregated data - also  known as  reports, charts and maps. You can follow the links or simply append <emphasis role="italic">/data</emphasis> to the URL to arrive at it. This information can be represented in a variety of formats including HTML, PDF, Excel, PNG and Jasper, as we will see in the next section.</para>
    <para>We  start as usual at the Web API entrypoint at <ulink url="http://apps.dhis2.org/demo/api"/>. We look for a relevant  report table by following the <emphasis role="italic">reportTables</emphasis> link to <ulink url="http://apps.dhis2.org/demo/api/reportTables"/>. We assume that we are interested in the &quot;District Maternal Health&quot; report and follow the link to <ulink url="http://apps.dhis2.org/demo/api/reportTables/xIWpSo5jjT1"/>. This resource provides meta-data information about the report table. From here we can follow the link to the default data view of aggregated data, which leads us to  <ulink url="http://apps.dhis2.org/demo/api/reportTables/xIWpSo5jjT1/data"/>. As we can see we are provided with a  report table in HTML format, which is the default representation format for report tables.</para>
    <para>As stated in the introduction there are three ways of indicating which resource representation format you prefer for the response. The most suitable alternative for direct use in web pages is to append a file suffix to the URL. We assume that we are interested in the PDF representation and indicate that by appending <emphasis role="italic">.pdf</emphasis> to our URL: <ulink url="http://apps.dhis2.org/demo/api/reportTables/xIWpSo5jjT1/data.pdf"/>. Go ahead and try out all valid extensions for this resource which are <emphasis role="italic">.html</emphasis>, <emphasis role="italic">.pdf</emphasis>, <emphasis role="italic">.xls</emphasis> and <emphasis role="italic">.csv</emphasis>.</para>
    <para>The report table can be parameterized with an organisation unit and a period by supplying a <emphasis role="italic">ou</emphasis> and <emphasis role="italic">pe</emphasis> query parameter accompanied with an organisation unit  identifier and period string  in the URL. If not provided the Web API will use the top-most organisation unit in the hierarchy and the last  period for the report table content. The organisation unit identifier can be looked up by going to the Web API entrypoint and follow the link to the <emphasis role="italic">organisationUnits</emphasis> resouce. For our example we will use <emphasis role="italic">Bo</emphasis> district whith identifier <emphasis role="italic">O6uvpzGd5pu</emphasis> as the organisation unit: <ulink url="http://apps.dhis2.org/demo/api/reportTables/xIWpSo5jjT1/data?ou=O6uvpzGd5pu"/>. From the HTML representation we can  see that the report now contains data for <emphasis role="italic">Bo</emphasis> district. These URLs can  simply  be used in links embedded in the web page like this:</para>
    <screen>&lt;a href=&quot;http://apps.dhis2.org/demo/api/reportTables/xIWpSo5jjT1/data.pdf?
ou=O6uvpzGd5pu&quot;&gt;Maternal Health Bo District 2012&lt;/a&gt;</screen>
    <para>There are many ways to authenticate over the Web and each method has its advantages and disadvantages. For this example we will use an  approach where we emulate a  login from the web-based login form. To help us we will use the <emphasis role="italic">jQuery</emphasis>  javascript library. This javascript code should be embedded in the <emphasis role="italic">head</emphasis> section of the Web page:</para>
    <screen>jQuery(document).ready(function() {
  $.post( &quot;http://apps.dhis2.org/demo/dhis-web-commons-security/login.action&quot;, {
      j_username: &quot;admin&quot;, j_password: &quot;district&quot; 
    }
  );
});</screen>
    <para>In this code block we ask jQuery to send a POST request to the standard authentication point with two name-value pairs containing the username and password information. We assume that the user has the necessary authorities to view reports in the DHIS 2 Web API. If  authentication was successful the server will send a HTTP cookie in the response with a session identifier. This will make sure that the current user is authorized to view reports for up to 60 minutes.</para>
    <para>Caveat:  The username and password will be present in the web page in plain text. Make sure  you create a dedicated user in DHIS 2 for this purpose provided only with the minimum authorities required. For a more robust way of exposing resources without requiring authentication see the the section on reverse proxy setup in the installation chapter.</para>
    <para>For a full example visit <ulink url="http://apps.dhis2.org/portal"/> and view the page source in a browser. Note that the example web page is hosted within the same domain (apps.dhis2.org) as the demo DHIS 2 instance. This is done to avoid issues related to the &quot;same origin policy&quot;, a concept which prevents scripts hosted on one domain to access resources running on another. While one can circumvent this through techniques such as <emphasis role="italic">CORS</emphasis>, there are none which have wide browser support at the moment. Therefore we recommend hosting web pages and portals on the same domain. Techniques using reverse proxies described in the &quot;installation&quot; chapter can be useful in this regard. Finally we provide some sample URLs pointing to various data resources for your inspiration:</para>
    <itemizedlist>
      <listitem>
        <para><ulink url="http://apps.dhis2.org/demo/api/maps/JlXSUIcLsmd/data"/></para>
      </listitem>
      <listitem>
        <para><ulink url="http://apps.dhis2.org/demo/api/maps/data?in=JIVMtpjVZqJ&amp;ou=O6uvpzGd5pu"/></para>
      </listitem>
      <listitem>
        <para><ulink url="http://apps.dhis2.org/demo/api/reports/Cb2BcgxBUPz/data"/></para>
      </listitem>
      <listitem>
        <para><ulink url="http://apps.dhis2.org/demo/api/charts/nwqNUFG9Vky/data"/></para>
      </listitem>
      <listitem>
        <para><ulink url="http://apps.dhis2.org/demo/api/charts/data?in=JIVMtpjVZqJ&amp;ou=O6uvpzGd5pu"/></para>
      </listitem>
      <listitem>
        <para><ulink url="http://apps.dhis2.org/demo/api/charts/data?in=JIVMtpjVZqJ&amp;ou=O6uvpzGd5pu&amp;periods=true"/></para>
      </listitem>
      <listitem>
        <para><ulink url="http://apps.dhis2.org/demo/api/documents/MfHNQx51HT9/data"/></para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Example: Embedding charts with the Visualizer Plugin</title>
    <para>In this example we will see how we can embed good-looking Ext JS charts (<ulink url="http://www.sencha.com/products/extjs"/>) with data served from a DHIS back-end into a Web page. To accomplish this we will use the DHIS Visualizer plugin. The plugin is written in Javascript and depends on the Ext JS library only. A complete working example can be found at <ulink url="http://apps.dhis2.org/portal/plugin.html"/>. Open the page in a web browser and view the source to see how it is set up.</para>
    <para>We start by including three required Javascript files in the header section of the HTML document. The first file is the  Ext JS Javascript library (we use  the Google content delivery network in this case). The third file is the Visualizer plugin. Make sure the path is pointing to your DHIS server installation.</para>
    <screen>&lt;script type=&quot;text/javascript&quot;
  src=&quot;http://extjs-public.googlecode.com/svn/tags/extjs-4.0.7/release/ext-all.js&quot;&gt;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;
  src=&quot;http://apps.dhis2.org/demo/dhis-web-visualizer/app/plugin/plugin.js&quot;&gt;
&lt;/script&gt;</screen>
    <para>To authenticate with the DHIS server we use the same approach as in the previous section. In the header of the HTML document we include the following Javascript inside a script element. The <emphasis role="italic">setLinks</emphasis> method will be implemented later. Make sure the <emphasis role="italic">base</emphasis> variabel is pointing to your DHIS installation.</para>
    <screen>var base = &apos;http://apps.dhis2.org/demo/&apos;;

Ext.onReady( function() {
  Ext.Ajax.request({ 
    url: base + &quot;dhis-web-commons-security/login.action&quot;,
    method: &apos;POST&apos;,
    params: { j_username: &quot;admin&quot;, j_password: &quot;district&quot; },
    success: setLinks
  });
});</screen>
    <para>Now let us have a look at the various options for the Visualizer plugin. If you want to refer to pre-defined charts already made inside DHIS you should use the <emphasis role="italic">uid</emphasis> parameter. If you want create dynamic charts you shoud include the indicators and/or dataelements parameter and omit the uid parameter. Asterisk (*) indicates that a parameter is required only when the uid  parameter is not used.</para>
    <table>
      <title>Visualizer plugin configuration</title>
      <tgroup cols="5">
        <tbody>
          <row>
            <entry>
              <emphasis role="italic">Param</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Type</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Required</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Options (default first)</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Description</emphasis>
            </entry>
          </row>
          <row>
            <entry>uid</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry/>
            <entry>Identifier of a pre-defined chart in DHIS</entry>
          </row>
          <row>
            <entry>type</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry>column | stackedcolumn | bar | stackedbar | line | area | pie</entry>
            <entry>Chart type</entry>
          </row>
          <row>
            <entry>indicators</entry>
            <entry>[integer]</entry>
            <entry>Yes*</entry>
            <entry/>
            <entry>Identifiers of indicators to include in chart</entry>
          </row>
          <row>
            <entry>dataelements</entry>
            <entry>[integer]</entry>
            <entry>Yes*</entry>
            <entry/>
            <entry>Identifiers of data elements to include in chart</entry>
          </row>
          <row>
            <entry>periods</entry>
            <entry>[string]</entry>
            <entry>No</entry>
            <entry>last12Months | lastMonth | lastQuarter | last4Quarters | lastSixMonth | last2SixMonths | thisYear | last5Years</entry>
            <entry>Names of relative periods to include in chart</entry>
          </row>
          <row>
            <entry>organisationunits</entry>
            <entry>[integer]</entry>
            <entry>Yes*</entry>
            <entry/>
            <entry>Identifiers of organisation units to include in chart</entry>
          </row>
          <row>
            <entry>series</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry>data | period | organisationunit</entry>
            <entry>Dimension to use as chart series</entry>
          </row>
          <row>
            <entry>category</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry>data | period | organisationunit</entry>
            <entry>Dimension to use as chart category</entry>
          </row>
          <row>
            <entry>filter</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry>data | period | organisationunit</entry>
            <entry>Dimension to use as chart filter</entry>
          </row>
          <row>
            <entry>orgUnitIsParent</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether the chart should display the children of the selected org units</entry>
          </row>
          <row>
            <entry>skipAnimation</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether the initial chart animation should be displayed</entry>
          </row>
          <row>
            <entry>showData</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether to display data on the chart</entry>
          </row>
          <row>
            <entry>trendLine</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether to display trend line(s) on the chart</entry>
          </row>
          <row>
            <entry>hideLegend</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether to hide the chart legend</entry>
          </row>
          <row>
            <entry>hideSubtitle</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether to hide the chart title</entry>
          </row>
          <row>
            <entry>userOrganisationUnit</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether the user of the current user should be included in the chart</entry>
          </row>
          <row>
            <entry>userOrganisationUnitChildren</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether the child org units of the current user should be included in the chart</entry>
          </row>
          <row>
            <entry>targetLineValue</entry>
            <entry>double</entry>
            <entry>No</entry>
            <entry/>
            <entry>Value of target line to display on the chart</entry>
          </row>
          <row>
            <entry>targetLineLabel</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry/>
            <entry>Label for target line</entry>
          </row>
          <row>
            <entry>baseLineValue</entry>
            <entry>double</entry>
            <entry>No</entry>
            <entry/>
            <entry>Value of baseline to display on the chart</entry>
          </row>
          <row>
            <entry>baseLineLabel</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry/>
            <entry>Label for baseline</entry>
          </row>
          <row>
            <entry>domainAxisLabel</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry/>
            <entry>Label for the domain axis</entry>
          </row>
          <row>
            <entry>rangeAxisLabel</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry/>
            <entry>Label for the range axis</entry>
          </row>
          <row>
            <entry>el</entry>
            <entry>string</entry>
            <entry>Yes</entry>
            <entry/>
            <entry>Identifier of HTML element to render the chart in</entry>
          </row>
          <row>
            <entry>url</entry>
            <entry>string</entry>
            <entry>Yes</entry>
            <entry/>
            <entry>Base URL of the DHIS server</entry>
          </row>
          <row>
            <entry>width</entry>
            <entry>integer</entry>
            <entry>No</entry>
            <entry/>
            <entry>Width of chart</entry>
          </row>
          <row>
            <entry>height</entry>
            <entry>integer</entry>
            <entry>No</entry>
            <entry/>
            <entry>Height of chart</entry>
          </row>
          <row>
            <entry>legendPosition</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry>top | right | bottom | left</entry>
            <entry>Position of chart legend</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>We continue by including two pre-defined charts and to dynamic charts to our HTML document. You can browse the list of available charts using the Web API here: <ulink url="http://apps.dhis2.org/demo/api/charts"/>.</para>
    <screen>function setLinks() {
  DHIS.getChart({ uid: &apos;R0DVGvXDUNP&apos;, el: &apos;chartA1&apos;, url: base });

  DHIS.getChart({ uid: &apos;X0CPnV6uLjR&apos;, el: &apos;chartA2&apos;, url: base });


  DHIS.getChart({ el: &apos;chartB1&apos;, url: base,
    type: &apos;bar&apos;,
    indicators: [&apos;FnYCr2EAzWS&apos;,&apos;eTDtyyaSA7f&apos;,&apos;tUIlpyeeX9N&apos;],
    periods: &apos;last12Months&apos;,
    organisationunits: [&apos;ImspTQPwCqd&apos;]
  });

  DHIS.getChart({ el: &apos;chartB2&apos;, url: base,
    type: &apos;column&apos;,
    indicators: [&apos;Uvn6LCg7dVU&apos;,&apos;sB79w2hiLp8&apos;],
    periods: &apos;thisYear&apos;,
    organisationunits: [&apos;O6uvpzGd5pu&apos;,&apos;fdc6uOvgoji&apos;,&apos;lc3eMKXaEfw&apos;,&apos;jmIPBj66vD6&apos;],
    series: &apos;data&apos;,
    category: &apos;organisationunit&apos;,
    filter: &apos;period&apos;
  });
};</screen>
    <para>Finally we include some <emphasis role="italic">div</emphasis> elements in the body section of the HTML document with the identifiers referred to in the plugin Javascript.</para>
    <screen>&lt;div id=&quot;chartA1&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chartA2&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;

&lt;div id=&quot;chartB1&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chartB2&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;</screen>
    <para>To see a complete working example please visit <ulink url="http://apps.dhis2.org/portal/plugin.html"/>.</para>
  </section>
</chapter>
