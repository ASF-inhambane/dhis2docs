<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"[]>
<chapter>
  <title>Web API</title>
  <para>The Web API is a component which makes it possible for external systems  to access and manipulate  data stored in an instance of DHIS 2. More precisely, it provides a   programmatic interface to a wide range of exposed data and service methods for applications such as third-party software clients, web portals and  internal DHIS 2 modules.</para>
  <section>
    <title>Introduction</title>
    <para>The Web API adheres to many of the principles behind the REST architectural style. To mention some few and important ones:</para>
    <orderedlist>
      <listitem>
        <para>The fundamental building blocks are referred to as <emphasis role="italic">resources</emphasis>. A resource can be anything exposed to the Web, from a document to a business process - anything a client might want to interact with. The information aspects of a resource can be retrieved or exchanged through resource <emphasis role="italic">representations</emphasis>. A representation is a view of a resource&apos;s state at any given time. For instance, the <emphasis role="italic">reportTable</emphasis> resource in DHIS represents a tabular report of aggregated data for a certain set of parameters. This resource can be retrieved in a variety of representation formats including HTML, PDF, and MS Excel.</para>
      </listitem>
      <listitem>
        <para>All resources can be uniquely identified by a <emphasis role="italic">URI</emphasis> (also referred to as <emphasis role="italic">URL</emphasis>). All resources have a default representation. You can indicate that you are interested in a specific representation  by supplying an <emphasis role="italic">Accept</emphasis> HTTP header, a file extension or a <emphasis role="italic">format</emphasis> query parameter. So in order to retrieve the PDF representation of a report table you can  supply a <emphasis role="italic">Accept: application/pdf</emphasis> header or append <emphasis role="italic">.pdf</emphasis> or <emphasis role="italic">?format=pdf</emphasis> to your request URL.</para>
      </listitem>
      <listitem>
        <para>Interactions with the API requires correct use of HTTP <emphasis role="italic">methods</emphasis> or <emphasis role="italic">verbs</emphasis>. This implies that for a resource you must issue a  <emphasis role="italic">GET</emphasis> request when you want to retrieve it, <emphasis role="italic">POST</emphasis> request when you want to create one, <emphasis role="italic">PUT</emphasis> when you want to update it and <emphasis role="italic">DELETE</emphasis> when you want to remove it. So if you want to retrieve the default representation of a report table you can send a GET request to e.g. <emphasis role="italic">/reportTable/iu8j/hYgF6t</emphasis>, where the last part is the report table identifier.</para>
      </listitem>
      <listitem>
        <para>Resource representations are <emphasis role="italic">linkable</emphasis>, meaning that representations advertise other resources which are relevant to the current one by embedding links into itself. This feature greatly improves the usability and robustness of the API as we will see later. For instance, you can easily navigate to the indicators which are associated with a report table from the <emphasis role="italic">reportTable</emphasis> resource  through the embedded links using your preferred representation format.</para>
      </listitem>
    </orderedlist>
    <para>While all of this might sound complicated, the Web API is actually very simple to use. We will proceed with a few practical examples in a minute.</para>
  </section>
  <section>
    <title>Authentication</title>
    <para>In order to interoperate with the Web API you will have to authenticate using <emphasis role="italic">Basic authentication</emphasis>. Basic authentication is a technique for clients to send login credentials over HTTP to a web server. Technically speaking, the username is appended with a colon and the password, Base64-encoded, prefixed Basic  and   supplied as the value of the <emphasis role="italic">Authorization</emphasis> HTTP header. More formally that is<code> Authorization: Basic base64encode(username:password)</code> An important note is that this authentication scheme provides no security since the username and password is sent in plain text and can be easily decoded. Using it is  recommended only if the server is using SSL/TLS (HTTPS) to encrypt communication between itself and the client. Most DHIS 2 deployments typically use SSL today - consider it a hard requirement to provide secure interactions with the Web API.</para>
    <para>If you are building a form-based web application and want to authenticate using a web form
      you can have the form send a POST request to the login endpoint in DHIS which is <emphasis
        role="italic">/dhis-web-commons-security/login.action?authOnly=true</emphasis> . Two request
      parameters, <emphasis role="italic">j_username</emphasis> and <emphasis role="italic"
        >j_password</emphasis>, containing the username and password in clear-text respectively, are
      expected. The browser will then receive a cookie which will be used for authentication for
      subsequent requests. The purpose of the <emphasis role="italic">authOnly</emphasis> parameter
      is to avoid a time-consuming redirect to the home page of the user.</para>
    <para>You can verify and get information about the currently authenticated user by making a GET
      request to the following URL:</para>
    <screen>/api/currentUser</screen>
  </section>
  <section>
    <title>Date and period format</title>
    <para>Throughout the Web API we refer to dates and periods. The date format  is:</para>
    <screen>yyyy-MM-dd</screen>
    <para>For instance, if you want to express March 20, 2012 you must use <emphasis role="italic">2012-03-20</emphasis>.</para>
    <para>The period format is described in the following table. </para>
    <table>
      <title>Period format</title>
      <tgroup cols="4">
        <thead>
          <row>
            <entry>
              <emphasis role="italic">Interval</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Format</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Example</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Description</emphasis>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Day</entry>
            <entry>yyyyMMdd</entry>
            <entry>20040315</entry>
            <entry>March 15 2004</entry>
          </row>
          <row>
            <entry>Week</entry>
            <entry>yyyyWn</entry>
            <entry>2004W10</entry>
            <entry>Week 10 2004</entry>
          </row>
          <row>
            <entry>Month</entry>
            <entry>yyyyMM</entry>
            <entry>200403</entry>
            <entry>March 2004</entry>
          </row>
          <row>
            <entry>Quarter</entry>
            <entry>yyyyQn</entry>
            <entry>2004Q1</entry>
            <entry>January-March 2004</entry>
          </row>
          <row>
            <entry>Six-month</entry>
            <entry>yyyySn</entry>
            <entry>2004S1</entry>
            <entry>Janary-June 2004</entry>
          </row>
          <row>
            <entry>Year</entry>
            <entry>yyyy</entry>
            <entry>2004</entry>
            <entry>2004</entry>
          </row>
          <row>
            <entry>Financial Year April</entry>
            <entry>yyyyApril</entry>
            <entry>2004April</entry>
            <entry>Apr 2004-Mar 2005</entry>
          </row>
          <row>
            <entry>Financial Year July</entry>
            <entry>yyyyJuly</entry>
            <entry>2004July</entry>
            <entry>July 2004-June 2005</entry>
          </row>
          <row>
            <entry>Financial Year Oct</entry>
            <entry>yyyyOct</entry>
            <entry>2004Oct</entry>
            <entry>Oct 2004-Sep 2005</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>In some parts of the API, like for the analytics resource, you can utilize relative
      periods in addition to fixed periods (defined above). The relative periods are relative to the
      current date, and allows e.g. for creating dynamic reports. The available relative period
      values are:</para>
    <screen>LAST_MONTH, LAST_BIMONTH, LAST_QUARTER, LAST_SIX_MONTH, MONTHS_THIS_YEAR, QUARTERS_THIS_YEAR,
THIS_YEAR, MONTHS_LAST_YEAR, QUARTERS_LAST_YEAR, LAST_YEAR, LAST_5_YEARS, LAST_12_MONTHS,
LAST_3_MONTHS, LAST_6_BIMONTHS, LAST_4_QUARTERS, LAST_2_SIXMONTHS, THIS_FINANCIAL_YEAR,
LAST_FINANCIAL_YEAR, LAST_5_FINANCIAL_YEARS, LAST_WEEK, LAST_4_WEEKS, LAST_12_WEEKS, LAST_52_WEEKS</screen>
  </section>
  <section>
    <title>Browsing the Web API</title>
    <para>The entry point for browsing the Web API is <emphasis role="italic">/api/resources</emphasis>. This resource provide links to all available resources. Four
      resource representation formats are consistently available for all resources: HTML, XML, JSON
      and JSONP. Some resources will have other formats available, like MS Excel, PDF, CSV and PNG.
      To explore the API from a web browser, navigate to the <emphasis role="italic">/api/resources</emphasis> entry point and follow the links to your desired resource, for
      instance <emphasis role="italic">/api/resources/dataElements</emphasis>. For all resources
      which return a list of elements certain query parameters can be used to modify the
      response:</para>
    <para>
      <table frame="all">
        <title>Query parameters</title>
        <tgroup cols="4">
          <colspec colname="c1" colnum="1" colwidth="1.0*"/>
          <colspec colname="c2" colnum="2" colwidth="1.0*"/>
          <colspec colname="c3" colnum="3" colwidth="1.0*"/>
          <colspec colname="c4" colnum="4" colwidth="1.0*"/>
          <thead>
            <row>
              <entry>Param</entry>
              <entry>Option values</entry>
              <entry>Default option</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>viewClass</entry>
              <entry>basic | export | detailed </entry>
              <entry>basic</entry>
              <entry>Defines how much information to display for each element.</entry>
            </row>
            <row>
              <entry>links</entry>
              <entry>true | false</entry>
              <entry>true</entry>
              <entry>Indicates whether to include links to relevant elements.</entry>
            </row>
            <row>
              <entry>paging</entry>
              <entry>true | false</entry>
              <entry>true</entry>
              <entry>Indicates whether to return lists of elements in pages.</entry>
            </row>
            <row>
              <entry>page</entry>
              <entry>number</entry>
              <entry>1</entry>
              <entry>Defines which page number to return.</entry>
            </row>
            <row>
              <entry>pageSize</entry>
              <entry>number</entry>
              <entry>50</entry>
              <entry>Defines the number of elements to return for each page.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
    <para>An example of how these parameters can be used to get a full list of data element groups
      in XML response format is:</para>
    <screen>/api/dataElementGroups.xml?viewClass=detailed&amp;links=false&amp;paging=false</screen>
    <para>You can query for elements on the name property instead of returning full list of elements
      using the <emphasis role="italic">query</emphasis> path variable. In this example we query for
      all data elements with the word "anaemia" in the name:</para>
    <screen>/api/dataElements/query/anaemia</screen>
    <para>You can search for elements through the id, name and code property using the <emphasis role="italic">search</emphasis> path variable. In this example we search for a data element
      with the word "DE_34" as id, name or
      code:<screen>/api/dataElements/search/DE_34</screen></para>
  </section>
  <section>
    <title>Working with the meta-data API</title>
    <para>The meta-data resource can be accessed at <emphasis role="italic">/api/metaData</emphasis>. This resource lets you read and write the full set of meta-data.
      This section will give a basic introduction to working with this API. For specific
      synchronization issues, please see the integration chapter.</para>
    <para>By default, interacting with<emphasis role="italic"> /api/metaData</emphasis> using the
      GET HTTP method will give you all meta-data rendered as XML. You can also be more specific
      about the meta-data elements you are interested in.</para>
    <para>
      <table>
        <title>Available Content-Types</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                <emphasis role="italic">Content-Type</emphasis>
              </entry>
              <entry>
                <emphasis role="italic">Description</emphasis>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>application/xml</entry>
              <entry>Returns the meta-data in XML representation</entry>
            </row>
            <row>
              <entry>application/json</entry>
              <entry>Returns the meta-data in JSON representation</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
    <para>The following query parameters are available for customizing your request.</para>
    <para>
    <table>
        <title>Available Query Filters</title>
        <tgroup cols="5">
          <thead>
            <row>
              <entry>
                <emphasis role="italic">Param</emphasis>
              </entry>
              <entry>
                <emphasis role="italic">Type</emphasis>
              </entry>
              <entry>
                <emphasis role="italic">Required</emphasis>
              </entry>
              <entry>
                <emphasis role="italic">Options (default first)</emphasis>
              </entry>
              <entry>
                <emphasis role="italic">Description</emphasis>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>assumeTrue</entry>
              <entry>boolean</entry>
              <entry>false</entry>
              <entry>true | false</entry>
              <entry>Indicates whether to get all resources or no resources by default.</entry>
            </row>
            <row>
              <entry>{resources}</entry>
              <entry>boolean</entry>
              <entry>false</entry>
              <entry>true | false (default depends on assumeTrue)</entry>
              <entry>See <emphasis role="italic">/api</emphasis> for available resources. Indicates
                which resources to include in the response.</entry>
            </row>
            <row>
              <entry>lastUpdated</entry>
              <entry>date</entry>
              <entry>false</entry>
              <entry>Several formats are available: yyyy, yyyy-MM, yyyy-MM-dd, yyyyMM,
                yyyyMMdd</entry>
              <entry>Filters the meta-data based on the lastUpdated field.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
   </para>
    <para>
      <emphasis role="bold">Example: Get a filtered set of meta-data that was updated since August 1
        2012</emphasis>
    </para>
    <para>As described in the last section, there is a number of options you can apply to <emphasis
        role="italic">/api/metaData</emphasis> to give you a filtered view. The use-case we will be
      looking into here is where you want a nightly job that synchronizes organisation units. We
      will be using <emphasis role="italic">cURL</emphasis> as the HTTP
      client.<screen>curl -H &quot;Accept: application/xml&quot; -u admin:district "http://apps.dhis2.org/demo/api/metaData?assumeTrue=false&amp;organisationUnits=true&amp;lastUpdated=2012-08-01"</screen></para>
    <para><emphasis role="bold">Example: Get meta-data that was updated since February
        2012</emphasis></para>
    <para>This example will just the default <emphasis role="italic">assumeTrue</emphasis> setting,
      along with getting the last updates from February 2012. This means that every single type that
      has been updated will be
      retrieved.<screen>curl -H &quot;Accept: application/xml&quot; -u admin:district "http://apps.dhis2.org/demo/api/metaData?lastUpdated=2012-02"</screen></para>
    <para><emphasis role="bold">Example: Create meta-data</emphasis></para>
    <para>The meta-data resource can also be used to create or update meta-data by using the POST
      HTTP method. The meta-data content can be both XML and JSON, using "application/xml" and
      "application/json" content type respectively. The request payload content will be accepted in
      several formats, including plain text, zipped and gzipped. POSTing a meta-data payload can be
      done for example like this, where metaData.xml is a file in the same directory with the
      meta-data content:</para>
    <screen>curl -H "Content-Type: application/xml" -u admin:district -d @metaData.xml "http://apps.dhis2.org/demo/api/metaData" -X POST -v</screen>
    <para>The import will happen in a asyncronous process which implies that the response will
      return as soon as the process is started. The response status code to be expected is 204 No
      Content.</para>
  </section>
  <section>
    <title>Sending data values</title>
    <para>A common use-case for system integration is the need to send a set of data values from a
      third-party system into DHIS. In this example we will use the DHIS 2 demo on <ulink url="http://apps.dhis2.org/demo"/> as basis and we recommend that you follow the provided
      links with a web browser while reading (log in with <emphasis role="italic">admin</emphasis><emphasis role="italic">/district</emphasis> as username/password). We
      assume that we have collected case-based data using a simple software client running on mobile
      phones for the <emphasis role="italic">Mortality &lt;5 years</emphasis> data set in the
      community of <emphasis role="italic">Ngelehun CHC</emphasis> (in <emphasis role="italic">Badjia</emphasis> chiefdom, <emphasis role="italic">Bo</emphasis> district) for the month
      of January 2012. We have now aggregated our data into a statistical report and want to send
      that data to the national DHIS 2 instance.</para>
    <para>The entry point for the Web API running on the demo instance is <ulink url="http://apps.dhis2.org/demo/api"/>. The entry point provides a convenient HTML page with links to all of the available resources in the Web API. The resource which is most appropriate for our purpose of sending data values is the <emphasis role="italic">dataValueSets</emphasis> resource. A data value set represents a set of data values which have a logical relationship, usually from being captured off  the same data entry form. We follow the link to the HTML representation which will take us to <ulink url="http://apps.dhis2.org/demo/api/dataValueSets"/>. The default representation is a HTML page which provides us with  useful instructions on how to interact with this resources. It tells us that we can use the POST verb to send values using a XML format defined by the <emphasis role="italic">http://dhis2.org/schema/dxf/2.0</emphasis> namespace:</para>
    <screen>&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataSet=&quot;dataSetID&quot;
  completeDate=&quot;date&quot; period=&quot;period&quot; orgUnit=&quot;orgUnitID&quot;&gt;
  &lt;dataValue dataElement=&quot;dataElementID&quot; value=&quot;1&quot;/&gt;
  &lt;dataValue dataElement=&quot;dataElementID&quot; value=&quot;2&quot;/&gt;
  &lt;dataValue dataElement=&quot;dataElementID&quot; value=&quot;3&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
    <para><emphasis role="italic">Note:</emphasis> We have omitted the <emphasis role="italic">categoryOptionCombo</emphasis> attribute as it is optional and not needed for this example. Please refer to the date and period section above for time formats.</para>
    <para>From the example we can see that we need to identify the period,  the data set, the org unit (facility) and the data elements for which to report. The <emphasis role="italic">dataValueSets</emphasis> resource description tells us that the identifier for monthly periods should be on the format <emphasis role="italic">yyyyMM</emphasis> which means that we will use <emphasis role="italic">201201</emphasis> for January 2012.</para>
    <para>To obtain the identifier for the data set we return to the entry point at <ulink url="http://apps.dhis2.org/demo/api"/> and follow the embedded link pointing at the
        <emphasis role="italic">dataSets</emphasis> resource located at <ulink url="http://apps.dhis2.org/demo/api/dataSets"/>. From there we find and follow the link to
      the <emphasis role="italic">Mortality &lt; 5 years</emphasis> data set which leads us to
        <ulink url="http://apps.dhis2.org/demo/api/dataSets/pBOMPrpg1QX"/>. What we did was
      effectively to retrieve the HTML representation of our data set of interest, and from it we
      can easily see the identifier, which is <emphasis role="italic">pBOMPrpg1QX</emphasis>. The
      resource representation for the <emphasis role="italic">Mortality &lt; 5 years</emphasis> data
      set conveniently advertises links to the data elements which are members of it. From here we
      can follow these links and obtain the identifiers of the data elements. For brevity we will
      only report on three data elements: <emphasis role="italic">Measles</emphasis> with id
        <emphasis role="italic">f7n9E0hX8qk</emphasis>, <emphasis role="italic">Dysentery</emphasis>
      with id <emphasis role="italic">Ix2HsbDMLea</emphasis> and <emphasis role="italic">Cholera</emphasis> with id <emphasis role="italic">eY5ehpbEsB7</emphasis>.</para>
    <para>What remains is to get hold of the identifier of the facility (org unit). Again the <emphasis role="italic">dataSet</emphasis> representation conveniently provides link to org units which report on it so we search for<emphasis role="italic"> Ngelehun CHC</emphasis> and follow the link to the HTML representation at <ulink url="http://apps.dhis2.org/demo/api/organisationUnits/DiszpKrYNg8"/>, which tells us that the identifier of this org unit is <emphasis role="italic">DiszpKrYNg8</emphasis>.</para>
    <para>From our case-based data we assume that we have 12 cases of measles, 14 cases of dysentery and 16 cases of cholera. We have now gathered enough information to be able to put together the XML data value set message:</para>
    <screen>&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataSet=&quot;pBOMPrpg1QX&quot;
  completeDate=&quot;2012-02-03&quot; period=&quot;201201&quot; orgUnit=&quot;DiszpKrYNg8&quot;&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; value=&quot;12&quot;/&gt;
  &lt;dataValue dataElement=&quot;Ix2HsbDMLea&quot; value=&quot;14&quot;/&gt;
  &lt;dataValue dataElement=&quot;eY5ehpbEsB7&quot; value=&quot;16&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
    <para>To perform functional testing we will use the cURL tool (<ulink url="http://curl.haxx.se"/>) which provides an easy way of transferring data using HTTP. First we save the data value
      set XML content in a file called <emphasis role="italic">datavalueset.xml</emphasis> . From
      the directory where this file resides we invoke the following from the command line:</para>
    <screen>curl -d @datavalueset.xml &quot;http://apps.dhis2.org/demo/api/dataValueSets&quot; -H &quot;Content-Type:application/xml&quot; -u admin:district -v</screen>
    <para>The command will dispatch a request to the demo Web API,  set <emphasis role="italic">application/xml</emphasis> as the content-type and  authenticate using admin/district as username/password.   If all goes well this will return a <emphasis role="italic">200 OK</emphasis> HTTP status code. You can verify that the data has been received by opening the data entry module in DHIS 2 and select the org unit, data set and period used in this example.</para>
    <para>The API follows normal semantics for error handling and HTTP status codes. If you supply an invalid username or password, <emphasis role="italic">401 Unauthorized</emphasis> is returned. If you supply a content-type other than application/xml, <emphasis role="italic">415 Unsupported Media Type</emphasis> is returned. If the XML content is invalid according to the DXF namespace, <emphasis role="italic">400 Bad Request</emphasis> is returned. If you provide an invalid identifier in the XML content, <emphasis role="italic">409 Conflict</emphasis> is returned together with a descriptive message.</para>
    <para>In this example, cURL will authenticate to the server through  Basic authentication using our supplied username and password as credentials through the <emphasis role="italic">-u</emphasis> flag. </para>
    <para>In a real-world scenario, looking up identifiers, constructing and dispatching XML messages would be the task of the client software application. This software would probably interact with the more machine-friendly XML and JSON resource representations and not the human-friendly HTML representations like we  did in this example. Developing creative and robust consumers of the Web API services begins  here.</para>
  </section>
  <section>
    <title>Sending event data values</title>
    <para>DHIS 2 supports three kinds of events: single events with no registration (also referred
      to as anonymous events), single event with registration and multiple events with registration.
      Registration implies that the data is linked to a person which is identified using some sort
      of identifier.</para>
    <para>To send events to DHIS 2 you must interact with the <emphasis role="italic"
        >events</emphasis> resource. The approach to sending events is similar to sending aggregate
      data values. You will need a <emphasis role="italic">program</emphasis> which can be looked up
      using the <emphasis role="italic">programs</emphasis> resource, an <emphasis role="italic"
        >orgUnit</emphasis> which can be looked up using the <emphasis role="italic"
        >organisationUnits</emphasis> resource, and a list of valid data element identifiers which
      can be looked up using the <emphasis role="italic">dataElements</emphasis> resource.  For
      events with registration, a <emphasis role="italic">person</emphasis> identifier is required,
      read about how to get this in the section about the <emphasis role="italic">person</emphasis>
      resource. For sending events to programs with multiple stages, you will need to also include
      the <emphasis role="italic">programStage</emphasis> identifier, the identifiers for
      programStages can be found in the <emphasis role="italic">programStages</emphasis>
      resource.</para>
    <para>A simple single event with no registration example payload in XML format where we send
      events from the "Inpatient morbidity and mortality" program for the "Ngelehun CHC" facility in
      the demo database can be seen below:</para>
    <screen>&lt;?xml version="1.0" encoding="utf-8"?>
&lt;event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8" eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
  &lt;coordinate latitude="59.8" longitude="10.9" />
  &lt;dataValues>
    &lt;dataValue dataElement="qrur9Dvnyt5" value="22" />
    &lt;dataValue dataElement="oZg33kd9taw" value="Male" />
    &lt;dataValue dataElement="msodh3rEMJa" value="2013-05-18" />
  &lt;/dataValues>
&lt;/event></screen>
    <para>To perform some testing we can save the XML payload as a file called<emphasis role="italic"> events.xml</emphasis> and send it as a POST request to the events resource in
      the API using curl with the following command:</para>
    <screen>curl -d @events.xml "http://apps.dhis2.org/demo/api/events" -H "Content-Type:application/xml" -u admin:district -v</screen>
    <para>The same payload in JSON format looks like this:</para>
    <screen>{
  "program": "eBAyeGv0exc",
  "orgUnit": "DiszpKrYNg8",
  "eventDate": "2013-05-17",
  "status": "COMPLETED",
  "storedBy": "admin",
  "coordinate": {
    "latitude": "59.8",
    "longitude": "10.9"
  },
  "dataValues": [
    { "dataElement": "qrur9Dvnyt5", "value": "22" },
    { "dataElement": "oZg33kd9taw", "value": "Male" },
    { "dataElement": "msodh3rEMJa", "value": "2013-05-18" }
  ]
}</screen>
    <para>To send this you can save it to a file called <emphasis role="italic">events.json</emphasis> and use curl like this:</para>
    <screen>curl -d @events.xml "localhost:8080/api/events" -H "Content-Type:application/json" -u admin:district -v</screen>
    <para>We also support sending multiple events at the same time. A payload in XML format might
      look like this: </para>
    <screen>&lt;?xml version="1.0" encoding="utf-8"?>
&lt;events>
  &lt;eventList>
    &lt;event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8" eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
      &lt;coordinate latitude="59.8" longitude="10.9" />
      &lt;dataValues>
        &lt;dataValue dataElement="qrur9Dvnyt5" value="22" />
        &lt;dataValue dataElement="oZg33kd9taw" value="Male" />
      &lt;/dataValues>
    &lt;/event>
    &lt;event program="eBAyeGv0exc" orgUnit="DiszpKrYNg8" eventDate="2013-05-17" status="COMPLETED" storedBy="admin">
      &lt;coordinate latitude="59.8" longitude="10.9" />
      &lt;dataValues>
        &lt;dataValue dataElement="qrur9Dvnyt5" value="26" />
        &lt;dataValue dataElement="oZg33kd9taw" value="Female" />
      &lt;/dataValues>
    &lt;/event>
  &lt;/eventList>
&lt;/events></screen>
    <para>You will receive an import summary with the response which can be inspected in order to
      get information about the outcome of the request, like how many values were imported
      successfully. The payload in JSON format looks like this:</para>
    <screen>{
  "eventList": [
  {
    "program": "eBAyeGv0exc",
    "orgUnit": "DiszpKrYNg8",
    "eventDate": "2013-05-17",
    "status": "COMPLETED",
    "storedBy": "admin",
    "coordinate": {
      "latitude": "59.8",
      "longitude": "10.9"
    },
    "dataValues": [
      { "dataElement": "qrur9Dvnyt5", "value": "22" },
      { "dataElement": "oZg33kd9taw", "value": "Male" }
    ] },
  {
    "program": "eBAyeGv0exc",
    "orgUnit": "DiszpKrYNg8",
    "eventDate": "2013-05-17",
    "status": "COMPLETED",
    "storedBy": "admin",
    "coordinate": {
      "latitude": "59.8",
      "longitude": "10.9"
    },
    "dataValues": [
      { "dataElement": "qrur9Dvnyt5", "value": "26" },
      { "dataElement": "oZg33kd9taw", "value": "Female" }
	] }
  ]
}</screen>
    <para>(From 2.13) As part of the import summary you will also get the identifier <emphasis
        role="italic">reference</emphasis> to the event you just sent, together with a <emphasis
        role="italic">href</emphasis> element which points to the server location of this event. </para>
    <para><emphasis role="bold">Update</emphasis>: To update an existing event, the format of the
      payload is the same, but the URL you are posting to must add the identifier to the end of the
      URL string and the request must be PUT.
      <screen>curl -X PUT -d @updated_event.xml "localhost:8080/api/events/Abcas12322" -H "Content-Type:application/xml" -u admin:district -v</screen><screen>curl -X PUT -d @updated_event.json "localhost:8080/api/events/Abcas12322" -H "Content-Type:application/json" -u admin:district -v</screen></para>
    <para><emphasis role="bold">Delete</emphasis>: To delete an existing event, all you need is to
      send a DELETE request with a identifier reference to the server you are
      using.<screen>curl -X DELETE "localhost:8080/api/events/Abcas12322" -u admin:district -v</screen></para>
    <para><emphasis role="bold">Get</emphasis>: To get an existing event you can issue a GET request
      including the identifier like
      this:<screen>curl "localhost:8080/api/events/Abcas12322" -H "Content-Type:application/xml" -u admin:district -v</screen></para>
    <para>The table below describes the meaning of each element. Most elements should be fairly
      self-explanatory.</para>
    <para>
      <table>
        <title>XML/JSON element/key description</title>
        <tgroup cols="5">
          <thead>
            <row>
              <entry>
                <emphasis role="italic">Key</emphasis>
              </entry>
              <entry>
                <emphasis role="italic">Type</emphasis>
              </entry>
              <entry>
                <emphasis role="italic">Required</emphasis>
              </entry>
              <entry>
                <emphasis role="italic">Options (default first)</emphasis>
              </entry>
              <entry>
                <emphasis role="italic">Description</emphasis>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>programId</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry/>
              <entry>Identifier of the single event with no registration program</entry>
            </row>
            <row>
              <entry>organisationUnitId</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry/>
              <entry>Identifier of the organisation unit where the event took place</entry>
            </row>
            <row>
              <entry>eventDate</entry>
              <entry>date</entry>
              <entry>true</entry>
              <entry/>
              <entry>The date of when the event occured</entry>
            </row>
            <row>
              <entry>status</entry>
              <entry>enum</entry>
              <entry>false</entry>
              <entry>ACTIVE, COMPLETED, VISITED,<para>FUTURE_VISIT,
                  LATE_VISIT,</para><para>SKIPPED</para></entry>
              <entry>Whether the event is complete or not</entry>
            </row>
            <row>
              <entry>storedBy</entry>
              <entry>string</entry>
              <entry>false</entry>
              <entry>Defaults to current user</entry>
              <entry>Who stored this event (can be username, system-name etc)</entry>
            </row>
            <row>
              <entry>coordinate</entry>
              <entry>double</entry>
              <entry>false</entry>
              <entry/>
              <entry>Refers to wher the event took place geographically (latitude and
                longitude)</entry>
            </row>
            <row>
              <entry>dataElementId</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry/>
              <entry>Identifier of data element</entry>
            </row>
            <row>
              <entry>value</entry>
              <entry>string</entry>
              <entry>true</entry>
              <entry/>
              <entry>Data value or measure for this event</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
  </section>
  <section>
    <title>Sending data values using SDMX-HD</title>
    <para>Posting a dataValueSet report formatted using the WHO SDMX-HD standard is very similar to
      the dxf2 example above. The same api/dataValueSets resource is used, but the client has to
      specify the Content-Type as <emphasis role="italic">application/sdmx+xml</emphasis>.</para>
    <para>The example below shows an SDMX-HD dataValueSet:</para>
    <screen><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<CrossSectionalData xmlns="http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message"
  xmlns:common="http://www.SDMX.org/resources/SDMXML/schemas/v2_0/common"
  xmlns:ns="urn:sdmx:org.sdmx.infomodel.keyfamily.KeyFamily=DHIS2:KF_DHIS2_SIMPLE:1.0:cross"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message SDMXMessage.xsd
  urn:sdmx:org.sdmx.infomodel.keyfamily.KeyFamily=DHIS2:KF_DHIS2_SIMPLE:1.0:cross file:./KF_HOSP_cross.xsd">

  <Header>
    <ID>OpenMRS-Export</ID>
    <Test>false</Test>
    <Prepared>2012-03-21</Prepared>
    <Sender id="DDU"/>
  </Header>

  <ns:DataSet FREQ="M" TIME_PERIOD="2012-01" FACILITY="DDU" datasetID="KF_HOSP">
    <ns:Group>
      <ns:Section>
        <ns:OBS_VALUE DATAELEMENT="DE001" value="34" />
        <ns:OBS_VALUE DATAELEMENT="DE002" value="36" />
        <ns:OBS_VALUE DATAELEMENT="DE003" value="34" />
        <ns:OBS_VALUE DATAELEMENT="DE004" value="12" />
        <ns:OBS_VALUE DATAELEMENT="DE005" value="5" />
      </ns:Section>
    </ns:Group>

</ns:DataSet>
</CrossSectionalData>]]></screen>
    <para>One thing to note is that the SDMX-HD metadata for dataelements, orgunits and datasets are
      identified using <emphasis>codes</emphasis> rather than <emphasis>identifiers</emphasis>.
      Assuming these coded datasets are present in the DHIS2 server then this can be posted, for
      example using the curl command below.</para>
    <screen>curl -d @sdmxdatavalueset.xml &quot;http://{server base url}/api/dataValueSets&quot; -H &quot;Content-Type:application/sdmx+xml&quot; -u admin:district -v</screen>
  </section>
  <section>
    <title>Sending large bulks of data values</title>
    <para>The previous example showed us how to send a set of related data values sharing the same period and organisation unit. This example will show us how to send large bulks of data values which don&apos;t necessarily are logically related.</para>
    <para>Again we will interact with the with <ulink url="http://apps.dhis2.org/demo/api/dataValueSets"/> resource. This time we will not specify the dataSet and completeDate attributes. Also, we will specify the period and orgUnit attributes on the individual data value elements instead of on the outer data value set element. This will enable us to send data values for various periods and org units:</para>
    <screen>&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201201&quot; orgUnit=&quot;DiszpKrYNg8&quot; value=&quot;12&quot;/&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201201&quot; orgUnit=&quot;FNnj3jKGS7i&quot; value=&quot;14&quot;/&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201202&quot; orgUnit=&quot;DiszpKrYNg8&quot; value=&quot;16&quot;/&gt;
  &lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201202&quot; orgUnit=&quot;Jkhdsf8sdf4&quot; value=&quot;18&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
    <para>We test by using cURL  to send the data values:</para>
    <screen>curl -d @datavalueset.xml &quot;http://apps.dhis2.org/demo/api/dataValueSets&quot; -H &quot;Content-Type:application/xml&quot; -u admin:district -v</screen>
    <para>The data value set resource provides an XML response which is useful when you want to verify the impact your request had. The first time we send the data value set request above the server will respond with the following<emphasis role="italic"> import summary</emphasis>:</para>
    <screen>&lt;importSummary&gt;
  &lt;dataValueCount imported=&quot;2&quot; updated=&quot;1&quot; ignored=&quot;1&quot;/&gt;
  &lt;dataSetComplete&gt;false&lt;/dataSetComplete&gt;
&lt;/importSummary&gt;</screen>
    <para>This message tells us that 3 data values were imported, 1 data value was updated while zero data values were ignored. The single update comes as a result of us sending that data value in the previous example. A data value will be ignored if it references a non-existing data element, period, org unit or data set. In our case this single ignored value was caused by the last data value having an invalid reference to org unit. The data set complete element will display the date of which the data value set was completed, or false if no data element attribute was supplied.</para>
    <para>The import process can be customized using a set of import parameters:</para>
    <table>
      <title>Import parameters</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>
              <emphasis role="italic">Parameter</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Values (default first)</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Description</emphasis>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>dataElementIdScheme</entry>
            <entry>id | name | code</entry>
            <entry>Which property on the data element object to reference from the XML attribute</entry>
          </row>
          <row>
            <entry>orgUnitIdScheme</entry>
            <entry>id | name | code</entry>
            <entry>Which property on the org unit object to reference from the XML attribute</entry>
          </row>
          <row>
            <entry>dryRun</entry>
            <entry>false | true</entry>
            <entry>Whether to save changes on the server or just return the import summary</entry>
          </row>
          <row>
            <entry>importStrategy</entry>
            <entry>new_and_updates | new | updates</entry>
            <entry>Save objects of all, new or update import status on the server</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>All parameters are optional and can be supplied as query parameters in the request URL like this:</para>
    <screen>http://apps.dhis2.org/demo/api/dataValueSets?dataElementIdScheme=code&amp;
  orgUnitIdScheme=name&amp;dryRun=true&amp;importStrategy=new</screen>
    <para>They can also be supplied as XML attributes on the data value set element like below. XML attributes will override query string parameters.</para>
    <screen>&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataElementIdScheme=&quot;code&quot;
  orgUnitIdScheme=&quot;name&quot; dryRun=&quot;true&quot; importStrategy=&quot;new&quot;&gt;
  ..
&lt;/dataValueSet&gt;</screen>
    <para>Regarding the id schemes, by default the identifiers used in the XML messages refer to the
      DHIS stable object identifiers. In certain interoperability situations we might experience
      that the external system decides the identifiers of the objects. In that case we can use the
        <emphasis role="italic">code</emphasis> property of the organisation unit and data element
      objects to set fixed identifiers dictated by the other system. When importing data values we
      hence need to reference the code property instead of the identfier property, and can do so
      using the dataElementIScheme and orgUnitIdScheme paramaters.</para>
  </section>
  <section>
    <title>Sending individual data values</title>
    <para>This example will show how to send individual data values to be saved in a request. This
      can be achieved by sending a <emphasis role="italic">POST</emphasis> request to the <emphasis
        role="italic">dataValues</emphasis> resource:</para>
    <screen>http://apps.dhis2.org/demo/api/dataValues</screen>
    <para>The following query parameters are supported for this resource:</para>
    <table frame="all">
      <title>Data values query parameters</title>
      <tgroup cols="3">
        <colspec colname="c1" colnum="1" colwidth="1*"/>
        <colspec colname="c2" colnum="2" colwidth="1.59*"/>
        <colspec colname="c3" colnum="3" colwidth="3.16*"/>
        <thead>
          <row>
            <entry>Query parameter</entry>
            <entry>Required</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>de</entry>
            <entry>Yes</entry>
            <entry>Data element identifier</entry>
          </row>
          <row>
            <entry>co</entry>
            <entry>No</entry>
            <entry>Category option combo identifier, default will be used if omitted</entry>
          </row>
          <row>
            <entry>pe</entry>
            <entry>Yes</entry>
            <entry>Period identifier</entry>
          </row>
          <row>
            <entry>ou</entry>
            <entry>Yes</entry>
            <entry>Organisation unit identifier</entry>
          </row>
          <row>
            <entry>value</entry>
            <entry>No</entry>
            <entry>Data value</entry>
          </row>
          <row>
            <entry>comment</entry>
            <entry>No</entry>
            <entry>Data comment</entry>
          </row>
          <row>
            <entry>followUp</entry>
            <entry>No</entry>
            <entry>Follow up on data value, will toggle the current boolean value</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>If any of the identifiers given are invalid, if the data value or comment are invalid or
      if the data is locked, the response will contain the <emphasis role="italic">409
        Conflict</emphasis> status code and descriptive text message. If the operation lead to a
      saved or updated value, <emphasis role="italic">200 OK</emphasis> will be returned. An example
      of a request looks like this:</para>
    <screen>curl "http://apps.dhis2.org/demo/api/dataValues?de=s46m5MS0hxu&amp;co=Prlt0C1RF0s&amp;pe=201301&amp;ou=DiszpKrYNg8&amp;value=12" -X POST -u admin:district -v</screen>
  </section>
  <section>
    <title>Reading data values</title>
    <para>This section explains how to retrieve data values from the Web API by interacting with the dataValueSets resource. Data values can currently be retrieved in XML format. Since we want to read data we will use the <emphasis role="italic">GET</emphasis> HTTP verb. We will also specify that we are interested in the XML resource representation by including an <emphasis role="italic">Accept</emphasis> HTTP header with our request. The following query parameters are required:</para>
    <table>
      <title>Data value set query parameters</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>
              <emphasis role="italic">Parameter</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Description</emphasis>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>dataSet</entry>
            <entry>Data set identifier</entry>
          </row>
          <row>
            <entry>period</entry>
            <entry>Period identifier in ISO format</entry>
          </row>
          <row>
            <entry>orgUnit</entry>
            <entry>Organisation unit identifier</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>It is assumed that we have posted data values to DHIS according to the previous section called &quot;Sending data values&quot;. We can now put together our request and send it using cURL:</para>
    <screen>curl &quot;http://apps.dhis2.org/demo/api/dataValueSets?dataSet=pBOMPrpg1QX&amp;period=201201&amp;orgUnit=DiszpKrYNg8&quot; -H &quot;Accept:application/xml&quot; -u admin:district -v</screen>
    <para>The  response will look something like this:</para>
    <screen>HTTP/1.1 200 OK
Content-Type: application/xml

&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;
&lt;dataValueSet xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot; dataSet=&quot;pBOMPrpg1QX&quot;
  completeDate=&quot;2012-01-02&quot; period=&quot;201201&quot; orgUnit=&quot;DiszpKrYNg8&quot;&gt;
&lt;dataValue dataElement=&quot;eY5ehpbEsB7&quot; period=&quot;201201&quot; orgUnit=&quot;DiszpKrYNg8&quot;
  categoryOptionCombo=&quot;bRowv6yZOF2&quot; value=&quot;10003&quot;/&gt;
&lt;dataValue dataElement=&quot;Ix2HsbDMLea&quot; period=&quot;201201&quot; orgUnit=&quot;DiszpKrYNg8&quot;
  categoryOptionCombo=&quot;bRowv6yZOF2&quot; value=&quot;10002&quot;/&gt;
&lt;dataValue dataElement=&quot;f7n9E0hX8qk&quot; period=&quot;201201&quot; orgUnit=&quot;DiszpKrYNg8&quot;
  categoryOptionCombo=&quot;bRowv6yZOF2&quot; value=&quot;10001&quot;/&gt;
&lt;/dataValueSet&gt;</screen>
    <para>The header tells us that the request was processed successfully and that we are receiving a response in XML format. The XML message looks familiar - it is the data values we sent in the previous section.</para>
  </section>
  <section>
    <title>Reading large bulks of data values</title>
    <para>This section explains how to retrieve large bulks of data values which not necessarily
      belong in a single data value set. We will, like in the previous section, interact with the
      dataValueSets resource. The query parameters to use are these:</para>
    <table frame="all">
      <title>Data value set query parameters</title>
      <tgroup cols="2">
        <colspec colname="c1" colnum="1" colwidth="195pt"/>
        <colspec colname="c2" colnum="2" colwidth="605.25pt"/>
        <thead>
          <row>
            <entry><emphasis role="italic">Parameter</emphasis></entry>
            <entry><emphasis role="italic">Description</emphasis></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>dataSet</entry>
            <entry>Data set identifier, can be specified multiple times</entry>
          </row>
          <row>
            <entry>startDate</entry>
            <entry>Start date for the time span of the values to export</entry>
          </row>
          <row>
            <entry>endDate</entry>
            <entry>End date for the time span of the values to export</entry>
          </row>
          <row>
            <entry>orgUnit</entry>
            <entry>Organisation unit identifier, can be specified multiple times</entry>
          </row>
          <row>
            <entry>children</entry>
            <entry>Whether to include the children in the hierarchy of the organisation
              units</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>The dataSet and orgUnit parameters can be repeated in order to include multiple data sets
      and organisation units. An example request looks like this:</para>
    <screen>curl "http://apps.dhis2.org/demo/api/dataValueSets?dataSet=pBOMPrpg1QX&amp;dataSet=BfMAe6Itzgt&amp;startDate=2013-01-01&amp;endDate=2013-01-31&amp;orgUnit=YuQRtpLP10I&amp;orgUnit=vWbkYPRmKyS&amp;children=true"
        -H "Accept:application/xml" -u admin:district -v</screen>
    <para>You can get the response in <emphasis role="italic">xml</emphasis> and <emphasis role="italic">csv</emphasis> format. You can indicate which response format you prefer
      through the <emphasis role="italic">Accept</emphasis> HTTP header like in the example above.
      For xml you use <emphasis role="italic">application/xml</emphasis>; for csv you use <emphasis role="italic">application/csv</emphasis>.</para>
  </section>
  <section>
    <title>Reading event data values</title>
    <para>This section explains how to read out the events that have been stored in the DHIS2 instance. For more advanced uses of the event
      data, please see the section on event analytics. The output format from the <emphasis role="italic">/api/events</emphasis> endpoint
      will match the format that is used to send events to it (which the analytics event api does not support). Both XML and JSON are
      supported, either through adding .json/.xml or by setting the appropriate <emphasis role="italic">Accept</emphasis> header.</para>
    <para>
      <table>
        <title>Events endpoint query parameters</title>
        <tgroup cols="4">
          <thead>
            <row>
              <entry>
                <emphasis role="italic">Key</emphasis>
              </entry>
              <entry>
                <emphasis role="italic">Type</emphasis>
              </entry>
              <entry>
                <emphasis role="italic">Required</emphasis>
              </entry>
              <entry>
                <emphasis role="italic">Description</emphasis>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>program</entry>
              <entry>identifier</entry>
              <entry>true (unless programStage is provided)</entry>
              <entry>Identifier of wanted program.</entry>
            </row>
            <row>
              <entry>programStage</entry>
              <entry>identifier</entry>
              <entry>false</entry>
              <entry>Identifier of wanted program stage</entry>
            </row>
            <row>
              <entry>orgUnit</entry>
              <entry>identifier</entry>
              <entry>true</entry>
              <entry>Identifier of wanted organisation unit</entry>
            </row>
            <row>
              <entry>person</entry>
              <entry>identifier</entry>
              <entry>false</entry>
              <entry>Identifier of wanted person</entry>
            </row>
            <row>
              <entry>startDate</entry>
              <entry>date</entry>
              <entry>false</entry>
              <entry>Only events newer than this date</entry>
            </row>
            <row>
              <entry>endDate</entry>
              <entry>date</entry>
              <entry>false</entry>
              <entry>Only events older than this date</entry>
            </row>
            <row>
              <entry>includeChildren</entry>
              <entry>boolean</entry>
              <entry>false</entry>
              <entry>Include direct children of orgUnit</entry>
            </row>
            <row>
              <entry>includeDescendants</entry>
              <entry>boolean</entry>
              <entry>false</entry>
              <entry>Include all descendants of orgUnit</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
    <section>
      <title>Examples</title>
      <para>Query for all events with a certain orgUnit + children:
        <screen>/api/events?orgUnit=ID&amp;includeChildren=true</screen></para>
      <para>Query for all events with a certain orgUnit + descendants:
        <screen>/api/events?orgUnit=ID&amp;includeDescendants=true</screen></para>
      <para>Query for all events with a certain program/orgUnit:
        <screen>/api/events?program=ID&amp;orgUnit=ID</screen></para>
      <para>Query for all events with a certain program/orgUnit for a specific person:
        <screen>/api/events?program=ID&amp;orgUnit=ID&amp;person=ID</screen></para>
      <para>Query for all events with a certain program/orgUnit older or equal to 2012-02-03:
        <screen>/api/events?program=ID&amp;orgUnit=ID&amp;endDate=2012-02-03</screen></para>
      <para>Query for all events with a certain programStage/orgUnit/person in the year 2012:
        <screen>/api/events?program=ID&amp;orgUnit=ID&amp;person=ID&amp;startDate=2012-01-01&amp;endDate=2012-12-31</screen></para>
    </section>
  </section>
  <section>
    <title>Reading dataset complete registrations</title>
    <para>This section explains how to retrieve dataset completeness registrations. We will be using
      the completeDataSetRegistrations resource. The query parameters to use are these:</para>
    <table frame="all">
      <title>Data value set query parameters</title>
      <tgroup cols="2">
        <colspec colname="c1" colnum="1" colwidth="195pt"/>
        <colspec colname="c2" colnum="2" colwidth="605.25pt"/>
        <thead>
          <row>
            <entry><emphasis role="italic">Parameter</emphasis></entry>
            <entry><emphasis role="italic">Description</emphasis></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>dataSet</entry>
            <entry>Data set identifier, can be specified multiple times</entry>
          </row>
          <row>
            <entry>period</entry>
            <entry>PeriodType</entry>
          </row>
          <row>
            <entry>startDate</entry>
            <entry>Start date for the time span of the values to export</entry>
          </row>
          <row>
            <entry>endDate</entry>
            <entry>End date for the time span of the values to export</entry>
          </row>
          <row>
            <entry>orgUnit</entry>
            <entry>Organisation unit identifier, can be specified multiple times</entry>
          </row>
          <row>
            <entry>children</entry>
            <entry>Whether to include the children in the hierarchy of the organisation
              units</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>The dataSet and orgUnit parameters can be repeated in order to include multiple data sets
      and organisation units. An example request looks like
      this:<screen>curl "http://apps.dhis2.org/dev/api/completeDataSetRegistrations?dataSet=pBOMPrpg1QX&amp;dataSet=BfMAe6Itzgt&amp;startDate=2013-01-01&amp;endDate=2013-01-31
  &amp;orgUnit=YuQRtpLP10I&amp;orgUnit=vWbkYPRmKyS&amp;children=true" -H "Accept:application/xml" -u admin:district -v</screen></para>
    <para>You can get the response in <emphasis role="italic">xml</emphasis> and <emphasis
        role="italic">json</emphasis> format. You can indicate which response format you prefer
      through the <emphasis role="italic">Accept</emphasis> HTTP header like in the example above.
      For xml you use <emphasis role="italic">application/xml</emphasis>; for json you use <emphasis
        role="italic">application/json</emphasis>.</para>
  </section>
  <section>
    <title>Writing and reading messages</title>
    <para>DHIS 2 features a mechanism for sending messages for purposes such as user feedback, notifications and general information to  users. Messages are delivered to the DHIS 2 message inbox but can also be sent to the user&apos;s email addresses and mobile phones as SMS. In this example we will see how we can utilize the Web API to send and read messages. We will pretend to be the <emphasis role="italic">DHIS Administrator</emphasis>   user  and  send a message to the  <emphasis role="italic">Mobile</emphasis> user. We will then pretend to be the  mobile user and read our new message.</para>
    <para>The resource we need to interact with when sending and reading messages is the <emphasis
        role="italic">messageConversations</emphasis> resource. We start by visiting the Web API
      entry point at <ulink url="http://apps.dhis2.org/demo/api"/> where we find and follow the link
      to the <emphasis role="italic">messageConversations</emphasis> resource at <ulink
        url="http://apps.dhis2.org/demo/api/messageConversations"/>. The description tells us that
      we can use a POST request to create a new message using the following XML format for sending
      to multiple users:</para>
    <para><screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;This is the subject&lt;/subject&gt;
  &lt;text&gt;This is the text&lt;/text&gt;
  &lt;users&gt;
    &lt;user id=&quot;user1ID&quot; /&gt;
    &lt;user id=&quot;user2ID&quot; /&gt;
    &lt;user id=&quot;user3ID&quot; /&gt;
  &lt;/users&gt;
&lt;/message&gt;</screen></para>
    <para>For sending to all users contained in one or more user groups, we can use:</para>
    <para><screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;This is the subject&lt;/subject&gt;
  &lt;text&gt;This is the text&lt;/text&gt;
  &lt;userGroups&gt;
    &lt;userGroup id=&quot;userGroup1ID&quot; /&gt;
    &lt;userGroup id=&quot;userGroup2ID&quot; /&gt;
    &lt;userGroup id=&quot;userGroup3ID&quot; /&gt;
  &lt;/userGroups&gt;
&lt;/message&gt;</screen></para>
    <para>For sending to all users connected to one or more organisation units, we can use:</para>
    <para><screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;This is the subject&lt;/subject&gt;
  &lt;text&gt;This is the text&lt;/text&gt;
  &lt;organisationUnits&gt;
    &lt;organisationUnit id=&quot;ou1ID&quot; /&gt;
    &lt;organisationUnit id=&quot;ou2ID&quot; /&gt;
    &lt;organisationUnit id=&quot;ou3ID&quot; /&gt;
  &lt;/organisationUnits&gt;
&lt;/message&gt;</screen></para>
    <para>Since we want to send a message to our friend the mobile user we need to look up her identifier. We do so by going to the  Web API entry point and follow the link to the <emphasis role="italic">users</emphasis> resource at <ulink url="http://apps.dhis2.org/demo/api/users"/>. We continue by following link to the mobile user at <ulink url="http://apps.dhis2.org/demo/api/users/PhzytPW3g2J"/> where we learn that her identifier is <emphasis role="italic">PhzytPW3g2J</emphasis>. We are now ready to put our XML message together to form a message where we want to ask the mobile user whether she has reported data for January 2012:</para>
    <screen>&lt;message xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;&gt;
  &lt;subject&gt;Mortality data reporting&lt;/subject&gt;
  &lt;text&gt;Have you reported data for the Mortality data set for January 2012?&lt;/text&gt;
  &lt;users&gt;
    &lt;user id=&quot;PhzytPW3g2J&quot; /&gt;
  &lt;/users&gt;
&lt;/message&gt;</screen>
    <para>To test this we save the XML content into a file called <emphasis role="italic">message.xml</emphasis>. We use cURL to dispatch the message the the DHIS 2 demo instance where we indicate that the content-type is XML and authenticate as the <emphasis role="italic">admin</emphasis> user:</para>
    <screen>curl -d @message.xml &quot;http://apps.dhis2.org/demo/api/messageConversations&quot; -H &quot;Content-Type:application/xml&quot; -u admin:district -X POST -v</screen>
    <para>If all is well we receive a <emphasis role="italic">201 Created</emphasis> HTTP status code. Also note that we receive a <emphasis role="italic">Location </emphasis>HTTP header which value  informs us of the URL of the newly  created message conversation resource - this can be used by a consumer to perform further action.</para>
    <para>We will now pretend to be the mobile user and read the message which was just sent by dispatching a GET request to the <emphasis role="italic">messageConversations</emphasis> resource. We supply an <emphasis role="italic">Accept</emphasis> header with <emphasis role="italic">application/xml</emphasis> as the value to indicate that we are interested in the XML resource representation and we authenticate as the <emphasis role="italic">mobile</emphasis> user:</para>
    <screen>curl &quot;http://apps.dhis2.org/demo/api/messageConversations&quot; -H &quot;Accept:application/xml&quot; -u mobile:district -X GET -v</screen>
    <para>In response we get the following XML:</para>
    <screen>&lt;messageConversations xmlns=&quot;http://dhis2.org/schema/dxf/2.0&quot;
  link=&quot;http://apps.dhis2.org/demo/api/messageConversations&quot;&gt;
  &lt;messageConversation name=&quot;Mortality data reporting&quot; id=&quot;ZjHHSjyyeJ2&quot;
    link=&quot;http://apps.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2&quot;/&gt;
  &lt;messageConversation name=&quot;DHIS version 2.7 is deployed&quot; id=&quot;GDBqVfkmnp2&quot;
    link=&quot;http://apps.dhis2.org/demo/api/messageConversations/GDBqVfkmnp2&quot;/&gt;
&lt;/messageConversations&gt;</screen>
    <para>From the response we are able to read the identifier of the newly sent message which is <emphasis role="italic">ZjHHSjyyeJ2</emphasis>. Note that the link to the specific resource is embedded and can be followed in order to read the full message. From the description at <ulink url="http://apps.dhis2.org/demo/api/messageConversations"/> we learned that we can reply directly to an existing message conversation once we know the URL by including the message text as the  request payload (body). We are now able to construct a URL for sending our reply:</para>
    <screen>curl -d &quot;Yes the Mortality data set has been reported&quot; &quot;http://apps.dhis2.org/demo/api/messageConversations/ZjHHSjyyeJ2&quot; -H &quot;Content-Type:text/plain&quot; -u mobile:district -X POST -v</screen>
    <para>If all went according to plan you will receive a <emphasis role="italic">200 OK</emphasis> status code.</para>
  </section>
  <section>
    <title>Interpretations</title>
    <para>For certain analysis-related resources in DHIS, like charts, maps and report tables, one
      can write and share a data interpretation. An interpretation is simply a link to the the
      relevant resource together with a text expressing some insight about the data. Interpretations
      access control follows the access given for the interpreted object.</para>
    <section>
    <title>Reading interpretations</title>
    <para>To read interpretations we will interact with the <emphasis role="italic"
          >api/interpretations</emphasis> resource. The output in JSON response format could look
        like below (use e.g. api/interpretations.json):</para>
      <screen>{
    "interpretations": [{
        "created": "2013-10-07T11:37:19.273+0000",
        "lastUpdated": "2013-10-07T12:08:58.028+0000",
        "type": "map",
        "href": "http://apps.dhis2.org/demo/api/interpretations/d3BukolfFZI",
        "id": "d3BukolfFZI"
    }, {
        "created": "2013-05-30T10:24:06.181+0000",
        "lastUpdated": "2013-05-30T10:25:08.066+0000",
        "type": "reportTable",
        "href": "http://apps.dhis2.org/demo/api/interpretations/XSHiFlHAhhh",
        "id": "XSHiFlHAhhh"
    }, {
        "created": "2013-05-29T14:47:13.081+0000",
        "lastUpdated": "2013-05-29T14:47:13.081+0000",
        "type": "chart",
        "href": "http://apps.dhis2.org/demo/api/interpretations/kr4AnZmYL43",
        "id": "kr4AnZmYL43"
    }]
}</screen>
      <para>An interpretation contains properties for identifier, date of creation and date of last
        modification. The type property refers to the kind of object is being interpreted, and is
        useful to show an appropriate visual clue in a client. Valid options are "chart", "map",
        "reportTable" and "dataSetReport". By following the link given in the "href" property one
        can get more information about a specific interpretation. In the case of the map
        interpretation, the response will look like this:</para>
      <screen>{
    "created": "2013-10-07T11:37:19.273+0000",
    "lastUpdated": "2013-10-07T12:08:58.028+0000",
    "map": {
        "name": "ANC: ANC 2 Coverage",
        "created": "2012-11-13T12:01:21.918+0000",
        "lastUpdated": "2012-11-13T12:01:21.918+0000",
        "href": "http://apps.dhis2.org/demo/api/maps/bhmHJ4ZCdCd",
        "id": "bhmHJ4ZCdCd"
    },
    "text": "We can see that the ANC 2 coverage of Kasonko and Lei districts are under 40 %. What could be the cause for this?",
    "comments": [{
        "created": "2013-10-07T12:08:58.026+0000",
        "lastUpdated": "2013-10-07T12:08:58.026+0000",
        "text": "Due to the rural environment, getting women to the facilities is a challenge. Outreach campaigns might be helpful.",
        "href": "http://apps.dhis2.org/demo/api/null/iB4Etq8yTE6",
        "id": "iB4Etq8yTE6"
    }],
    "type": "map",
    "href": "http://apps.dhis2.org/demo/api/interpretations/d3BukolfFZI",
    "id": "d3BukolfFZI"
}</screen>
      <para>The map interpretation contains identifier and type information in the "id" and "type"
        properties. The interpretation text is available in the "text" property and references to
        any comments in the "comments" list. It also contains information about the interpreted
        object, in this case the "map" property. Note that you can follow the link to the actual map
        through the "href" property. For all analytical objects you can append <emphasis
          role="italic">/data</emphasis> to the URL to retrieve the data associated with the
        resource, as apposed to the meta-data. As an example, by following the map link and
        appending /data one can retrieve a PNG (image) representation of the thematic map through
        the following URL:</para>
      <screen>http://apps.dhis2.org/demo/api/maps/bhmHJ4ZCdCd/data</screen>
    </section>
    <section>
    <title>Writing interpretations</title>
    <para>We will start by writing an interpretation for the chart with identifier <emphasis role="italic">EbRN2VIbPdV</emphasis>. To write chart interpretations we will interact with the <ulink url="http://apps.dhis2.org/demo/api/interpretations/chart/{chartId}"/> resource. The interpretation will be the request body. Based on this we can put together the following request using cURL:</para>
    <screen>curl -d &quot;This chart shows a significant ANC 1-3 dropout&quot; &quot;http://apps.dhis2.org/demo/api/interpretations/chart/EbRN2VIbPdV&quot; -H &quot;Content-Type:text/plain&quot; -u admin:district -v</screen>
    <para>Second we will write a comment on the interpretation we just wrote. By looking at the interpretation response you will see that a <emphasis role="italic">Location</emphasis> header is returned. This header tells us the URL of the newly created interpretation and from that we can read its identifier. This identifier is randomly generated so you will have to replace the one in the command below with your own. To write a comment we can interact with the <ulink url="http://apps.dhis2.org/demo/api/interpretations/{interpretationId}/comment"/> like this:</para>
    <screen>curl -d &quot;An intervention is needed&quot; &quot;http://apps.dhis2.org/demo/api/interpretations/j8sjHLkK8uY/comment&quot; -H &quot;Content-Type:text/plain&quot; -u admin:district -v</screen>
    <para>You can also write interpretations for report tables in a similar way by interacting with the <ulink url="http://app.dhis2.org/demo/api/interpretations/reportTable/{reportTableId}"/>. For report tables you can also provide an optional <emphasis role="italic">ou</emphasis> query parameter to supply an organisation unit identifier in the case where the report table has an organisation unit report parameter:</para>
    <screen>curl -d &quot;This table reveals poor data quality&quot; &quot;http://apps.dhis2.org/demo/api/interpretations/reportTable/xIWpSo5jjT1?ou=O6uvpzGd5pu&quot; -H &quot;Content-Type:text/plain&quot; -u admin:district -v</screen>
    </section>
  </section>
  <section>
    <title>Viewing analytical resource representations</title>
    <para>DHIS 2 has several resources for data analysis. These resources include <emphasis
        role="italic">charts</emphasis>, <emphasis role="italic">maps</emphasis>, <emphasis
        role="italic">reportTables</emphasis>, <emphasis role="italic">reports</emphasis> and
        <emphasis role="italic">documents</emphasis>. By visiting these resources you will retrieve
      information about the resource. For instance, by navigating to <emphasis role="italic"
        >api/charts/R0DVGvXDUNP</emphasis> the response will contain the name, last date of
      modication and so on for the chart. To retrieve the analytical representation, for instance a
      PNG representation of the chart, you can append <emphasis role="italic">/data</emphasis> to
      all these resources. For instance, by visiting <emphasis role="italic"
        >api/charts/R0DVGvXDUNP/data</emphasis> the system will return a PNG image of the
      chart.</para>
    <table frame="all">
      <title>Analytical resources</title>
      <tgroup cols="4">
        <colspec colname="c1" colnum="1" colwidth="1.01*"/>
        <colspec colname="c2" colnum="2" colwidth="1*"/>
        <colspec colname="c3" colnum="3" colwidth="1.93*"/>
        <colspec colname="newCol4" colnum="4" colwidth="1.91*"/>
        <thead>
          <row>
            <entry>Resource</entry>
            <entry>Description</entry>
            <entry>Data URL</entry>
            <entry>Resource representations</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>charts</entry>
            <entry>Charts</entry>
            <entry>api/charts/&lt;identifier>/data</entry>
            <entry>png</entry>
          </row>
          <row>
            <entry>maps</entry>
            <entry>Maps</entry>
            <entry>api/maps/&lt;identifier>/data</entry>
            <entry>png</entry>
          </row>
          <row>
            <entry>reportTables</entry>
            <entry>Pivot tables</entry>
            <entry>api/reportTables/&lt;identifier>/data</entry>
            <entry>json | jsonp | html | xml | pdf | xls | csv</entry>
          </row>
          <row>
            <entry>reports</entry>
            <entry>Standard reports</entry>
            <entry>api/reports/&lt;identifier>/data</entry>
            <entry>pdf | xls | html</entry>
          </row>
          <row>
            <entry>documents</entry>
            <entry>Resources</entry>
            <entry>api/documents/&lt;identifier>/data</entry>
            <entry>&lt;follows document></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>The data content of the analytical represantations can be modified by providing a
        <emphasis role="italic">date</emphasis> query parameter. This requires that the analytical
      resource is set up for relative periods for the period dimension.</para>
    <table frame="all">
      <title>Data query parameters</title>
      <tgroup cols="3">
        <colspec colname="c1" colnum="1" colwidth="1*"/>
        <colspec colname="c2" colnum="2" colwidth="1.31*"/>
        <colspec colname="c3" colnum="3" colwidth="2.34*"/>
        <thead>
          <row>
            <entry>Query parameter</entry>
            <entry>Value</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>date</entry>
            <entry>Date in yyyy-MM-dd format</entry>
            <entry>Basis for relative periods in report (requires relative periods)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>Some examples of valid URLs for retrieving various analytical representations are listed
      below.</para>
    <screen>api/charts/R0DVGvXDUNP/data
api/charts/R0DVGvXDUNP/data?date=2013-06-01

api/reportTables/jIISuEWxmoI/data.html
api/reportTables/jIISuEWxmoI/data.html?date=2013-01-01
api/reportTables/FPmvWs7bn2P/data.xls
api/reportTables/FPmvWs7bn2P/data.pdf

api/maps/DHE98Gsynpr/data
api/maps/DHE98Gsynpr/data?date=2013-07-01

api/reports/OeJsA6K1Otx/data.pdf
api/reports/OeJsA6K1Otx/data.pdf?date=2012-01-01</screen>
  </section>



  <section><title>Plugins</title>
  <para>DHIS 2 comes with plugins which enables you to embed live data directly in your web portal or web site. Currently, plugins exist for charts, maps and pivot tables.</para>  
  <section>
    <title>Embedding pivot tables with the Pivot table plug-in</title>
    <para>In this example we will see how we can embed good-looking, light-weight html pivot tables with data served from a DHIS back-end into a Web page. To accomplish this we will use the Pivot table plug-in. The plug-in is written in Javascript and depends on the Ext JS library only. A complete working example can be found at <ulink url="http://apps.dhis2.org/portal/table.html"/>. Open the page in a web browser and view the source to see how it is set up.</para>
    <para>We start by including three files in the header section of the HTML document. The first
      two files are the Ext JS javascript library (we use the DHIS 2 content delivery network in
      this case) and its css stylesheet. The third file is the Pivot table plug-in. Make sure the
      path is pointing to your DHIS server installation.</para>
    <screen>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v213/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v213/ext/ext-all.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v213/plugin/table.js&quot;&gt;&lt;/script&gt;</screen>
    <para>To authenticate with the DHIS server we use the same approach as in the previous section. In the header of the HTML document we include the following Javascript inside a script element. The <emphasis role="italic">setLinks</emphasis> method will be implemented later. Make sure the <emphasis role="italic">base</emphasis> variable is pointing to your DHIS installation.</para>
    <screen>var base = &quot;http://apps.dhis2.org/demo/&quot;;

Ext.onReady( function() {
  Ext.Ajax.request({
    url: base + &quot;dhis-web-commons-security/login.action&quot;,
    method: &quot;POST&quot;,
    params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
      success: setLinks
  });
});</screen>
    <para>Now let us have a look at the various options for the Pivot table plug-in. Two properies are required: <emphasis role="italic">el</emphasis> and <emphasis role="italic">url</emphasis> (please refer to the table below). Now, if you want to refer to pre-defined tables already made inside DHIS it is sufficient to provide the additional <emphasis role="italic">id</emphasis> parameter. If you instead want to configure a pivot table dynamically you shoud omit the id parameter and provide data dimensions inside a <emphasis role="italic">columns</emphasis> array (chart series), a <emphasis role="italic">rows</emphasis> array (chart categories) and optionally a <emphasis role="italic">filters</emphasis> array instead.</para>

    <para>A data dimension is defined as an object with a text property called <emphasis role="italic">dimension</emphasis>. This property accepts the following values: <emphasis role="italic">in</emphasis> (indicator), <emphasis role="italic">de</emphasis> (data element), <emphasis role="italic">ds</emphasis> (data set), <emphasis role="italic">dc</emphasis> (data element operand), <emphasis role="italic">pe</emphasis> (period), <emphasis role="italic">ou</emphasis> (organisation unit) or the id of any organisation unit group set or data element group set (can be found in the web api). The data dimension also has an array property called <emphasis role="italic">items</emphasis> which accepts objects with an <emphasis role="italic">id</emphasis> property.</para>

    <para>To sum up, if you want to have e.g. &quot;ANC 1 Coverage&quot;, &quot;ANC 2 Coverage&quot; and &quot;ANC 3 Coverage&quot; on the columns in your chart you can make the following <emphasis role="italic">columns</emphasis> config:</para>

	<screen>columns: [{
  dimension: "in", // "in", "de", "ds", "dc", "pe", "ou" or any dimension id
  items: [
    {id: "Uvn6LCg7dVU"}, // the id of ANC 1 Coverage
    {id: "OdiHJayrsKo"}, // the id of ANC 2 Coverage
    {id: "sB79w2hiLp8"}  // the id of ANC 3 Coverage
  ]
}]</screen>

    <table>
      <title>Pivot table plug-in configuration</title>
      <tgroup cols="5">
        <thead>
          <row>
            <entry>
              <emphasis role="italic">Param</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Type</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Required</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Options (default first)</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Description</emphasis>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>el</entry>
            <entry>string</entry>
            <entry>Yes</entry>
            <entry/>
            <entry>Identifier of the HTML element to render the chart in your web page</entry>
          </row>
          <row>
            <entry>url</entry>
            <entry>string</entry>
            <entry>Yes</entry>
            <entry/>
            <entry>Base URL of the DHIS server</entry>
          </row>
          <row>
            <entry>id</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry/>
            <entry>Identifier of a pre-defined chart (favorite) in DHIS</entry>
          </row>
          <row>
            <entry>columns</entry>
            <entry>array</entry>
            <entry>Yes (if no id provided)</entry>
            <entry/>
            <entry>Data dimensions to include in chart as series</entry>
          </row>
          <row>
            <entry>rows</entry>
            <entry>array</entry>
            <entry>Yes (if no id provided)</entry>
            <entry/>
            <entry>Data dimensions to include in chart as category</entry>
          </row>
          <row>
            <entry>filter</entry>
            <entry>array</entry>
            <entry>No</entry>
            <entry/>
            <entry>Data dimensions to include in chart as filters</entry>
          </row>
          <row>
            <entry>showTotals</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>true | false</entry>
            <entry>Whether to display totals for columns and rows</entry>
          </row>
          <row>
            <entry>showSubTotals</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>true | false</entry>
            <entry>Whether to display sub-totals for columns and rows</entry>
          </row>
          <row>
            <entry>hideEmptyRows</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether to hide rows with no data</entry>
          </row>
          <row>
            <entry>showHierarchy</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether to extend orgunit names with the name of all anchestors</entry>
          </row>
          <row>
            <entry>displayDensity</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry>"normal" | "comfortable" | "compact"</entry>
            <entry>The amount of space inside table cells</entry>
          </row>
          <row>
            <entry>fontSize</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry>"normal" | "large" | "small"</entry>
            <entry>Table font size</entry>
          </row>
          <row>
            <entry>digitGroupSeparator</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry>"space" | "comma" | "none"</entry>
            <entry>How values are formatted: 1 000 | 1,000 | 1000</entry>
          </row>
          <row>
            <entry>legendSet</entry>
            <entry>object</entry>
            <entry>No</entry>
            <entry/>
            <entry>Show a color indicator next to the values (currently reusing legend sets from GIS)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>We continue by adding one pre-defined and one dynamic pivot table to our HTML document. You can browse the list of available pivot tables using the Web API here: <ulink url="http://apps.dhis2.org/demo/api/reportTables"/>.</para>
    <screen>function setLinks() {
  DV.plugin.getTable({ url: base, el: 'chartA1', id: 'R0DVGvXDUNP' });

  DV.plugin.getTable({
    url: base,
    el: 'chartB1',
    type: 'stackedBar',
    columns: [
      {dimension: 'de', items: [{id: 'YtbsuPPo010'}, {id: 'l6byfWFUGaP'}]}
    ],
    rows: [
      {dimension: 'pe', items: [{id: 'LAST_12_MONTHS'}]}
    ],
    filters: [
      {dimension: 'ou', items: [{id: 'USER_ORGUNIT'}]}
    ],
    showTotals: false, // All following options are optional
    showSubTotals: false,
    hideEmptyRows: true,
    showHierarchy: true,
    displayDensity: "comfortable",
    fontSize: "large",
    digitGroupSeparator: "comma",
    legendSet: {id: "BtxOoQuLyg1"}
  });
};</screen>
    <para>Finally we include some <emphasis role="italic">div</emphasis> elements in the body section of the HTML document with the identifiers referred to in the plug-in Javascript.</para>
    <screen>&lt;div id=&quot;tableA1&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;tableB1&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;</screen>
    <para>To see a complete working example please visit <ulink url="http://apps.dhis2.org/portal/table.html"/>.</para>
  </section>
  <section>
    <title>Embedding charts with the Visualizer chart plug-in</title>
    <para>In this example we will see how we can embed good-looking Ext JS charts (<ulink url="http://www.sencha.com/products/extjs"/>) with data served from a DHIS back-end into a Web page. To accomplish this we will use the DHIS Visualizer plug-in. The plug-in is written in Javascript and depends on the Ext JS library only. A complete working example can be found at <ulink url="http://apps.dhis2.org/portal/chart.html"/>. Open the page in a web browser and view the source to see how it is set up.</para>
    <para>We start by including three files in the header section of the HTML document. The first
        two files are the Ext JS javascript library (we use the DHIS 2 content delivery network in
        this case) and its stylesheet. The third file is the Visualizer plug-in. Make sure the path
        is pointing to your DHIS server installation.</para>
    <screen>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v213/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v213/ext/ext-all.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v213/plugin/table.js&quot;&gt;&lt;/script&gt;</screen>
    <para>To authenticate with the DHIS server we use the same approach as in the previous section. In the header of the HTML document we include the following Javascript inside a script element. The <emphasis role="italic">setLinks</emphasis> method will be implemented later. Make sure the <emphasis role="italic">base</emphasis> variable is pointing to your DHIS installation.</para>
    <screen>var base = &quot;http://apps.dhis2.org/demo/&quot;;

Ext.onReady( function() {
  Ext.Ajax.request({
    url: base + &quot;dhis-web-commons-security/login.action&quot;,
    method: &quot;POST&quot;,
    params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
    success: setLinks
  });
});</screen>
    <para>Now let us have a look at the various options for the Visualizer plug-in. Two properies are required: <emphasis role="italic">el</emphasis> and <emphasis role="italic">url</emphasis> (please refer to the table below). Now, if you want to refer to pre-defined charts already made inside DHIS it is sufficient to provide the additional <emphasis role="italic">id</emphasis> parameter. If you instead want to configure a chart dynamically you shoud omit the id parameter and provide data dimensions inside a <emphasis role="italic">columns</emphasis> array (chart series), a <emphasis role="italic">rows</emphasis> array (chart categories) and optionally a <emphasis role="italic">filters</emphasis> array instead.</para>

    <para>A data dimension is defined as an object with a text property called <emphasis role="italic">dimension</emphasis>. This property accepts the following values: <emphasis role="italic">in</emphasis> (indicator), <emphasis role="italic">de</emphasis> (data element), <emphasis role="italic">ds</emphasis> (data set), <emphasis role="italic">dc</emphasis> (data element operand), <emphasis role="italic">pe</emphasis> (period), <emphasis role="italic">ou</emphasis> (organisation unit) or the id of any organisation unit group set or data element group set (can be found in the web api). The data dimension also has an array property called <emphasis role="italic">items</emphasis> which accepts objects with an <emphasis role="italic">id</emphasis> property.</para>

    <para>To sum up, if you want to have e.g. &quot;ANC 1 Coverage&quot;, &quot;ANC 2 Coverage&quot; and &quot;ANC 3 Coverage&quot; as series in your chart you can make the following <emphasis role="italic">columns</emphasis> config:</para>

	<screen>columns: [{
  dimension: "in", // could be "in", "de", "ds", "dc", "pe", "ou" or any dimension id
  items: [
    {id: "Uvn6LCg7dVU"}, // the id of ANC 1 Coverage
    {id: "OdiHJayrsKo"}, // the id of ANC 2 Coverage
    {id: "sB79w2hiLp8"}  // the id of ANC 3 Coverage
  ]
}]</screen>

    <table>
      <title>Visualizer chart plug-in configuration</title>
      <tgroup cols="5">
        <thead>
          <row>
            <entry>
              <emphasis role="italic">Param</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Type</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Required</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Options (default first)</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Description</emphasis>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>el</entry>
            <entry>string</entry>
            <entry>Yes</entry>
            <entry/>
            <entry>Identifier of the HTML element to render the chart in your web page</entry>
          </row>
          <row>
            <entry>url</entry>
            <entry>string</entry>
            <entry>Yes</entry>
            <entry/>
            <entry>Base URL of the DHIS server</entry>
          </row>
          <row>
            <entry>id</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry/>
            <entry>Identifier of a pre-defined chart (favorite) in DHIS</entry>
          </row>
          <row>
            <entry>type</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry>column | stackedcolumn | bar | stackedbar | line | area | pie</entry>
            <entry>Chart type</entry>
          </row>
          <row>
            <entry>columns</entry>
            <entry>array</entry>
            <entry>Yes (if no id provided)</entry>
            <entry/>
            <entry>Data dimensions to include in chart as series</entry>
          </row>
          <row>
            <entry>rows</entry>
            <entry>array</entry>
            <entry>Yes (if no id provided)</entry>
            <entry/>
            <entry>Data dimensions to include in chart as category</entry>
          </row>
          <row>
            <entry>filter</entry>
            <entry>array</entry>
            <entry>No</entry>
            <entry/>
            <entry>Data dimensions to include in chart as filters</entry>
          </row>
          <row>
            <entry>showData</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether to display data on the chart</entry>
          </row>
          <row>
            <entry>showTrendLine</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether to display trend line(s) on the chart</entry>
          </row>
          <row>
            <entry>hideLegend</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether to hide the chart legend</entry>
          </row>
          <row>
            <entry>hideTitle</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Whether to hide the chart title</entry>
          </row>
          <row>
            <entry>targetLineValue</entry>
            <entry>double</entry>
            <entry>No</entry>
            <entry/>
            <entry>Value of target line to display on the chart</entry>
          </row>
          <row>
            <entry>targetLineLabel</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry/>
            <entry>Label for target line</entry>
          </row>
          <row>
            <entry>baseLineValue</entry>
            <entry>double</entry>
            <entry>No</entry>
            <entry/>
            <entry>Value of baseline to display on the chart</entry>
          </row>
          <row>
            <entry>baseLineLabel</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry/>
            <entry>Label for baseline</entry>
          </row>
          <row>
            <entry>domainAxisTitle</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry/>
            <entry>Title for the domain axis</entry>
          </row>
          <row>
            <entry>rangeAxisTitle</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry/>
            <entry>Title for the range axis</entry>
          </row>
          <row>
            <entry>width</entry>
            <entry>integer</entry>
            <entry>No</entry>
            <entry/>
            <entry>Width of chart</entry>
          </row>
          <row>
            <entry>height</entry>
            <entry>integer</entry>
            <entry>No</entry>
            <entry/>
            <entry>Height of chart</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>We continue by including two pre-defined charts and to dynamic charts to our HTML document. You can browse the list of available charts using the Web API here: <ulink url="http://apps.dhis2.org/demo/api/charts"/>.</para>
    <screen>function setLinks() {
  DV.plugin.getChart({ url: base, el: 'chartA1', id: 'R0DVGvXDUNP' });

  DV.plugin.getChart({
    url: base,
    el: 'chartB1',
    type: 'stackedBar',
    columns: [
      {dimension: 'de', items: [{id: 'YtbsuPPo010'}, {id: 'l6byfWFUGaP'}, {id: 's46m5MS0hxu'}]}
	],
    rows: [
      {dimension: 'pe', items: [{id: 'LAST_12_MONTHS'}]}
    ],
    filters: [
      {dimension: 'ou', items: [{id: 'USER_ORGUNIT'}]}
    ],
    showData: false, // All following options are optional
    targetLineValue: 70,
    baseLineValue: 20,
    showTrendLine: true,
    hideLegend: true,
    title: 'My chart title',
    domainAxisTitle: 'Periods',
    rangeAxisTitle: 'Percent'
  });
};</screen>
    <para>Finally we include some <emphasis role="italic">div</emphasis> elements in the body section of the HTML document with the identifiers referred to in the plug-in Javascript.</para>
    <screen>&lt;div id=&quot;chartA1&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chartB1&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;
</screen>
    <para>To see a complete working example please visit <ulink url="http://apps.dhis2.org/portal/chart.html"/>.</para>
  </section>
  <section>
    <title>Embedding maps with the GIS map plug-in</title>
    <para>In this example we will see how we can embed maps with data served from a DHIS back-end into a Web page. To accomplish this we will use the GIS map plug-in. The plug-in is written in Javascript and depends on the Ext JS library only. A complete working example can be found at <ulink url="http://apps.dhis2.org/portal/map.html"/>. Open the page in a web browser and view the source to see how it is set up.</para>
    <para>We start by including four files and Google Maps in the header section of the HTML
        document. The first two files are the Ext JS javascript library (we use the DHIS 2 content
        delivery network in this case) and its stylesheet. The third file is the OpenLayers
        javascript mapping framework (<ulink url="http://openlayers.org"/>) and finally we include
        the GIS map plug-in. Make sure the path is pointing to your DHIS server installation.</para>
	<screen>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v213/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v213/ext/ext-all.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://maps.google.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v213/openlayers/OpenLayers.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;http://dhis2-cdn.org/v213/plugin/map.js&quot;&gt;&lt;/script&gt;</screen>

    <para>To authenticate with the DHIS server we use the same approach as in the previous section. In the header of the HTML document we include the following Javascript inside a script element. The <emphasis role="italic">setLinks</emphasis> method will be implemented later. Make sure the <emphasis role="italic">base</emphasis> variable is pointing to your DHIS installation.</para>
    <screen>var base = &quot;http://apps.dhis2.org/demo/&quot;;

Ext.onReady( function() {
  Ext.Ajax.request({
    url: base + &quot;dhis-web-commons-security/login.action&quot;,
    method: &quot;POST&quot;,
    params: { j_username: &quot;portal&quot;, j_password: &quot;Portal123&quot; },
    success: setLinks
  });
});</screen>
    <para>Now let us have a look at the various options for the GIS plug-in. Two properies are required: <emphasis role="italic">el</emphasis> and <emphasis role="italic">url</emphasis> (please refer to the table below). Now, if you want to refer to pre-defined charts already made inside DHIS it is sufficient to provide the additional <emphasis role="italic">id</emphasis> parameter. If you instead want to configure a chart dynamically you shoud omit the id parameter and provide <emphasis role="italic">mapViews</emphasis> (layers) instead. They should be configured with data dimensions inside a <emphasis role="italic">columns</emphasis> array (chart series), a <emphasis role="italic">rows</emphasis> array (chart categories) and optionally a <emphasis role="italic">filters</emphasis> array instead.</para>

    <para>A data dimension is defined as an object with a text property called <emphasis role="italic">dimension</emphasis>. This property accepts the following values: <emphasis role="italic">in</emphasis> (indicator), <emphasis role="italic">de</emphasis> (data element), <emphasis role="italic">ds</emphasis> (data set), <emphasis role="italic">dc</emphasis> (data element operand), <emphasis role="italic">pe</emphasis> (period), <emphasis role="italic">ou</emphasis> (organisation unit) or the id of any organisation unit group set or data element group set (can be found in the web api). The data dimension also has an array property called <emphasis role="italic">items</emphasis> which accepts objects with an <emphasis role="italic">id</emphasis> property.</para>

    <para>To sum up, if you want to have a layer with e.g. &quot;ANC 1 Coverage&quot; in your map you can make the following <emphasis role="italic">columns</emphasis> config:</para>

	<screen>columns: [{
  dimension: "in", // could be "in", "de", "ds", "dc", "pe", "ou" or any dimension id
  items: [{id: "Uvn6LCg7dVU"}], // the id of ANC 1 Coverage
}]</screen>

    <table>
      <title>Visualizer chart plug-in configuration</title>
      <tgroup cols="5">
        <thead>
          <row>
            <entry>
              <emphasis role="italic">Param</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Type</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Required</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Options (default first)</emphasis>
            </entry>
            <entry>
              <emphasis role="italic">Description</emphasis>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>el</entry>
            <entry>string</entry>
            <entry>Yes</entry>
            <entry/>
            <entry>Identifier of the HTML element to render the chart in your web page</entry>
          </row>
          <row>
            <entry>url</entry>
            <entry>string</entry>
            <entry>Yes</entry>
            <entry/>
            <entry>Base URL of the DHIS server</entry>
          </row>
          <row>
            <entry>id</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry/>
            <entry>Identifier of a pre-defined chart (favorite) in DHIS</entry>
          </row>
          <row>
            <entry>baseLayer</entry>
            <entry>string/boolean</entry>
            <entry>No</entry>
            <entry>'gs', 'googlestreets' | 'gh', 'googlehybrid' | 'osm', 'openstreetmap' | false, null, 'none', 'off'</entry>
            <entry>Show background map</entry>
          </row>
          <row>
            <entry>hideLegend</entry>
            <entry>boolean</entry>
            <entry>No</entry>
            <entry>false | true</entry>
            <entry>Hide legend panel</entry>
          </row>
          <row>
            <entry>mapViews</entry>
            <entry>array</entry>
            <entry>Yes (if no id provided)</entry>
            <entry/>
            <entry>Array of layers</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

	<para>If no id is provided you must add map view objects with the following config options:</para>

    <table>
	  <title>Map plug-in configuration</title>
      <tgroup cols="5">
        <tbody>
          <row>
            <entry>layer</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry>"thematic1" | "thematic2" | "thematic3" | "thematic4" | "boundary" | "facility" | </entry>
            <entry>The layer to which the map view content should be added</entry>
          </row>
          <row>
            <entry>columns</entry>
            <entry>array</entry>
            <entry>Yes</entry>
            <entry/>
            <entry>Indicator, data element, data operand or data set (only one will be used)</entry>
          </row>
          <row>
            <entry>rows</entry>
            <entry>array</entry>
            <entry>Yes</entry>
            <entry/>
            <entry>Organisation units (multiple allowed)</entry>
          </row>
          <row>
            <entry>filter</entry>
            <entry>array</entry>
            <entry>Yes</entry>
            <entry/>
            <entry>Period (only one will be used)</entry>
          </row>
          <row>
            <entry>classes</entry>
            <entry>integer</entry>
            <entry>No</entry>
            <entry>5 | 1-7</entry>
            <entry>The number of automatic legend classes</entry>
          </row>
          <row>
            <entry>method</entry>
            <entry>integer</entry>
            <entry>No</entry>
            <entry>2 | 3</entry>
            <entry>Legend calculation method where 2 = equal intervals and 3 = equal counts</entry>
          </row>
          <row>
            <entry>colorLow</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry>"ff0000" (red) | Any hex color</entry>
            <entry>The color representing the first automatic legend class</entry>
          </row>
          <row>
            <entry>colorHigh</entry>
            <entry>string</entry>
            <entry>No</entry>
            <entry>"00ff00" (green) | Any hex color</entry>
            <entry>The color representing the last automatic legend class</entry>
          </row>
          <row>
            <entry>radiusLow</entry>
            <entry>integer</entry>
            <entry>No</entry>
            <entry>5 | Any integer</entry>
            <entry>Only applies for facilities (points) - radius of the point with lowest value</entry>
          </row>
          <row>
            <entry>radiusHigh</entry>
            <entry>integer</entry>
            <entry>No</entry>
            <entry>15 | Any integer</entry>
            <entry>Only applies for facilities (points) - radius of the point with highest value</entry>
          </row>
          <row>
            <entry>opacity</entry>
            <entry>double</entry>
            <entry>No</entry>
            <entry>0.8 | 0 - 1</entry>
            <entry>Opacity/transparency of the layer content</entry>
          </row>
          <row>
            <entry>legendSet</entry>
            <entry>object</entry>
            <entry>No</entry>
            <entry/>
            <entry>Pre-defined legend set. Will override the automatic legend set.</entry>
          </row>
          <row>
            <entry>labels</entry>
            <entry>boolean/object</entry>
            <entry>No</entry>
            <entry>false | true | object properties: fontSize (integer), color (hex string), strong (boolean), italic (boolean)</entry>
            <entry>Show labels on the map</entry>
          </row>
          <row>
            <entry>width</entry>
            <entry>integer</entry>
            <entry>No</entry>
            <entry/>
            <entry>Width of map</entry>
          </row>
          <row>
            <entry>height</entry>
            <entry>integer</entry>
            <entry>No</entry>
            <entry/>
            <entry>Height of map</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>We continue by adding one pre-defined and one dynamically configured map to our HTML document. You can browse the list of available maps using the Web API here: <ulink url="http://apps.dhis2.org/demo/api/maps"/>.</para>
    <screen>function setLinks() {
  Ext.onReady(function() {
  var url = "http://apps.dhis2.org/demo/";

  GIS.plugin.getMap({
    url: url,
    el: "mapA1",
    id: "ytkZY3ChM6J"
  });

  GIS.plugin.getMap({
    url: url,
    el: "mapB1",
    mapViews: [{
      columns: [{dimension: 'in', items: [{id: 'Uvn6LCg7dVU'}]}], // data
      rows: [{dimension: 'ou', items: [{id: 'LEVEL-3'}, {id: 'ImspTQPwCqd'}]}], // organisation units
      filters: [{dimension: 'pe', items: [{id: 'LAST_3_MONTHS'}]}], // period
      classes: 7,
      colorLow: '02079c',
      colorHigh: 'e5ecff',
      opacity: 0.9
      legendSet: {id: 'fqs276KXCXi'} // Optional
    }]
  });
});
};</screen>
    <para>Finally we include some <emphasis role="italic">div</emphasis> elements in the body section of the HTML document with the identifiers referred to in the plug-in Javascript.</para>
    <screen>&lt;div id=&quot;mapA1&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;mapB1&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;
</screen>
    <para>To see a complete working example please visit <ulink url="http://apps.dhis2.org/portal/map.html"/>.</para>
  </section>
  <section>
    <title>Creating a chart carousel with the carousel plug-in</title>
    <para>The chart plug-in also makes it possible to create a chart carousel which for instance can be used to create an attractive front page on a Web portal. To use the carousel we need to import a few  files in the head section of our HTML page:</para>
    <screen>
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://dhis2-cdn.org/v213/ext/resources/css/ext-plugin-gray.css&quot; /&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://apps.dhis2.org/demo/dhis-web-commons/javascripts/ext-ux/carousel/css/carousel.css&quot; /&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://extjs-public.googlecode.com/svn/tags/extjs-4.0.7/release/ext-all.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://apps.dhis2.org/demo/dhis-web-commons/javascripts/ext-ux/carousel/Carousel.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://apps.dhis2.org/demo/dhis-web-commons/javascripts/plugin/plugin.js&quot;&gt;&lt;/script&gt;</screen>
    <para>The first file is the CSS stylesheet for the chart plug-in. The second file is the CSS stylesheet for the carousel widget. The third file is the Ext JavaScript framework which this plug-in depends on. The fourth file is the carousel plug-in JavaScript file. The fifth file is the chart plug-in JavaScript file. The paths in this example points at the DHIS 2 demo site, make sure you update them to point to your own DHIS 2 installation.</para>
    <para>Please refer to the section about the chart plug-in on how to do authentication.</para>
    <para>To create a chart carousel we will first render the charts we want to include in the carousel using the method described in the chart plug-in section. Then we create the chart carousel itself. The charts will be rendered into <emphasis role="italic">div</emphasis> elements which all have a CSS class called <emphasis role="italic">chart</emphasis>. In the carousel configuration we can then define a <emphasis role="italic">selector</emphasis> expression which refers to those div elements like this:</para>
    <screen>DHIS.getChart({ uid: &apos;R0DVGvXDUNP&apos;, el: &apos;chartA1&apos;, url: base });
DHIS.getChart({ uid: &apos;X0CPnV6uLjR&apos;, el: &apos;chartA2&apos;, url: base });
DHIS.getChart({ uid: &apos;j1gNXBgwKVm&apos;, el: &apos;chartA3&apos;, url: base });
DHIS.getChart({ uid: &apos;X7PqaXfevnL&apos;, el: &apos;chartA4&apos;, url: base });

new Ext.ux.carousel.Carousel( &apos;chartCarousel&apos;, {
  autoPlay: true,
  itemSelector: &apos;div.chart&apos;,
  interval: 5,
  showPlayButton: true
});</screen>
    <para>The first argument in the configuration is  the id of the div element in which you want to render the carousel. The <emphasis role="italic">autoPlay</emphasis> configuration option refers to whether we want the carousel to start when the user loads the Web page. The <emphasis role="italic">interval</emphasis> option defines how many seconds each chart should be displayed. The <emphasis role="italic">showPlayButton</emphasis> defines whether we want to render a button for the user to start and stop the carousel. Finally we need to insert the div elements in the body of the HTML document:</para>
    <screen>&lt;div id=&quot;chartCarousel&quot;&gt;

&lt;div id=&quot;chartA1&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chartA2&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chartA3&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;chartA4&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;</screen>
    <para>To see a complete working example please visit <ulink url="http://apps.dhis2.org/portal/carousel.html"/>.</para>
  </section>
  </section>
  <section>
    <title>Working with SQL views</title>
    <para>SQL views are useful for presenting certain data views externally, which may be more
      easily constructed with SQL than by combining the multiple objects of the Web API. As an
      example, lets assume we have been asked to provide a view of all organization units with their
      names, parent names, organization unit level and name, and the coordinates listed in the
      database. The view might look something like this: </para>
    <screen>SELECT ou.name as orgunit, par.name as parent, ou.coordinates, ous.level, oul.name from organisationunit ou
INNER JOIN _orgunitstructure ous ON ou.organisationunitid = ous.organisationunitid
INNER JOIN organisationunit par ON ou.parentid = par.organisationunitid
INNER JOIN orgunitlevel oul ON ous.level = oul.level
WHERE ou.coordinates is not null
ORDER BY oul.level, par.name, ou.name</screen>
    <para>We will use <command>curl</command> to first execute the view on the DHIS 2 server. This
      is essentially a materialization process, and ensures that we have the most recent data
      available through the SQL view when it is retrieved from the server. You can first look up the
      SQL view from the api/sqlViews resource, then POST using the following command:</para>
    <screen>curl &quot;http://apps.dhis2.org/demo/api/sqlViews/dI68mLkP1wN/execute&quot; -X POST -u admin:district -v</screen>
    <para>The next step in the process is the retrieval of the data.The basic structure of the URL is as follows</para>
    <screen>http://{server}/api/sqlViews/{id}/data(.csv)</screen>
    <para>The <parameter>{server}</parameter> parameter should be replaced with your own server. The
      next part of the URL <parameter>/api/sqlViews/</parameter> should be appended with the
      specific unique identifier (not the internal ID of the view). Append either
        <parameter>data</parameter> for XML data or <parameter>data.csv</parameter> for comma
      delimited values. As an example, the following command would retrieve XML data for the SQL
      view defined
      above.<screen>curl &quot;http://apps.dhis2.org/dev/api/sqlViews/dI68mLkP1wN/data.csv&quot; -u admin:district -v</screen></para>
    <para>You can do simple filtering on the columns in the result set by appending <emphasis role="italic">criteria</emphasis> query parameters to the URL, using the column names and
      filter values separated by columns as parameter values, on the following format:</para>
    <screen>/data?criteria=col1:value1&amp;criteria=col2:value2</screen>
    <para>As an example, to filter the SQL view result set above to only return organisation units
      at level 4 you can use the following URL:</para>
    <screen>http://apps.dhis2.org/dev/api/sqlViews/dI68mLkP1wN/data.csv?level:4</screen>
  </section>
  <section>
    <title>Dashboard</title>
    <para>The dashboard is designed to give you an overview of multiple analytical items like maps,
      charts, pivot tables and reports which together can provide a comprehensive overview of your
      data. Dashboards are available in the Web API through the <emphasis role="italic"
        >dashboards</emphasis> resource. A dashboard contains a list of dashboard <emphasis
        role="italic">items</emphasis>. An item can represent a single resource, like a chart, map
      or report table, or represent a list of links to analytical resources, like reports,
      resources, tabular reports and users. A dashboard item can contain up to eight links.
      Typically, a dashboard client could choose to visualize the single-object items directly in a
      user interface, while rendering the multi-object items as clickable links. </para>
    <section>
    <title>Browsing dashboards</title>
    <para>To get a list of your dashboards with basic information including identifier, name and
        link in JSON format you can make a <emphasis role="italic">GET</emphasis> request to the
        following URL:</para>
    <screen>/api/dashboards.json</screen>
    <para>The dashboards resource will provide a list of dashboards. Remember that the dashboard
        object is shared so the list will be affected by the currently authenticated user. You can
        retrieve more information about a specific dashboard by following its link, similar to
        this:</para>
    <screen>api/dashboards/vQFhmLJU5sK.json</screen>
    <para>A dashboard contains information like name and creation date and an array of dashboard
        items. The response in JSON format will look something like this (access and user attributes
        omitted for
        brevity):<screen>{
  "name": "Antenatal Care",
  "created": "2013-09-08T20:55:58.060+0000",
  "items": [{
    "created": "2013-09-09T18:28:37.813+0000",
    "chart": {
      "name": "ANC: Visits by facility type",
      "created": "2013-05-30T09:58:42.023+0000",
      "href": "http://apps.dhis2.org/demo/api/charts/iRCGbznvyG8",
      "id": "iRCGbznvyG8"
    },
    "map": null,
    "reportTable": null,
    "type": "chart",
    "contentCount": 1,
    "id": "FeQp4qJ63M8"
  },
  {
    "created": "2013-09-08T21:00:07.266+0000",
    "user": null,
    "chart": null,
    "map": null,
    "reportTable": null,
    "reports": [{
      "name": "ANC: 1st Visit Cumulative Chart",
      "created": "2012-11-13T13:49:45.007+0000",
      "href": "http://apps.dhis2.org/demo/api/reports/Kvg1AhYHM8Q",
      "id": "Kvg1AhYHM8Q"
    }, {
      "name": "ANC: Coverages This Year",
      "created": "2012-11-13T13:52:01.630+0000",
      "href": "http://apps.dhis2.org/demo/api/reports/qYVNH1wkZR0",
      "id": "qYVNH1wkZR0"
    }],
    "type": "reports",
    "contentCount": 2,
    "id": "AWUUWkPzops"
  }]
}</screen></para>
  </section>
    <section>
      <title>Searching dashboards</title>
      <para>When setting a dashboard it is convenient from a consumer point of view to be able to
        search for various analytical resources using the <emphasis role="italic"
          >/dashboards/q</emphasis> resource. This resource lets you search for matches on the name
        property of the following objects: charts, maps, report tables, users, reports and
        resources. You can do a search by making a <emphasis role="italic">GET</emphasis> request on
        the following resource URL pattern, where my-query should be replaced by the preferred
        search query:</para>
      <screen>api/dashboards/q/my-query.json</screen>
      <para>JSON and XML response formats are currently supported. The response in JSON format will
        contain references to matching resources and counts of how many matches were found in total
        and for each type of resource. It will look similar to this:</para>
      <screen>{
    "charts": [{
        "name": "ANC: 1-3 dropout rate Yearly",
        "id": "LW0O27b7TdD"
    }, {
        "name": "ANC: 1 and 3 coverage Yearly",
        "id": "UlfTKWZWV4u"
    }, {
        "name": "ANC: 1st and 3rd trends Monthly",
        "id": "gnROK20DfAA"
    }],
    "maps": [{
        "name": "ANC: 1st visit at facility (fixed) 2013",
        "id": "YOEGBvxjAY0"
    }, {
        "name": "ANC: 3rd visit coverage 2012 by district",
        "id": "ytkZY3ChM6J"
    }],
    "reportTables": [{
        "name": "ANC: ANC 1 Visits Cumulative Numbers",
        "id": "tWg9OiyV7mu"
    }],
    "reports": [{
        "name": "ANC: 1st Visit Cumulative Chart",
        "id": "Kvg1AhYHM8Q"
    }, {
        "name": "ANC: Coverages This Year",
        "id": "qYVNH1wkZR0"
    }],
    "searchCount": 8,
    "chartCount": 3,
    "mapCount": 2,
    "reportTableCount": 1,
    "reportCount": 2,
    "userCount": 0,
    "patientTabularReportCount": 0,
    "resourceCount": 0
}</screen>
    </section>
    <section>
      <title>Creating, updating and removing dashboards</title>
      <para>Creating, updating and deleting dashboards follow standard REST semantics. In order to
        create a new dashboard you can make a <emphasis role="italic">POST</emphasis> request to the
          <emphasis role="italic">/api/dashboards</emphasis> resource. From a consumer perspective
        it might be convenient to first create a dashboard and later add items to it. JSON and XML
        formats are supported for the request payload. To create a dashboard with the name "My
        dashboard" you can use a payload in JSON like this:</para>
      <screen>{
  "name": "My dashboard"
}</screen>
      <para>To update, e.g. rename, a dashboard, you can make a <emphasis role="italic"
          >PUT</emphasis> request with a similar request payload the same api/dasboards
        resource.</para>
      <para>To remove a dashboard, you can make a <emphasis role="italic">DELETE</emphasis> request
        to the specific dashboard resource similar to this:</para>
      <screen>api/dashboards/vQFhmLJU5sK</screen>
    </section>
    <section>
      <title>Adding, moving and removing dashboard items and content</title>
      <para>In order to add dashboard items a consumer can use the <emphasis role="italic"
          >/api/dashboards/&lt;dashboard-id>/items/content</emphasis> resource, where
        &lt;dashboard-id> should be replaced by the relevant dashboard identifier. The request must
        use the <emphasis role="italic">POST</emphasis> method. The URL syntax and parameters are
        described in detail in the following table.</para>
      <table frame="all">
        <title>Items content parameters</title>
        <tgroup cols="3">
          <colspec colname="c1" colnum="1" colwidth="1*"/>
          <colspec colname="c2" colnum="2" colwidth="2.32*"/>
          <colspec colname="c3" colnum="3" colwidth="1.86*"/>
          <thead>
            <row>
              <entry>Query parameter</entry>
              <entry>Description</entry>
              <entry>Options</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>type</entry>
              <entry>Type of the resource to be represented by the dashboard item</entry>
              <entry>chart | map | reportTable | users | reports | reportTables | resources |
                patientTabularReports</entry>
            </row>
            <row>
              <entry>id</entry>
              <entry>Identifier of the resource to be represented by the dashboard item</entry>
              <entry>Resource identifier</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>A <emphasis role="italic">POST</emphasis> request URL for adding a chart to a specific
        dashboard could look like this, where the last id query parameter value is the chart
        resource identifier:</para>
      <screen>/api/dashboards/vQFhmLJU5sK/items/content?type=chart&amp;id=LW0O27b7TdD</screen>
      <para>When adding resource of type map, chart and report table, the API will create and add a
        new item to the dashboard. When adding a resource of type users, reports, report tables and
        resources, the API will try to add the resource to an existing dashboard item of the same
        type. If no item of same type or no item of same type with less than eight resources
        associated with it exists, the API will create a new dashboard item and the resource to
        it.</para>
      <para>In order to move a dashboard item to a new position within the list of items in a
        dashboard, a consumer can make a <emphasis role="italic">POST</emphasis> request to the
        following resource URL, where &lt;dashboard-id> should be replaced by the identifier of the
        dashboard, &lt;item-id> should be replaced by the identifier of the dashboard item and
        &lt;index> should be replaced by the new position of the item in the dashboard, where the
        index is
        zero-based:<screen>/api/dashboards/&lt;dashboard-id>/items/&lt;item-id>/position/&lt;index></screen></para>
      <para>To remove a dashboard item completely from a specific dashboard a consumer can make a
          <emphasis role="italic">DELETE</emphasis> request to the below resource URL, where
        &lt;dashboard-id> should be replaced by the identifier of the dashboard and &lt;item-id>
        should be replaced by the identifier of the dashboard item. The dashboard item identifiers
        can be retrieved through a GET request to the dashboard resource URL.</para>
      <screen>/api/dashboards/&lt;dashboard-id>/items/&lt;item-id></screen>
      <para>To remove a specific content resource within a dashboard item a consumer can make a
          <emphasis role="italic">DELETE</emphasis> request to the below resource URL, where
        &lt;content-resource-id> should be replaced by the identifier of a resource associated with
        the dasboard item; e.g. the identifier of a report or a user. For instance, this can be used
        to remove a single report from a dashboard item of type reports, as opposed to removing the
        dashboard item completely:</para>
      <screen>/api/dashboards/&lt;dashboard-id>/items/&lt;item-id>/content/&lt;content-resource-id></screen>
    </section>
  </section>
  <section>
    <title>Analytics</title>
    <para>To access analytical, aggregated data in DHIS 2 you can work with the <emphasis role="italic">analytics</emphasis> resource. The analytics resource is powerful as it lets
      you query and retrieve data aggregated along all available data dimensions. For instance, you
      can ask the analytics resource to provide the aggregated data values for a set of data
      elements, periods and organisation units. Also, you can retrieve the aggregated data for a
      combination of any number of dimensions based on data elements and organisation unit group
      sets.</para>
    <para>DHIS 2 features a multi-dimensional data model with several fixed and dynamic data
      dimensions. The fixed dimensions are the data element, period (time) and organisation unit
      dimension. You can dynamically add dimensions through categories, data element group sets and
      organisation unit group sets. The table below displays the available data dimensions in DHIS
      2. Each data dimension has a corresponding <emphasis role="italic">dimension
        identifier</emphasis>, and each dimension can have a set of <emphasis role="italic">dimension items</emphasis>:</para>
    <itemizedlist>
      <listitem>
        <table frame="all">
          <title>Dimensions and dimension items</title>
          <tgroup cols="3">
            <colspec colname="c1" colnum="1" colwidth="3.17*"/>
            <colspec colname="c2" colnum="2" colwidth="1*"/>
            <colspec colname="newCol3" colnum="3" colwidth="4.03*"/>
            <thead>
              <row>
                <entry><emphasis role="italic">Dimension</emphasis></entry>
                <entry><emphasis role="italic">Dimension id</emphasis></entry>
                <entry><emphasis role="italic">Dimension items</emphasis></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Data elements, indicators and data set reporting rates</entry>
                <entry>dx</entry>
                <entry>Data elements, indicators and data set identifiers</entry>
              </row>
              <row>
                <entry>Periods (time)</entry>
                <entry>pe</entry>
                <entry>ISO periods and relative periods, see "date and period format"</entry>
              </row>
              <row>
                <entry>Organisation unit hierarchy</entry>
                <entry>ou</entry>
                <entry>Organisation unit identifiers, and keywords USER_ORGUNIT,
                  USER_ORGUNIT_CHILDREN, USER_ORGUNIT_GRANDCHILDREN, LEVEL-&lt;level> and
                  OU_GROUP-&lt;group-id></entry>
              </row>
              <row>
                <entry>Category option combinations</entry>
                <entry>co</entry>
                <entry>Not possible to define dimension items - all relevant items are
                  returned</entry>
              </row>
              <row>
                <entry>Data element group sets</entry>
                <entry>&lt;group set id></entry>
                <entry>Data element group identifiers (omit to get all items)</entry>
              </row>
              <row>
                <entry>Organisation unit group sets</entry>
                <entry>&lt;group set id></entry>
                <entry>Organisation unit group identifiers (omit to get all items)</entry>
              </row>
              <row>
                <entry>Categories</entry>
                <entry>&lt;category id></entry>
                <entry>Category option identifiers (omit to get all items)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </listitem>
    </itemizedlist>
    <para>It is not necessary to be aware of which objects are used for the various dynamic
      dimensions when designing analytics queries. You can get a complete list of dynamic dimensions
      by visiting this URL in the Web API:</para>
    <screen>api/dimensions</screen>
    <para>The base URL to the analytics resource is <emphasis role="italic">api/analytics</emphasis>. To request specific dimensions and dimension items you can use a
      query string on the following format, where <emphasis role="italic">dim-id</emphasis> and
        <emphasis role="italic">dim-item</emphasis> should be substituted with real values:</para>
    <screen>api/analytics?dimension=dim-id:dim-item;dim-item&amp;dimension=dim-id:dim-item;dim-item</screen>
    <para>As illustrated above, the dimension identifier is followed by a colon while the dimension
      items are separated by semi-colons. As an example, a query for two data elements, two periods
      and two organisation units can be done with the following URL:</para>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&amp;dimension=pe:2012Q1;2012Q2&amp;dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw</screen>
    <para>To query for data broken down by category option combinations instead of data element
      totals you can include the category dimension in the query string, for instance like
      this:</para>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&amp;dimension=co&amp;dimension=pe:201201&amp;dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw</screen>
    <para>To query for organisation unit group sets and data elements you can use the following URL
      - notice how the group set identifier is used as dimension identifier and the groups as
      dimension items:</para>
    <screen>api/analytics?dimension=Bpx0589u8y0:oRVt7g429ZO;MAs88nJc9nL&amp;dimension=pe:2012&amp;dimension=ou:ImspTQPwCqd</screen>
    <para>To query for data elements and categories you can use this URL - use the category
      identifier as dimension identifier and the category options as dimension items:</para>
    <screen>api/analytics?dimension=dx:s46m5MS0hxu;fClA2Erf6IO&amp;dimension=pe:2012&amp;dimension=YNZyaJHiHYq:btOyqprQ9e8;GEqzEKCHoGA&amp;filter=ou:ImspTQPwCqd</screen>
    <para>To query using relative periods and organisation units associated with the current user
      you can use a URL like this:</para>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&amp;dimension=pe:LAST_12_MONTHS&amp;dimension=ou:USER_ORGUNIT</screen>
    <para>When selecting organisation units for a dimension you can select an entire level
      optionally constrained by any number of boundary organisation units with the LEVEL-&lt;level>
      syntax. Boundary refers to a top node in a sub-hierarchy, meaning that all organisation units
      at the given level below the given boundary organisation unit in the hierarchy will be
      included in the response, and is provided as regular organisation unit dimension items:</para>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2012&amp;dimension=ou:LEVEL-3</screen>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2012&amp;dimension=ou:LEVEL-3;LEVEL-4;O6uvpzGd5pu;lc3eMKXaEf</screen>
    <para>When selecting organisation units you can also select all organisation units in an
      organisation unit group to be included as dimension items using the OU_GROUP-&lt;id> syntax.
      The organisation units in the groups can optionally be constrained by any number of boundary
      organisation units. Both the level and the group items can be repeated any number of
      times:</para>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2012&amp;dimension=ou:OU_GROUP-w0gFTTmsUcF;O6uvpzGd5pu</screen>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2012&amp;dimension=ou:OU_GROUP-w0gFTTmsUcF;OU_GROUP-EYbopBOJWsW;O6uvpzGd5pu;lc3eMKXaEf</screen>
    <para>A few things to be aware of when using the analytics resource are listed below.</para>
    <itemizedlist>
      <listitem>
        <para>Data elements, indicator and data sets are part of a common data dimension, identified
          as "dx". This means that you can use any of data elements, indicators and data set
          identifiers together with the "dx" dimension identifier in a query.</para>
      </listitem>
      <listitem>
        <para>For the data element group set and organisation unit group set dimensions, all
          dimension items will be used in the query if no dimension items are given for the
          dimension.</para>
      </listitem>
      <listitem>
        <para>For the period dimension, the dimension items are ISO period identifiers and/or
          relative periods. Please refer to the section above called "Date and period format" for
          the period format and available relative periods.</para>
      </listitem>
      <listitem>
        <para>For the organisation unit dimension you can specify the items to be the organisation
          unit or sub-units of the organisation unit associated with the user currently
          authenticated for the request using they keys USER_ORGUNIT or USER_ORGUNIT_CHILDREN as
          items, respectively. You can also specify organisation unit identifiers directly, or a
          combination of both.</para>
      </listitem>
      <listitem>
        <para>For the organisation unit dimension you can specify the organisation hierarchy level
          and the boundary unit to use for the request on the format
          LEVEL-&lt;level>-&lt;boundary-id>; as an example LEVEL-3-ImspTQPwCqd implies all
          organisation units below the given boundary unit at level 3 in the hierarchy.</para>
      </listitem>
      <listitem>
        <para>For the organisation unit dimension the dimension items are the organisation units and
          their sub-hierarchy - data will be aggregated for all organisation units below the given
          organisation unit in the hierarchy.</para>
      </listitem>
      <listitem>
        <para>You cannot specify dimension items for the category option combination dimension.
          Instead the response will contain the items which are linked to the data values.</para>
      </listitem>
    </itemizedlist>
    <section>
      <title>Request query parameters</title>
    <para>The analytics resource lets you specify a range of query parameters:<table frame="all">
          <title>Query parameters</title>
          <tgroup cols="4">
            <colspec colname="c1" colnum="1" colwidth="2.44*"/>
            <colspec colname="newCol2" colnum="2" colwidth="1*"/>
            <colspec colname="c2" colnum="3" colwidth="3.67*"/>
            <colspec colname="c3" colnum="4" colwidth="2.65*"/>
            <thead>
              <row>
                <entry><emphasis role="italic">Query parameter</emphasis></entry>
                <entry><emphasis role="italic">Required</emphasis></entry>
                <entry><emphasis role="italic">Description</emphasis></entry>
                <entry><emphasis role="italic">Options</emphasis></entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>dimension</entry>
                <entry>Yes</entry>
                <entry>Dimensions to be retrieved, repeated for each</entry>
                <entry>Any dimension</entry>
              </row>
              <row>
                <entry>filter</entry>
                <entry>No</entry>
                <entry>Filters to apply to the query, repeated for each</entry>
                <entry>Any dimension</entry>
              </row>
              <row>
                <entry>aggregationType</entry>
                <entry>No</entry>
                <entry>Aggregation type to use in the aggregation process</entry>
                <entry>SUM | AVERAGE_INT |  AVERAGE_INT_DISAGGREGATION |  AVERAGE_BOOL |
                  COUNT</entry>
              </row>
              <row>
                <entry>measureCriteria</entry>
                <entry>No</entry>
                <entry>Filters for the data/measures</entry>
                <entry>EQ | GT | GE | LT | LE</entry>
              </row>
              <row>
                <entry>skipMeta</entry>
                <entry>No</entry>
                <entry>Exclude the meta data part of response (improves performance)</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>skipRounding</entry>
                <entry>No</entry>
                <entry>Skip rounding of data values, i.e. provide full precision</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>hierarchyMeta</entry>
                <entry>No</entry>
                <entry>Include names of organisation unit ancestors and hierarchy paths of
                  organisation units in the meta-data</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>ignoreLimit</entry>
                <entry>No</entry>
                <entry>Ignore limit on max 50 000 records in response - use with care</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>tableLayout</entry>
                <entry>No</entry>
                <entry>Use plain data source or table layout for response</entry>
                <entry>false | true</entry>
              </row>
              <row>
                <entry>columns</entry>
                <entry>No</entry>
                <entry>Dimensions to use as columns for table layout</entry>
                <entry>Any dimension (must be query dimension)</entry>
              </row>
              <row>
                <entry>rows</entry>
                <entry>No</entry>
                <entry>Dimensions to use as rows for table layout</entry>
                <entry>Any dimension (must be query dimension)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>The <emphasis role="italic">dimension</emphasis> query parameter defines which
        dimensions should be included in the analytics query. Any number of dimensions can be
        specified. The dimension parameter should be repeated for each dimension to include in the
        query response. The query response can potentially contain aggregated values for all
        combinations of the specified dimension items.</para>
    <para>The <emphasis role="italic">filter</emphasis> parameter defines which dimensions should be
        used as filters for the data retrieved in the analytics query. Any number of filters can be
        specified. The filter parameter should be repeated for each filter to use in the query. A
        filter differs from a dimension in that the filter dimensions will not be part of the query
        response content, and that the aggregated values in the response will be collapsed on the
        filter dimensions. In other words, the data in the response will be aggregated on the filter
        dimensions, but the filters will not be included as dimensions in the actual response. As an
        example, to query for certain data elements filtered by the periods and organisation units
        you can use the following URL:</para>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&amp;filter=pe:2012Q1;2012Q2&amp;filter=ou:O6uvpzGd5pu;lc3eMKXaEfw</screen>
    <para>The <emphasis role="italic">aggregationType</emphasis> query parameter lets you define
        which aggregation operator should be used for the query. By default the aggregation operator
        defined for data elements included in the query will be used. If your query does not contain
        any data elements, but does include data element groups, the aggregation operator of the
        first data element in the first group will be used. The order of groups and data elements is
        undefined. This query parameter allows you to override the default and specify a specific
        aggregation operator. As an example you can set the aggregation operator to "count" with the
        following URL:</para>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2012Q1&amp;dimension=ou:O6uvpzGd5pu&amp;aggregationType=COUNT</screen>
    <para>The <emphasis role="italic">measureCriteria</emphasis> query parameter lets you filter out
      ranges of data records to return. You can instruct the system to return only records where the
      aggregated data value is equal, greater than, greater or equal, less than or less or equal to
      certain values. You can specify any number of criteria on the following format, where
        <emphasis role="italic">critieria</emphasis> and <emphasis role="italic">value</emphasis>
      should be substituted with real values:</para>
    <screen>api/analytics?measureCriteria=criteria:value;criteria:value</screen>
    <para>As an example, the following query will return only records where the data value is
        greater or equal to 6500 and less than 33000:</para>
    <screen>api/analytics?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&amp;dimension=pe:2012&amp;dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw&amp;measureCriteria=GE:6500;LT:33000</screen>
      <para>In order to have the analytics resource generate the data in the shape of a ready-made
        table, you can provide the <emphasis role="italic">tableLayout</emphasis> parameter with
        true as value. Instead of generating a plain, normalized data source, the analytics resource
        will now generate the data in table layout. You can use the <emphasis role="italic">columns</emphasis> and <emphasis role="italic">rows</emphasis> parameters with dimension
        identifiers separated by semi-colons as values to indicate which ones to use as table
        columns and rows. The column and rows dimensions must be present as a data dimension in the
        query (not a filter). Such a request can look like this:</para>
      <screen>api/analytics.html?dimension=dx:fbfJHSPpUQD;cYeuwXTCPkU&amp;dimension=pe:2012Q1;2012Q2&amp;dimension=ou:O6uvpzGd5pu&amp;tableLayout=true&amp;columns=dx;ou&amp;rows=pe</screen>
    </section>
    <section>
      <title>Response formats</title>
      <para>The analytics response containing aggregate data can be returned in various
        representation formats. As usual, you can indicate interest in a specific format by
        appending a file extension to the URL, through the <emphasis role="italic">Accept</emphasis>
        HTTP header or through the <emphasis role="italic">format</emphasis> query parameter. The
        default format is JSON. The available formats and content-types are listed below.</para>
      <itemizedlist>
        <listitem>
          <para>json (application/json)</para>
        </listitem>
        <listitem>
          <para>jsonp (application/javascript)</para>
        </listitem>
        <listitem>
          <para>xml (application/xml)</para>
        </listitem>
        <listitem>
          <para>csv (application/csv)</para>
        </listitem>
        <listitem>
          <para>html (text/html)</para>
        </listitem>
        <listitem>
          <para>xls (application/vnd.ms-excel)</para>
        </listitem>
      </itemizedlist>
      <para>As an example, to request an analytics response in XML format you can use the following
        URL:</para>
      <screen>api/analytics.xml?dimension=dx:fbfJHSPpUQD&amp;dimension=pe:2012&amp;dimension=ou:O6uvpzGd5pu;lc3eMKXaEfw</screen>
      <para>The analytics responses must be retrieved using the HTTP <emphasis role="italic">GET</emphasis> method. This allows for direct linking to analytics responses from Web
        pages as well as other HTTP-enabled clients. To do functional testing we can use the cURL
        library. By executing this command against the demo database you will get an analytics
        response in JSON format:</para>
      <screen>curl "apps.dhis2.org/demo/api/analytics.json?dimension=dx:eTDtyyaSA7f;FbKK4ofIv5R&amp;dimension=pe:2012Q1;2012Q2&amp;filter=ou:ImspTQPwCqd" -u admin:district</screen>
      <para>The JSON response will look like this:</para>
      <screen>{
    "headers": [
        {
            "name": "dx",
            "column": "Data",
            "meta": true,
            "type": "java.lang.String"
        },
        {
            "name": "pe",
            "column": "Period",
            "meta": true,
            "type": "java.lang.String"
        },
        {
            "name": "value",
            "column": "Value",
            "meta": false,
            "type": "java.lang.Double"
        }
    ],
    "height": 4,
    "metaData": {
        "pe": [
            "2012Q1",
            "2012Q2"
        ],
        "ou": [
            "ImspTQPwCqd"
        ],
        "names": {
            "2012Q1": "Jan to Mar 2012",
            "2012Q2": "Apr to Jun 2012",
            "FbKK4ofIv5R": "Measles Coverage &lt;1 y",
            "ImspTQPwCqd": "Sierra Leone",
            "eTDtyyaSA7f": "Fully Immunized Coverage"
        }
    },
    "rows": [
        [
            "eTDtyyaSA7f",
            "2012Q2",
            "81.1"
        ],
        [
            "eTDtyyaSA7f",
            "2012Q1",
            "74.7"
        ],
        [
            "FbKK4ofIv5R",
            "2012Q2",
            "88.9"
        ],
        [
            "FbKK4ofIv5R",
            "2012Q1",
            "84.0"
        ]
    ],
    "width": 3
}
</screen>
      <para>The response represents a table of dimensional data. The <emphasis role="italic">headers</emphasis> array gives an overview of which columns are included in the table and
        what the columns contain. The <emphasis role="italic">column</emphasis> property shows the
        column dimension identifier, or if the column contains measures, the word "Value". The
          <emphasis role="italic">meta</emphasis> property is <emphasis role="italic">true</emphasis> if the column contains dimension items or <emphasis role="italic">false</emphasis> if the column contains a measure (aggregated data values). The <emphasis role="italic">name</emphasis> property is similar to the column property, except it
        displays "value" in case the column contains a measure. The <emphasis role="italic">type</emphasis> property indicates the Java class type of the column values.</para>
      <para>The <emphasis role="italic">height</emphasis> and <emphasis role="italic">width</emphasis> properties indicate how many data columns and rows are contained in the
        response, respectively.</para>
      <para>The <emphasis role="italic">metaData periods</emphasis> property contains a unique,
        ordered array of the periods included in the response. The <emphasis role="italic">metaData
          ou</emphasis> property contains an array of the identifiers of organisation units included
        in the response. The <emphasis role="italic">metaData names</emphasis> property contains a
        mapping between the identifiers used in the data response and the names of the objects they
        represent. It can be used by clients to substitute the identifiers within the data response
        with names in order to give a more meaningful view of the data table.</para>
      <para>The <emphasis role="italic">rows</emphasis> array contains the dimensional data table.
        It contains columns with dimension items (object or period identifiers) and a column with
        aggregated data values. The example response above has a data/indicator column, a period
        column and a value column. The first column contains indicator identifiers, the second
        contains ISO period identifiers and the third contains aggregeted data values.</para>
    </section>
    <section>
      <title>Constraints</title>
      <para>There are several constraints on the input you can provide to the analytics
        resource.</para>
      <itemizedlist>
        <listitem>
          <para>At least one dimension must be specified in a query.</para>
        </listitem>
        <listitem>
          <para>Dimensions cannot be specified as dimension and filter simultaneously.</para>
        </listitem>
        <listitem>
          <para>At least one period must be specified as dimension or filter.</para>
        </listitem>
        <listitem>
          <para>Indicators, data sets and categories cannot be specified as filters.</para>
        </listitem>
        <listitem>
          <para>Data element group sets cannot be specified together with data sets.</para>
        </listitem>
        <listitem>
          <para>Categories can only be specified together with data elements, not indicators or data
            sets.</para>
        </listitem>
        <listitem>
          <para>A dimension cannot be specified more than once.</para>
        </listitem>
        <listitem>
          <para>Fixed dimensions ("dx", "pe", "ou") must have at least one option if included in a
            query.</para>
        </listitem>
        <listitem>
          <para>A table cannot potentially contain more than 5000 cells for performance
            reasons.</para>
        </listitem>
      </itemizedlist>
      <para>When a query request violates any of these constraints the server will return a response
        with status code 409 and content-type "text/plain" together with a textual description of
        the problem.</para>
    </section>
  </section>
  <section>
    <title>Event analytics</title>
    <para>The event analytics API lets you query <emphasis role="italic">events</emphasis> captured
      in DHIS 2. This resource lets you retrieve events based on a program and optionally a program
      stage, and lets you retrieve and filter events on any event dimensions. Event dimensions
      include data elements, person attributes, person identifiers, organisation units and periods.
      The query analytics resource will simply return events matching a set of criteria and does not
      perform any aggregation. The event dimensions are listed in the table below.</para>
    <table frame="all">
      <title>Event dimensions</title>
      <tgroup cols="3">
        <colspec colname="c1" colnum="1" colwidth="2.49*"/>
        <colspec colname="c2" colnum="2" colwidth="1*"/>
        <colspec colname="c3" colnum="3" colwidth="5.42*"/>
        <thead>
          <row>
            <entry>Dimension</entry>
            <entry>Dimension id</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Data elements</entry>
            <entry>&lt;id></entry>
            <entry>Data element identifiers</entry>
          </row>
          <row>
            <entry>Person attributes</entry>
            <entry>&lt;id>, GENDER, ISDEAD</entry>
            <entry>Person attribute identifiers and the fixed person attributes GENDER and
              ISDEAD</entry>
          </row>
          <row>
            <entry>Person identifiers</entry>
            <entry>&lt;id></entry>
            <entry>Person identifier identifiers</entry>
          </row>
          <row>
            <entry>Organisation units</entry>
            <entry>ou</entry>
            <entry>Organisation unit identifiers</entry>
          </row>
          <row>
            <entry>Periods</entry>
            <entry>pe</entry>
            <entry>ISO periods and relative periods, see "date and period format"</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <section>
    <title>Request query parameters</title>
    <para>The analytics event API let you specify a range of query parameters.</para>
    <table frame="all">
	<title>Query parameters for both event query and aggregate analytics</title>
      <tgroup cols="4">
        <colspec colname="c1" colnum="1" colwidth="1.8*"/>
        <colspec colname="c2" colnum="2" colwidth="1*"/>
        <colspec colname="c3" colnum="3" colwidth="4.3*"/>
        <colspec colname="c4" colnum="4" colwidth="1.7*"/>
        <thead>
          <row>
            <entry><emphasis role="italic">Query parameter</emphasis></entry>
            <entry><emphasis role="italic">Required</emphasis></entry>
            <entry><emphasis role="italic">Description</emphasis></entry>
            <entry><emphasis role="italic">Options</emphasis></entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>program</entry>
            <entry>Yes</entry>
            <entry>Program identifier.</entry>
            <entry>Any program identifier</entry>
          </row>
          <row>
            <entry>stage</entry>
            <entry>No</entry>
            <entry>Program stage identifier.</entry>
            <entry>Any program stage identifier</entry>
          </row>
          <row>
            <entry>startDate</entry>
            <entry>Yes</entry>
            <entry>Start date for events.</entry>
            <entry>Date in yyyy-MM-dd format</entry>
          </row>
          <row>
            <entry>endDate</entry>
            <entry>Yes</entry>
            <entry>End date for events.</entry>
            <entry>Date in yyyy-MM-dd format</entry>
          </row>
          <row>
            <entry>dimension</entry>
            <entry>Yes</entry>
            <entry>Dimension identifier including data elements, person attributes, person
                identifiers, periods and organisation units. Parameter can be repeated any number of
                times. Item filtes can be applied to a dimension on the format
                &lt;item-id>:&lt;operator>:&lt;filter>. Filter values are case-insensitive.</entry>
            <entry>Operators can be EQ | GT | GE | LT | LE | NE | LIKE | IN</entry>
          </row>
            <row>
              <entry>filter</entry>
              <entry>No</entry>
              <entry>Dimension identifier including data elements, person attributes, person
                identifiers, periods and organisation units. Parameter can be repeated any number of
                times. Item filters can be applied to a dimension on the format
                &lt;item-id>:&lt;operator>:&lt;filter>. Filter values are case-insensitive.</entry>
              <entry/>
            </row>
            <row>
              <entry>hierarchyMeta</entry>
              <entry>No</entry>
              <entry>Include names of organisation unit ancestors and hierarchy paths of
                organisation units in the meta-data</entry>
              <entry>false | true</entry>
            </row>
        </tbody>
      </tgroup>
    </table>
      <table frame="all">
        <title>Query parameters for event query analytics only</title>
        <tgroup cols="4">
          <colspec colname="c1" colnum="1" colwidth="1.8*"/>
          <colspec colname="c2" colnum="2" colwidth="1*"/>
          <colspec colname="c3" colnum="3" colwidth="4.3*"/>
          <colspec colname="c4" colnum="4" colwidth="1.7*"/>
          <thead>
            <row>
              <entry><emphasis role="italic">Query parameter</emphasis></entry>
              <entry><emphasis role="italic">Required</emphasis></entry>
              <entry><emphasis role="italic">Description</emphasis></entry>
              <entry><emphasis role="italic">Options</emphasis></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ouMode</entry>
              <entry>No</entry>
              <entry>The mode of selecting organisation units. Default is DESCENDANTS, meaning all
                sub units in the hierarchy. CHILDREN refers to immediate children in the hierarchy;
                SELECTED refers to the selected organisation units only.</entry>
              <entry>DESCENDANTS, CHILDREN, SELECTED</entry>
            </row>
            <row>
              <entry>asc</entry>
              <entry>No</entry>
              <entry>Dimensions to be sorted ascending, can reference event date, org unit name and
                code and any item identifiers.</entry>
              <entry>EVENTDATE | OUNAME | OUCODE | item identifier</entry>
            </row>
            <row>
              <entry>desc</entry>
              <entry>No</entry>
              <entry>Dimensions to be sorted descending, can reference event date, org unit name and
                code and any item identifiers.</entry>
              <entry>EVENTDATE | OUNAME | OUCODE | item identifier</entry>
            </row>
            <row>
              <entry>page</entry>
              <entry>No</entry>
              <entry>The page number. Page size of 50 will be used if no page size parameter is
                specified.</entry>
              <entry>Numeric positive value</entry>
            </row>
            <row>
              <entry>pageSize</entry>
              <entry>No</entry>
              <entry>The page size. Unlimited if not specified.</entry>
              <entry>Numeric zero or positive value</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table frame="all">
        <title>Query parameters for aggregate event analytics only</title>
        <tgroup cols="4">
          <colspec colname="c1" colnum="1" colwidth="1.8*"/>
          <colspec colname="c2" colnum="2" colwidth="1*"/>
          <colspec colname="c3" colnum="3" colwidth="4.3*"/>
          <colspec colname="c4" colnum="4" colwidth="1.7*"/>
          <thead>
            <row>
              <entry><emphasis role="italic">Query parameter</emphasis></entry>
              <entry><emphasis role="italic">Required</emphasis></entry>
              <entry><emphasis role="italic">Description</emphasis></entry>
              <entry><emphasis role="italic">Options</emphasis></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>limit</entry>
              <entry>No</entry>
              <entry>The maximum number of records to return</entry>
              <entry>Numeric positive value</entry>
            </row>
            <row>
              <entry>sortOrder</entry>
              <entry>No</entry>
              <entry>Sort the records on the value column in ascending or descending order.</entry>
              <entry>ASC | DESC</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section>
	<title>Event query analytics</title>
    <para>The <emphasis role="italic">events/query</emphasis> resource lets you query for captured
        events. This resource does not perform any aggregation, rather it lets you query and filter
        for information about events. You can specify any number of dimensions and any number of
        filters in a query. Dimension item identifiers can refer to any of data elements, person
        attributes, person identifiers, fixed and relative periods and organisation units.
        Dimensions can optionally have a query operator and a filter. Event queries should be on the
        format described below.</para>
    <screen>api/analytics/events/query/&lt;program-id>?startDate=yyyy-MM-dd&amp;endDate=yyyy-MM-dd&amp;dimension=ou:&lt;ou-id>;&lt;ou-id>&amp;dimension=&lt;item-id>&amp;dimension=&lt;item-id>:&lt;operator>:&lt;filter></screen>
    <para>For example, to retrieve events from the "Inpatient morbidity and mortality" program
        between January and October 2012, where the "Gender" and "Age" data elements are included
        and the "Age" dimension is filtered on "18", you can use the following query:</para>
    <screen>api/analytics/events/query/eBAyeGv0exc?startDate=2012-01-01&amp;endDate=2012-10-31&amp;dimension=ou:O6uvpzGd5pu;fdc6uOvgoji&amp;dimension=oZg33kd9taw&amp;dimension=qrur9Dvnyt5:EQ:18</screen>
    <para>To retrieve events for the "Birth" program stage of the "Child programme" program between
        March and December 2012, where the "Weight" data element, filtered for values larger than
        2000:</para>
    <screen>api/analytics/events/query/IpHINAT79UW?stage=A03MvHHogjR&amp;startDate=2012-03-01&amp;endDate=2012-12-31&amp;dimension=ou:O6uvpzGd5pu&amp;dimension=UXz7xuGCEhU:GT:2000</screen>
      <para>Fixed person attributes can be specified as dimensions as well. Currently the GENDER and
        ISDEAD attributes are suppored and can be included and filtered on like this:</para>
      <screen>api/analytics/events/query/IpHINAT79UW?stage=A03MvHHogjR&amp;startDate=2012-03-01&amp;endDate=2012-12-31&amp;dimension=ou:O6uvpzGd5pu&amp;dimension=UXz7xuGCEhU:GT:2000&amp;dimension=ISDEAD&amp;dimension=GENDER:EQ:F</screen>
      <para>Sorting can be applied to the query for the event date of the event and any dimensions.
        To sort descending on the event date and ascending on the "Age" data element dimension you
        can use:</para>
      <screen>api/analytics/events/query/eBAyeGv0exc?startDate=2012-01-01&amp;endDate=2012-10-31&amp;dimension=ou:O6uvpzGd5pu&amp;dimension=qrur9Dvnyt5&amp;desc=EVENTDATE&amp;asc=qrur9Dvnyt5</screen>
      <para>Paging can be applied to the query by specifying the page number and the page size
        parameters. If page number is specified but page size is not, a page size of 50 will be
        used. If page size is specified but page number is not, a page number of 1 will be used. To
        get the third page of the response with a page size of 20 you can use a query like
        this:</para>
      <screen>api/analytics/events/query/eBAyeGv0exc?startDate=2012-01-01&amp;endDate=2012-10-31&amp;dimension=ou:O6uvpzGd5pu&amp;dimension=qrur9Dvnyt5&amp;page=3&amp;pageSize=20</screen>
    <section>
      <title>Filtering</title>
      <para>Filters can be applied to data elements, person attributes and person identifiers. The
        filtering is done through the query parameter value on the following format:</para>
      <screen>&amp;dimension=&lt;item-id>:&lt;operator>:&lt;filter-value></screen>
      <para>As an example, you can filter the "Weight" data element for values greater than 2000 and
        lower than 4000 like this:</para>
      <screen>&amp;dimension=UXz7xuGCEhU:GT:2000&amp;dimension=UXz7xuGCEhU:LT:4000</screen>
      <para>You can filter the "Age" data element for multiple, specific ages using the IN operator
          like this:<screen>&amp;dimension=qrur9Dvnyt5:IN:18;19;20</screen></para>
      <para>The available operators are listed below.</para>
      <table frame="all">
        <title>Filter operators</title>
        <tgroup cols="2">
          <colspec colname="c1" colnum="1" colwidth="87.75pt"/>
          <colspec colname="c2" colnum="2" colwidth="368.25pt"/>
          <thead>
            <row>
              <entry><emphasis role="italic">Operator</emphasis></entry>
              <entry><emphasis role="italic">Description</emphasis></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>EQ</entry>
              <entry>Equal to</entry>
            </row>
            <row>
              <entry>GT</entry>
              <entry>Greater than</entry>
            </row>
            <row>
              <entry>GE</entry>
              <entry>Greater than or equal to</entry>
            </row>
            <row>
              <entry>LT</entry>
              <entry>Less than</entry>
            </row>
            <row>
              <entry>LE</entry>
              <entry>Less than or equal to</entry>
            </row>
            <row>
              <entry>NE</entry>
              <entry>Not equal to</entry>
            </row>
            <row>
              <entry>LIKE</entry>
              <entry>Like (free text match)</entry>
            </row>
            <row>
              <entry>IN</entry>
              <entry>Equal to one of multiple values separated by ":"</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  <section>
    <title>Response formats</title>
    <para>The default response representation format is JSON. The requests must be using the HTTP
          <emphasis role="italic">GET</emphasis> method. The following response formats are
        supported.</para>
      <itemizedlist>
        <listitem>
          <para>json (application/json)</para>
        </listitem>
        <listitem>
          <para>jsonp (application/javascript)</para>
        </listitem>
        <listitem>
          <para>xls (application/vnd.ms-excel)</para>
        </listitem>
      </itemizedlist>
      <para>As an example, to get a response in Excel format you can use a file extension in the
        request URL like this:</para>
      <screen>api/analytics/events/query/eBAyeGv0exc.xls?startDate=2012-01-01&amp;endDate=2012-10-31&amp;dimension=ou:O6uvpzGd5pu&amp;dimension=oZg33kd9taw&amp;dimension=qrur9Dvnyt5</screen>
      <para>You can set the hierarchyMeta query parameter to true in order to include names of all
          ancestor organisation units in the meta-section of the response:</para>
        <screen>api/analytics/events/query/eBAyeGv0exc?startDate=2012-01-01&amp;endDate=2012-10-31&amp;dimension=ou:YuQRtpLP10I&amp;dimension=oZg33kd9taw&amp;dimension=qrur9Dvnyt5:EQ:50&amp;hierarchyMeta=true</screen>
        <para>The default response JSON format will look similar to this:</para>
      <screen>{
    "headers": [
    {
        "name": "psi",
        "column": "Event",
        "type": "java.lang.String",
        "hidden": false,
        "meta": false
    },
    {
        "name": "ps",
        "column": "Program stage",
        "type": "java.lang.String",
        "hidden": false,
        "meta": false
    },
    {
        "name": "eventdate",
        "column": "Event date",
        "type": "java.lang.String",
        "hidden": false,
        "meta": false
    },
    {
        "name": "coordinates",
        "column": "Coordinates",
        "type": "java.lang.String",
        "hidden": false,
        "meta": false
    },
    {
        "name": "ouname",
        "column": "Organisation unit name",
        "type": "java.lang.String",
        "hidden": false,
        "meta": false
    },
    {
        "name": "oucode",
        "column": "Organisation unit code",
        "type": "java.lang.String",
        "hidden": false,
        "meta": false
    },
    {
        "name": "ou",
        "column": "Organisation unit",
        "type": "java.lang.String",
        "hidden": false,
        "meta": false
    },
    {
        "name": "oZg33kd9taw",
        "column": "Gender",
        "type": "java.lang.String",
        "hidden": false,
        "meta": false
    },
    {
        "name": "qrur9Dvnyt5",
        "column": "Age",
        "type": "java.lang.String",
        "hidden": false,
        "meta": false
    } ],
    "metaData": {
        "names": {
            "qrur9Dvnyt5": "Age",
            "eBAyeGv0exc": "Inpatient morbidity and mortality",
            "ImspTQPwCqd": "Sierra Leone",
            "O6uvpzGd5pu": "Bo",
            "YuQRtpLP10I": "Badjia",
            "oZg33kd9taw": "Gender"
        },
        "ouHierarchy": {
            "YuQRtpLP10I": "/ImspTQPwCqd/O6uvpzGd5pu"
        },
    },
    "width": 8,
    "height": 25,
    "rows": [
        ["yx9IDINf82o", "Zj7UnCAulEk", "2012-08-05", "[5.12, 1.23]", "Ngelehun CHC", "OU_559", "YuQRtpLP10I", "Female", "50"],
        ["IPNa7AsCyFt", "Zj7UnCAulEk", "2012-06-12", "[5.22, 1.43]", "Ngelehun CHC", "OU_559", "YuQRtpLP10I", "Female", "50"],
        ["ZY9JL9dkhD2", "Zj7UnCAulEk", "2012-06-15", "[5.42, 1.33]", "Ngelehun CHC", "OU_559", "YuQRtpLP10I", "Female", "50"],
        ["MYvh4WAUdWt", "Zj7UnCAulEk", "2012-06-16", "[5.32, 1.53]", "Ngelehun CHC", "OU_559", "YuQRtpLP10I", "Female", "50"]
    ]
}</screen>
      <para>The <emphasis role="italic">headers</emphasis> section of the response describes the
          content of the query result. The event unique identifier, the program stage identifier,
          the event date, the organisation unit name, the organisation unit code and the
          organisation unit identifier appear as the first six dimensions in the response and will
          always be present. Next comes the data elements, person attributes and person identifiers
          which were specified as dimensions in the request, in this case the "Gender" and "Age"
          data element dimensions. The header section contains the identifier of the dimension item
          in the "name" property and a readable dimension description in the "column"
          property.</para>
        <para>The <emphasis role="italic">metaData</emphasis> section, <emphasis role="italic"
            >ou</emphasis> object contains the identifiers of all organisation units present in the
          response mapped to a string representing the hierarchy. This hierarchy string lists the
          identifiers of the ancestors (parents) of the organistion unit starting from the root. The
            <emphasis role="italic">names</emphasis> object contains the identifiers of all items in
          the response mapped to their names.</para>
      <para>The <emphasis role="italic">rows</emphasis> section contains the events produced by the
          query. Each row represents exactly one event.</para>
  </section>
  </section>
  <section>
    <title>Event aggregate analytics</title>
    <para>In order to get <emphasis role="italic">aggregated numbers</emphasis> of events captured
        in DHIS 2 you can work with the <emphasis role="italic"
          >analytics/events/aggregate</emphasis> resource. This resource lets you retrieve aggregate
        data based on a program and optionally a program stage, and lets you filter on any event
        dimension. In other words, it does not return the event information itself, rather the
        aggregate numbers of events matching the request query. Event dimensions include data
        elements, person attributes, person identifiers, periods and organisation units.</para>
    <para>Aggregate event queries should be on the format described below.</para>
    <screen>api/analytics/events/aggregate/&lt;program-id>?startDate=yyyy-MM-dd&amp;endDate=yyyy-MM-dd&amp;dimension=ou:&lt;ou-id>;&lt;ou-id>&amp;dimension=&lt;item-id>&amp;dimension=&lt;item-id>:&lt;operator>:&lt;filter></screen>
    <para>For example, to retrieve aggregate numbers for events from the "Inpatient morbidity and
        mortality" program between January and October 2012, where the "Gender" and "Age" data
        elements are included, the "Age" dimension item is filtered on "18" and the "Gender" item is
        filtered on "Female", you can use the following query:</para>
    <screen>api/analytics/events/aggregate/eBAyeGv0exc?startDate=2012-01-01&amp;endDate=2012-10-31&amp;dimension=ou:O6uvpzGd5pu&amp;dimension=oZg33kd9taw:EQ:Female&amp;dimension=qrur9Dvnyt5:GT:50</screen>
      <para>To retrieve data for fixed and relative periods instead of start and end date, in this
        case May 2012 and last 12 months, and the organisation unit associated with the current
        user, you can use the following query:</para>
      <screen>api/analytics/events/aggregate/eBAyeGv0exc?dimension=pe:201205;LAST_12_MONTHS&amp;dimension=ou:USER_ORGUNIT;fdc6uOvgo7ji&amp;dimension=oZg33kd9taw</screen>
      <para>In order to specify "Female" as a filter for "Gender" for the data response, meaning
        "Gender" will not be part of the response but will filter the aggregate numbers in it, you
        can use the following syntax:</para>
      <screen>api/analytics/events/aggregate/eBAyeGv0exc?dimension=pe:2012;&amp;dimension=ou:O6uvpzGd5pu&amp;filter=oZg33kd9taw:EQ:Female</screen>
      <para>To specify the "Bo" organisation unit and the period "2012" as filters, and the "Mode of
        discharge" and Gender" as dimensions, where "Gender" is filtered on the "Male" item, you can
        use a query like this:</para>
      <screen>api/analytics/events/aggregate/eBAyeGv0exc?filter=pe:2012&amp;filter=ou:O6uvpzGd5pu&amp;dimension=fWIAEtYVEGk&amp;dimension=oZg33kd9taw:EQ:Male</screen>
      <para>To create a "Top 3 report" for "Mode of discharge" you can use the limit and sortOrder
        query parameters similar to this:</para>
      <screen>api/analytics/events/aggregate/eBAyeGv0exc?filter=pe:2012&amp;filter=ou:O6uvpzGd5pu&amp;dimension=fWIAEtYVEGk&amp;limit=3&amp;sortOrder=DESC</screen>
    <section>
	<title>Response formats</title>
    <para>The default response representation format is JSON. The requests must be using the HTTP
            <emphasis role="italic">GET</emphasis> method. The response will look similar to
          this:</para>
    <screen>{
    "headers": [
        {
            "name": "oZg33kd9taw",
            "column": "Gender",
            "type": "java.lang.String",
            "meta": false
        },
        {
            "name": "qrur9Dvnyt5",
            "column": "Age",
            "type": "java.lang.String",
            "meta": false
        },
        {
            "name": "pe",
            "column": "Period",
            "type": "java.lang.String",
            "meta": false
        },
        {
            "name": "ou",
            "column": "Organisation unit",
            "type": "java.lang.String",
            "meta": false
        },
        {
            "name": "value",
            "column": "Value",
            "type": "java.lang.String",
            "meta": false
        }
    ],
    "metaData": {
        "names": {
            "eBAyeGv0exc": "Inpatient morbidity and mortality"
        }
    },
    "width": 5,
    "height": 39,
    "rows": [
        [
            "Female",
            "95",
            "201205",
            "O6uvpzGd5pu",
            "2"
        ],
        [
            "Female",
            "63",
            "201205",
            "O6uvpzGd5pu",
            "2"
        ],
        [
            "Female",
            "67",
            "201205",
            "O6uvpzGd5pu",
            "1"
        ],
        [
            "Female",
            "71",
            "201205",
            "O6uvpzGd5pu",
            "1"
        ],
        [
            "Female",
            "75",
            "201205",
            "O6uvpzGd5pu",
            "14"
        ],
        [
            "Female",
            "73",
            "201205",
            "O6uvpzGd5pu",
            "5"
        ],
    ]
}</screen>
  </section>
  </section>
  </section>
  <section>
    <title>Generating resource, analytics and data mart tables</title>
    <para>DHIS 2 features a set of generated database tables which are used as basis for various
      system functionality. These tables can be executed immediately or scheduled to be executed at
      regular intervals through the user interface. They can also be generated through the Web API
      as explained in this section. This task is typically one for a system administrator and not
      consuming clients. </para>
    <para>The resource tables are used internally by the DHIS 2 application for various analysis
      functions. These tables are also valuable for users writing advanced SQL reports. They can be
      generated with a POST or PUT request to the following URL:</para>
    <screen>http://&lt;server-url>/api/resourceTables</screen>
    <para>The analytics tables are optimized for data aggregation and used currently in DHIS 2 for
      the pivot table module. The analytics tables can be generated with a POST or PUT request
      to:</para>
    <screen>http://&lt;server-url>/api/resourceTables/analytics</screen>
    <para>The data mart is tables containing pre-calculated aggregated data which are used by DHIS 2
      analysis modules and can be used directly by SQL reports. The data mart tables can be
      generated with a POST or PUT request to:</para>
    <screen>http://&lt;server-url>/api/resourceTables/dataMart</screen>
    <para>These requests will return immediately and initiate a server-side process.</para>
  </section>
  <section>
    <title>System resource</title>
    <para>The system resource provides you with convenient information and functions. The system
      resource can be found at <emphasis role="italic">/api/system</emphasis>. </para>
    <section>
	<title>Generate identifiers</title>
    <para>To genereate valid, random DHIS 2 identifiers you can do a GET request to this
        resource:</para>
    <screen>http://&lt;server-url>/api/system/id?n=3</screen>
    <para>The <emphasis role="italic">n</emphasis> query parameter is optional and indicates how
        many identifiers you want to be returned with the response. The default is to return one
        identifier. The response will contain a JSON array similar to this:</para>
    <screen>[
    "Y0moqFplrX4",
    "WI0VHXuWQuV",
    "BRJNBBpu4ki"
]   </screen>
    </section>
    <section>
    <title>View system information</title>
    <para>To get information about the current system you can do a GET request to this URL:</para>
    <screen>http://yourdomain.com/api/system/info</screen>
    <para>JSON and JSONP response formats are supported. The system info response currently includes
        the below properties. Note that if the user who is requesting this resourec does not have
        full authority in the system then only the first seven properties will be included, as this
        information is security sensitive.</para>
    <screen>{
    contextPath: "http://yourdomain.com",
    userAgent: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.62 Safari/537.36",
    version: "2.13-SNAPSHOT",
    revision: "11852",
    buildTime: "2013-09-01T21:36:21.000+0000",
    serverDate: "2013-09-02T12:35:54.311+0000",
    environmentVariable: "DHIS2_HOME",
    javaVersion: "1.7.0_06",
    javaVendor: "Oracle Corporation",
    javaIoTmpDir: "/tmp",
    javaOpts: "-Xms600m -Xmx1500m -XX:PermSize=400m -XX:MaxPermSize=500m",
    osName: "Linux",
    osArchitecture: "amd64",
    osVersion: "3.2.0-52-generic",
    externalDirectory: "/home/dhis/config/dhis2",
    databaseInfo: {
        type: "PostgreSQL",
        name: "dhis2",
        user: "dhis"
    },
    memoryInfo: "Mem Total in JVM: 848 Free in JVM: 581 Max Limit: 1333",
    cpuCores: 8
    }</screen>
      <para>To get information about the system context (<emphasis role="italic"
          >contextPath</emphasis> and <emphasis role="italic">userAgent</emphasis>) only you can do
        a GET request to the below URL. JSON and JSONP response formats are supported:
        <screen>http://yourdomain.com/api/system/context</screen></para>
    </section>
    <section>
      <title>Check if username and password combination is correct</title>
      <para>To check if some user credentials (a username and password combination) is correct you
        can make a <emphasis role="italic">GET</emphasis> request to the following resource using
          <emphasis role="italic">basic authentication</emphasis>:</para>
      <screen>http://&lt;server-url>/api/system/ping</screen>
      <para>You can detect the outcome of the authentication by inspecting the <emphasis
          role="italic">HTTP status code</emphasis> of the response header. The meaning of the
        possible status codes are listed below. Note that this applies to Web API requests in
        general.</para>
      <table frame="all">
        <title>HTTP Status codes</title>
        <tgroup cols="3">
          <colspec colname="c1" colnum="1" colwidth="1.1*"/>
          <colspec colname="c2" colnum="2" colwidth="1*"/>
          <colspec colname="newCol3" colnum="3" colwidth="6.09*"/>
          <thead>
            <row>
              <entry>HTTP Status code</entry>
              <entry>Description</entry>
              <entry>Outcome</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>200</entry>
              <entry>OK</entry>
              <entry>Authentication was successful</entry>
            </row>
            <row>
              <entry>302</entry>
              <entry>Found</entry>
              <entry>No credentials was supplied with the request - no authentication took
                place</entry>
            </row>
            <row>
              <entry>401</entry>
              <entry>Bad credentials</entry>
              <entry>The username and password combination was incorrect - authentication not
                successful</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>
  <section>
    <title>User information and associations</title>
    <para>In order to get information about the currently authenticated user and its associations to other resources you can work with the <emphasis
        role="italic">me</emphasis> resource (you can also refer to it by its old name <emphasis role="italic">currentUser</emphasis>). The current user related
      resources gives your information which is useful when building clients for instance for data entry and user management. The following describes these
      resources and their purpose.</para>
    <para><emphasis role="bold">http://&lt;server-url>/api/me</emphasis> Gives basic information about the user that you are currently logged in as, including
      username, user credentials, assigned organisation units.</para>
    <para><emphasis role="bold">http://&lt;server-url>/api/me/dashboard</emphasis> Gives information about currently unread messages and interpretations.</para>
    <para><emphasis role="bold">http://&lt;server-url>/api/me/inbox</emphasis> Lists all messages and interpretations in the inbox (including replies).</para>
    <para><emphasis role="bold">http://&lt;server-url>/api/me/user-account</emphasis> Gives the full profile information for current user. This endpoint support
      both <emphasis role="italic">GET</emphasis> to retrieve profile and <emphasis role="italic">POST</emphasis> to update profile (the exact same format is
      used),</para>
    <para><emphasis role="bold">http://&lt;server-url>/api/me/organisationUnits</emphasis> Lists all organisation units directly assigned to the user.</para>
    <para><emphasis role="bold">http://&lt;server-url>/api/me/dataSets</emphasis> Gives all the datasets assigned to the users organisation units, and their
      direct children. This endpoint contains all required information to build a form based on one of our datasets. If you want all descendants of your
      assigned organisation units, you can use the query parameter <emphasis role="italic">includeDescendants=true</emphasis>.</para>
    <para><emphasis role="bold">http://&lt;server-url>/api/me/programs</emphasis> Gives all the programs assigned to the users organisation units, and their
      direct children. This endpoint contains all required information to build a form based on one of our datasets. If you want all descendants of your
      assigned organisation units, you can use the query parameter <emphasis role="italic">includeDescendants=true</emphasis>.</para>
  </section>
  <section>
    <title>System settings</title>
    <para>You can manipulate system settings by interacting with the <emphasis role="italic"
        >systemSettings</emphasis> resource. A system setting is a simple key-value pair, where both
      the key and the value are plain text strings. To save or update a system setting you can make
      a <emphasis role="italic">POST</emphasis> request to the following URL:</para>
    <screen>/api/systemSettings/my-key?value=my-val</screen>
    <para>Alternatively, you can submit the setting value as the request body, where content type is
      set to "text/plain". As an example, you can use curl like this:</para>
    <screen>curl "apps.dhis2.org/demo/api/systemSettings/my-key" -d "My long value" -H "Content-Type: text/plain" -u admin:district -v</screen>
    <para>You should replace my-key with your real key and my-val with your real value. To retrieve
      the value for a given key in plain text you can make a <emphasis role="italic">GET</emphasis>
      request to the following URL:</para>
    <screen>/api/systemSettings/my-key</screen>
    <para>To delete a system setting, you can make a <emphasis role="italic">DELETE</emphasis>
      request to the URL similar to the one used above for retrieval.</para>
  </section>
  <section>
    <title>User settings</title>
    <para>You can manipulate user settings by interacting with the <emphasis role="italic"
        >userSettings</emphasis> resource. A user setting is a simple key-value pair, where both the
      key and the value are plain text strings. The user setting will be linked to the user who is
      authenticated for the Web API request. To save or update a user setting you can make a
        <emphasis role="italic">POST</emphasis> request to the following URL:</para>
    <screen>/api/userSettings/my-key?value=my-val</screen>
    <para>Alternatively, you can submit the setting value as the request body, where content type is
      set to "text/plain". As an example, you can use curl like this:</para>
    <screen>curl "apps.dhis2.org/demo/api/userSettings/my-key" -d "My long value" -H "Content-Type: text/plain" -u admin:district -v</screen>
    <para>You should replace my-key with your real key and my-val with your real value. To retrieve
      the value for a given key in plain text you can make a <emphasis role="italic">GET</emphasis>
      request to the following URL:</para>
    <screen>/api/userSettings/my-key</screen>
    <para>To delete a user setting, you can make a <emphasis role="italic">DELETE</emphasis> request
      to the URL similar to the one used above for retrieval.</para>
  </section>
  <section>
    <title>Person management</title>
    <para>Persons have full CRUD (create, read, update, delete) support in the Web-API. Together
      with the API for enrollment most operations needed for working with persons and programs are
      supported.</para>
    <section>
      <title>Creating a new person</title>
      <para>For creating a new person in the system, you will be working with the <emphasis
          role="italic">persons</emphasis> resource. An template payload can be seen
        below:<screen>{
    "orgUnit": "Organisation unit identifier",
    "name": "Name of Person",
    "gender": "MALE | FEMALE | TRANSGENDER",
    "dateOfBirth": {
        "type": "VERIFIED | DECLARED | APPROXIMATE",
        "age": "30", // years, relevant for APPROXIMATE
        "date": "2081-03-04" // date, relevant for VERIFIED and DECLARED
    },
    "dateOfRegistration": "2013-04-01", // Optional, current date is default
    "contact": {
        "phoneNumber": "Phone number"
    },
    "relationships": [ {
        "type": "Relationship type identifier",
        "person": "Person identifier"
    } ],
    "identifiers": [ {
        "type": "Person id identifier",
        "value": "1234"
    } ],
    "attributes": [ {
        "type": "Person attribute identifier",
        "value": "My address"
    } ]
}</screen></para>
      <para>For getting the identifiers for <emphasis role="italic">relationship</emphasis>,
          <emphasis role="italic">identifiers</emphasis>, <emphasis role="italic"
          >attributes</emphasis> you can have a look at the respective resources <emphasis
          role="italic">relationshipTypes</emphasis>, <emphasis role="italic"
          >personIdentifiers</emphasis>, <emphasis role="italic">personAttributes</emphasis>. To
        create a person you must use the HTTP <emphasis role="bold">POST</emphasis> method. You can
        post the payload the the following URL:</para>
      <screen>/api/persons</screen>
    </section>
    <section>
      <title>Updating a person</title>
      <para>For updating a person, the payload is the equal to the previous section. The difference
        is that you must use the HTTP <emphasis role="bold">PUT</emphasis> method for the request
        when sending the payload. You will also need to append the person identifier to the
          <emphasis role="italic">persons</emphasis> resource in the URL like this, where
        &lt;person-identifier> should be replaced by the identifier of the person:</para>
      <screen>/api/persons/&lt;person-id></screen>
    </section>
    <section>
      <title>Deleting a person</title>
      <para>To delete a person you can make a request to the URL identifiying the person with the
        HTTP <emphasis role="bold">DELETE</emphasis> method. The URL is equal to the one above used
        for update.</para>
    </section>
    <section>
      <title>Querying for persons</title>
      <para>There are several parameter available on the <emphasis role="italic">persons</emphasis>
        resource for querying for persons, <emphasis role="italic">orgUnit</emphasis> paramter is
        always required (unless querying for identifiers, please see below).</para>
      <para>Query for persons can be done in these ways. All requests should use the HTTP <emphasis
          role="bold">GET</emphasis>
        method:<screen>/api/persons?orgUnit=&lt;orgunit-id></screen></para>
      <para>Query for org unit and like
        name:<screen>/api/persons?orgUnit=&lt;orgunit-id>&amp;nameLike=&lt;name></screen></para>
      <para>Query for org unit and
        program:<screen>/api/persons?orgUnit=&lt;orgunit-id>&amp;program=&lt;program-id></screen></para>
      <para>Query for system identifier:<screen>/api/persons?identifier=SYSTEM_ID</screen></para>
      <para>Query for specific identifier
        type:<screen>/api/persons?identifierType=&lt;id-type-id>&amp;identifier=&lt;person-id></screen></para>
    </section>
    <section>
      <title>Enrolling a person into a program</title>
      <para>For enrolling persons into a program, you will need to first get the identifier of the
        person from the <emphasis role="italic">persons</emphasis> resource. Then, you will need to
        get the program identifier from the <emphasis role="italic">programs</emphasis> resource. A
        template payload can be seen
        below:<screen>{
    "person": "ZRyCnJ1qUXS",
    "program": "S8uo8AlvYMz",
    "dateOfEnrollment": "2013-09-17",
    "dateOfIncident": "2013-09-17"
}</screen></para>
      <para>This payload should be used in a <emphasis role="bold">POST</emphasis> request to the
        enrollments resource identified by the following URL:</para>
      <screen>/api/enrollments</screen>
      <para>For cancelling or completing an enrollment, you can make a <emphasis role="bold"
          >PUT</emphasis> request to the <emphasis role="italic">enrollments</emphasis> resource,
        including the identifier and the action you want to perform. For cancelling an enrollment
        for a person:<screen>/api/enrollments/&lt;enrollment-id>/cancelled</screen></para>
      <para>For completing a program for a person you can make a <emphasis role="bold"
          >PUT</emphasis> request to the following
        URL:<screen>/api/enrollments/&lt;enrollment-id>/completed</screen></para>
    </section>
  </section>
  <section>
    <title>FRED API</title>
    <para>DHIS 2 from version 2.11 implements support for the current draft
      of the FRED API version 1.0. The project defines itself as <quote>open standard for sharing and updating
        health facility data</quote>. The full specification, including representation format and basic usage, can be found at <ulink url="http://facilityregistry.org/">http://facilityregistry.org/</ulink>.</para>
    <para>Since version 1.0 is not finalized there are parts of the current specification that has not
      been implemented as we found it not to be in a stable enough state. Most notably we do not
      currently support sorting (we do however sort on name by default) and filtering of facilities.</para>
    <para>The entry point for the implementation can be found at http://&lt;server-url>/api-fred
      and the current version is located at http://&lt;server-url>/api-fred/v1.</para>
    <para>This section will give some simple examples of using the API.</para>
        <para>Get all facilities:</para>
        <screen>curl -u username:password -X GET http://&lt;server-url>/api-fred/v1/facilities.json</screen>
        <para>Get a specific facility based on either identifier or UUID:</para>
        <screen>curl -u username:password -X GET http://&lt;server-url>/api-fred/v1/facilities/&lt;id>.json
curl -u username:password -X GET http://&lt;server-url>/api-fred/v1/facilities/&lt;uuid>.json</screen>
        <para>Create a new facility:</para>
        <screen>curl -u username:password -X POST -d @new_facility.json
  -H "Content-Type: application/json" http://&lt;server-url>/api-fred/v1/facilities.json</screen>
        <para>Update a facility:</para>
        <screen>curl -u username:password -X POST -d @updated_facility.json
  -H "Content-Type: application/json" http://&lt;server-url>/api-fred/v1/facilities/&lt;id>.json</screen>
<screen>
curl -u username:password -X POST -d @updated_facility.json
  -H "Content-Type: application/json" http://&lt;server-url>/api-fred/v1/facilities/&lt;uuid>.json</screen>
  </section>
</chapter>
