default namespace = "http://dhis2.org/ns/schema/dxf2"

# dxf2.rng - is "the source"
# dxf2.rnc and dxf.xsd are derived using jing
# 
# TODO:
# ns="http://www.dhis2.org/schema/dxf" >

# These are toplevel elements of dxf format
start =
  element dxf {
    element metadata {
      # Metadata section
      # This is a rough grouping of the sections
      # as they appear in the file.
      # Each section is optional.
      MultiDimensionalElements?,
      DataElementDefinition?,
      IndicatorDefinition?,
      DataDictionaryDefinition?,
      DataSetDefinition?,
      OrgUnitDefinition?,
      periods?,
      ReportTableDefinition?,
      completeDataSetRegistrations?
    },
    # DataValues
    dataValues?
  }
# 
# Each of the MetaData groups is a sequence of elements
# 
#
MultiDimensionalElements =
  categories, categoryCombos, categoryOptionCombos
DataElementDefinition = dataElements, dataElementGroupSets
IndicatorDefinition = indicatorTypes, indicators, IndicatorGroupSets
DataDictionaryDefinition =
  dataDictionaries, dataDictionaryDataElements, dataDictionaryIndicators
DataSetDefinition = dataSets, dataSetMembers
OrgUnitDefinition =
  organisationUnits,
  organisationUnitRelationships,
  organisationUnitGroups,
  organisationUnitGroupMembers,
  groupSets,
  groupSetMembers,
  organisationUnitLevels,
  dataSetSourceAssociations
ReportTableDefinition =
  reportTables,
  reportTableDataElements,
  reportTableCategoryOptionCombos,
  reportTableIndicators,
  reportTableDataSets,
  reportTablePeriods,
  reportTableOrganisationUnits
# common base for identifiable objects
identifiableObject =
  element id { xsd:integer },
  element uuid { text },
  element name { text },
  element alternativename { text },
  element shortname { text },
  element code { text },
  element description { text }
# 
# The ugly detail of each element follows ...
# 
#

# MultiDimensionalElements
categories =
  element categories {
    element category {
      identifiableObject,
      element categoryOption { identifiableObject }+
    }+
  }
categoryCombos = element categoryCombos { categoryCombo+ }
categoryCombo =
  element categoryCombo {
    element id { xsd:integer },
    element name { text },
    element categories {
      element categoryId { xsd:integer }*
    }
  }
categoryOptionCombos =
  element categoryOptionCombos {
    element categoryOptionCombo {
      identifiableObject,
      element categoryComboId { xsd:integer },
      element categoryOptionId { xsd:integer }*
    }*
  }
# DataElementDefinition
dataElements = element dataElements { dataElement* }
dataElement =
  element dataElement {
    identifiableObject,
    element active { text },
    element type { text },
    element aggregationOperator { text },
    element categoryCombo { xsd:integer }
  }
dataElementGroupSets =
  element dataElementGroupSets {
    element dataElementGroupSet {
      identifiableObject,
      element dataElementGroup {
        identifiableObject,
        element dataElementId { xsd:integer }+
      }+
    }*
  }
# IndicatorDefinition
indicatorTypes =
  element indicatorTypes {
    element indicatorType {
      element id { xsd:integer },
      element name { text },
      element factor { xsd:integer }
    }*
  }
indicators =
  element indicators {
    element indicator {
      identifiableObject,
      element annualized { text },
      element indicatorType { xsd:integer },
      element numerator { text },
      element numeratorDescription { text },
      element numeratorAggregationOperator { text },
      element denominator { text },
      element denominatorDescription { text },
      element denominatorAggregationOperator { text }
    }*
  }
IndicatorGroupSets =
  element IndicatorGroupSets {
    element IndicatorGroupSet {
      identifiableObject,
      element IndicatorGroup {
        identifiableObject,
        element IndicatorId { xsd:integer }
      }+
    }*
  }
# Data Dictionary Definition
dataDictionaries =
  element dataDictionaries {
    element dataDictionary {
      element id { xsd:integer },
      element name { text },
      element description { text },
      element region { text }
    }*
  }
dataDictionaryDataElements =
  element dataDictionaryDataElements {
    element dataDictionaryDataElement {
      element dataDictionary { xsd:integer },
      element dataElement { xsd:integer }
    }*
  }
dataDictionaryIndicators =
  element dataDictionaryIndicators {
    element dataDictionaryIndicator {
      element dataDictionary { xsd:integer },
      element indicator { xsd:integer }
    }*
  }
# DataSet Definition
dataSets =
  element dataSets {
    element dataSet {
      element id { xsd:integer },
      element name { text },
      element shortName { text },
      element code { text },
      element periodType { text }
    }*
  }
dataSetMembers =
  element dataSetMembers {
    # TODO: check dataSetMembers
    anyElements
  }
# Organisation Unit Definition
organisationUnits = element organisationUnits { organisationUnit* }
organisationUnit =
  element organisationUnit {
    (element id { xsd:integer },
     element uuid { text },
     element name { text },
     element shortName { text },
     element code { text },
     # <element name="openingDate"><data type="date"/></element>
     element openingDate { text },
     # TODO: accept Date or nothing
     element closedDate { text },
     element active { text },
     element comment { text },
     element geoCode { text })
    # TODO: URL in dxf?
    
  }
organisationUnitRelationships =
  element organisationUnitRelationships {
    element organisationUnitRelationship {
      element parent { xsd:integer },
      element child { xsd:integer }
    }*
  }
organisationUnitGroups =
  element organisationUnitGroups {
    element organisationUnitGroup {
      element id { xsd:integer },
      element uuid { text },
      element name { text }
    }*
  }
organisationUnitGroupMembers =
  element organisationUnitGroupMembers {
    element organisationUnitGroupMember {
      element organisationUnitGroup { xsd:integer },
      element organisationUnit { xsd:integer }
    }*
  }
groupSets =
  element groupSets {
    element groupSet {
      element id { xsd:integer },
      element name { text },
      element description { text },
      element compulsory { "true" | "false" },
      element exclusive { "true" | "false" }
    }*
  }
groupSetMembers =
  element groupSetMembers {
    element groupSetMember {
      element groupSet { xsd:integer },
      element organisationUnitGroup { xsd:integer }
    }*
  }
organisationUnitLevels =
  element organisationUnitLevels {
    element organisationUnitLevel {
      element id { xsd:integer },
      element level { xsd:integer },
      element name { text }
    }*
  }
dataSetSourceAssociations =
  element dataSetSourceAssociations {
    element dataSetSourceAssociation {
      element dataSet { xsd:integer },
      element source { xsd:integer }
    }*
  }
# Periods
periods =
  element periods {
    element period {
      element id { xsd:integer },
      element periodType { text },
      element startDate { xsd:date },
      element endDate { xsd:date }
    }*
  }
# ReportTable Definition
reportTables =
  element reportTables {
    element reportTable {
      element id { xsd:integer },
      element name { text },
      element tableName { text },
      element existingTableName { text },
      element mode { text },
      element regression { "true" | "false" },
      element doIndicators { "true" | "false" },
      element doCategoryOptionCombos { "true" | "false" },
      element doPeriods { "true" | "false" },
      element doOrganisationUnits { "true" | "false" },
      element reportingMonth { "true" | "false" },
      element last3Months { "true" | "false" },
      element last6Months { "true" | "false" },
      element last9Months { "true" | "false" },
      element last12Months { "true" | "false" },
      element soFarThisYear { "true" | "false" },
      element soFarThisFinancialYear { "true" | "false" },
      element last3To6Months { "true" | "false" },
      element last6To9Months { "true" | "false" },
      element last9To12Months { "true" | "false" },
      element last12IndividualMonths { "true" | "false" },
      element individualMonthsThisYear { "true" | "false" },
      element individualQuartersThisYear { "true" | "false" },
      element paramReportingMonth { "true" | "false" },
      element paramParentOrganisationUnit { "true" | "false" },
      element paramOrganisationUnit { "true" | "false" }
    }*
  }
reportTableDataElements =
  element reportTableDataElements {
    # TODO: check for proper children
    anyElements
  }
# ReportTableCategoryOptionCombos
reportTableCategoryOptionCombos =
  element reportTableCategoryOptionCombos {
    # TODO: check for proper children
    anyElements
  }
# ReportTableIndicators
reportTableIndicators =
  element reportTableIndicators {
    element reportTableIndicator {
      element reportTable { xsd:integer },
      element indicator { xsd:integer },
      element sortOrder { xsd:integer }
    }*
  }
# ReportTableDataSets
reportTableDataSets =
  element reportTableDataSets {
    element reportTableDataSet {
      element reportTable { xsd:integer },
      element dataSet { xsd:integer },
      element sortOrder { xsd:integer }
    }*
  }
# ReportTablePeriods
reportTablePeriods =
  element reportTablePeriods {
    # TODO: check for proper children
    anyElements
  }
# ReportTableOrganisationUnits
reportTableOrganisationUnits =
  element reportTableOrganisationUnits {
    element reportTableOrganisationUnit {
      element reportTable { xsd:integer },
      element organisationUnit { xsd:integer },
      element sortOrder { xsd:integer }
    }*
  }
# TODO: What are these?
completeDataSetRegistrations =
  element completeDataSetRegistrations {
    # TODO: check completeDataSetRegistrations
    anyElements
  }
# DataValue Section
dataValues =
  element dataValues {
    element dataValue {
      attribute dataElement { xsd:integer },
      attribute period { xsd:integer },
      attribute source { xsd:integer },
      attribute value { text },
      attribute storedBy { xsd:integer }?,
      attribute timeStamp { text }?,
      attribute comment { text }?,
      attribute categoryOptionCombo { xsd:integer }
    }*
  }
# Convenience (from odf spec) for filling in the "dark spots"
anyAttListOrElements =
  attribute * { text }*,
  anyElements
anyElements =
  element * {
    mixed { anyAttListOrElements }
  }*
